<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>windows通过xrdp链接阿里云服务器Ubuntu</title>
      <link href="/2020/03/15/windows%E9%80%9A%E8%BF%87xrdp%E9%93%BE%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8Ubuntu/"/>
      <url>/2020/03/15/windows%E9%80%9A%E8%BF%87xrdp%E9%93%BE%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8Ubuntu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本地Windows远程桌面连接阿里云Ubuntu 16.04服务器:</p><p>1、目的:希望通过本地的Windows远程桌面连接到阿里云的Ubuntu服务器,通过远程桌面图形界面的方式操作服务器。</p><p>2、条件:申请的阿里云Ubuntu服务器一台,本地Windows操作系统电脑一台。</p><p>3、如何远程桌面连接:</p><p>(1)首先通过Windows系统下连接Linux系统的命令行工具连接Ubuntu服务器,(工具:xshell,securecrt,putty等)。</p><p>(2)通过Windows下工具连接到linux操作系统,之后打开命令窗口,切换到root权限。</p><p>(3)先安装更新:<code>apt-get upate</code>。</p><p>(4)安装xrdp:输入<code>apt-get install xrdp</code>–&gt;回车–&gt;输入”y”–&gt;回车,安装完成。</p><p>   (xrdp: An open source remote desktop protocol(rdp) server)</p><p>(5)安装vnc4server:输入<code>apt-get install vnc4server</code>“–&gt;回车–&gt;输入”y”–&gt;回车,安装完成。</p><p>   (VNC (Virtual Network Console)是虚拟网络控制台的缩写)</p><p>(6)安装xfce4:输入<code>apt-get install xubuntu-desktop&quot;</code>–&gt;回车–&gt;输入”y”–&gt;回车。</p><p>​      –&gt;输入<code>echo &quot;xfce4-session&quot; &gt;~/.xsession</code>–&gt;回车–&gt;输入<code>service xrdp restart</code>–&gt;回车,安装完成。</p><p>​     (Xfce是一个自由软件,运行在类Unix操作系统 (如Linux、FreeBSD 和 Solaris)上,提供轻量级桌面环境。)</p><p>(7)在本地Windows电脑上,使用”窗口键+R”打开”运行对话框”–&gt;输入”mstsc”–&gt;回车–&gt;输入Ubuntu主机的IP地址–&gt;“连接”。</p><p>(8)选择”sesman-Xvnc”–&gt;输入”用户名和密码”–&gt;回车,成功登录到Ubuntu桌面,现在可以进行远程操作了。</p><h3 id="（注意：最新版本的xrdp没有“sesman-Xvnc”这一选项，选择默认的”xorg”链接即可）。"><a href="#（注意：最新版本的xrdp没有“sesman-Xvnc”这一选项，选择默认的”xorg”链接即可）。" class="headerlink" title="（注意：最新版本的xrdp没有“sesman-Xvnc”这一选项，选择默认的”xorg”链接即可）。"></a>（注意：最新版本的xrdp没有“sesman-Xvnc”这一选项，选择默认的”xorg”链接即可）。</h3><p><img alt data-src="https://s1.ax1x.com/2020/03/15/81faod.jpg" class="lazyload"></p><p>然后我们点击<strong>显示选项</strong>，将用户名改为自己Ubuntu上的用户名，我的是root。</p><p>​    <img alt data-src="https://s1.ax1x.com/2020/03/15/81fLTJ.png" class="lazyload"></p><p>如下所示，输入<strong>密码</strong>即可链接远程<code>桌面</code>。</p><p>​    </p><p><img alt data-src="https://s1.ax1x.com/2020/03/15/81h9OO.png" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> 阿里云 </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉搜索树的相关操作</title>
      <link href="/2019/12/11/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C-1/"/>
      <url>/2019/12/11/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> *<span class="title">Position</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> Position BinTree;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> &#123;</span></span><br><span class="line">ElementType Data;</span><br><span class="line">BinTree Left;</span><br><span class="line">BinTree Right;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreorderTraversal</span><span class="params">(BinTree BT)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InorderTraversal</span><span class="params">(BinTree  BT)</span></span>;  </span><br><span class="line"></span><br><span class="line"><span class="function">BinTree <span class="title">Insert</span><span class="params">(BinTree BST, ElementType X)</span></span>;</span><br><span class="line"><span class="function">BinTree <span class="title">Delete</span><span class="params">(BinTree BST, ElementType X)</span></span>;</span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(BinTree BST, ElementType X)</span></span>;</span><br><span class="line"><span class="function">Position <span class="title">FindMin</span><span class="params">(BinTree BST)</span></span>;</span><br><span class="line"><span class="function">Position <span class="title">FindMax</span><span class="params">(BinTree BST)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BinTree BST, MinP, MaxP, Tmp;</span><br><span class="line">ElementType X;</span><br><span class="line"><span class="keyword">int</span> N, i;</span><br><span class="line"></span><br><span class="line">BST = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;X);</span><br><span class="line">BST = Insert(BST, X);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Preorder:"</span>); PreorderTraversal(BST); <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">MinP = FindMin(BST);</span><br><span class="line">MaxP = FindMax(BST);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;X);</span><br><span class="line">Tmp = Find(BST, X);</span><br><span class="line"><span class="keyword">if</span> (Tmp == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">"%d is not found\n"</span>, X);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d is found\n"</span>, Tmp-&gt;Data);</span><br><span class="line"><span class="keyword">if</span> (Tmp == MinP) <span class="built_in">printf</span>(<span class="string">"%d is the smallest key\n"</span>, Tmp-&gt;Data);</span><br><span class="line"><span class="keyword">if</span> (Tmp == MaxP) <span class="built_in">printf</span>(<span class="string">"%d is the largest key\n"</span>, Tmp-&gt;Data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;X);</span><br><span class="line">BST = Delete(BST, X);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Inorder:"</span>); InorderTraversal(BST); <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BinTree <span class="title">Insert</span><span class="params">(BinTree BST, ElementType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!BST) &#123;</span><br><span class="line">BST =(BinTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct TNode));</span><br><span class="line">BST-&gt;Data = x;</span><br><span class="line">BST-&gt;Left = BST-&gt;Right = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (BST-&gt;Data &lt; x) BST-&gt;Right = Insert(BST-&gt;Right, x);</span><br><span class="line"><span class="keyword">if</span> (BST-&gt;Data &gt; x) BST-&gt;Left = Insert(BST-&gt;Left, x);</span><br><span class="line"><span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BinTree <span class="title">Delete</span><span class="params">(BinTree BST, ElementType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!BST) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Not Found\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; BST-&gt;Data) BST-&gt;Left = Delete(BST-&gt;Left, x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x &gt; BST-&gt;Data) BST-&gt;Right = Delete(BST-&gt;Right, x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x == BST-&gt;Data) &#123;</span><br><span class="line"><span class="keyword">if</span> (BST-&gt;Left &amp;&amp; BST-&gt;Right) &#123;</span><br><span class="line">BinTree t = FindMin(BST-&gt;Right);</span><br><span class="line">BST-&gt;Data = t-&gt;Data;</span><br><span class="line">BST-&gt;Right = Delete(BST-&gt;Right, BST-&gt;Data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!BST-&gt;Left)BST = BST-&gt;Right;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!BST-&gt;Right)BST = BST-&gt;Left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(BinTree BST, ElementType X)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (BST-&gt;Data == X)</span><br><span class="line"><span class="keyword">return</span> BST;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (X &lt; BST-&gt;Data) <span class="keyword">return</span> Find(BST -&gt;Left,X);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (X &gt; BST-&gt;Data) <span class="keyword">return</span> Find(BST -&gt;Right, X);</span><br><span class="line"><span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Position <span class="title">FindMin</span><span class="params">(BinTree BST)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST) &#123;</span><br><span class="line"><span class="keyword">if</span> (BST-&gt;Left) <span class="keyword">return</span> FindMin(BST-&gt;Left);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Position <span class="title">FindMax</span><span class="params">(BinTree BST)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST) &#123;</span><br><span class="line"><span class="keyword">if</span> (BST-&gt;Right) <span class="keyword">return</span> FindMax(BST-&gt;Right);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InorderTraversal</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line"><span class="comment">//常规中续遍历</span></span><br><span class="line"><span class="keyword">if</span> (BT == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">InorderTraversal(BT-&gt;Left);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d"</span>, BT-&gt;Data);</span><br><span class="line">InorderTraversal(BT-&gt;Right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreorderTraversal</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BT == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d"</span>, BT-&gt;Data);</span><br><span class="line">PreorderTraversal(BT-&gt;Left);</span><br><span class="line">PreorderTraversal(BT-&gt;Right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下附运行结果</p><p><img alt data-src="https://s2.ax1x.com/2019/12/11/Qs5oQg.png" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 二叉搜索树 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实验7之迪杰斯特拉最短路径</title>
      <link href="/2019/12/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E4%B8%83%E4%B9%8B%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
      <url>/2019/12/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E4%B8%83%E4%B9%8B%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>以山东大学威海的部分建筑物为例来实现迪杰斯特拉算法</p><p><img alt data-src="https://s2.ax1x.com/2019/12/02/QuM78S.png" class="lazyload"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; couple;</span><br><span class="line"><span class="keyword">int</span> e[<span class="number">20</span>][<span class="number">20</span>], dis[<span class="number">20</span>], book[<span class="number">20</span>], min, n, u, v, m, t1, t2, t3, infinity = <span class="number">9999999</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">map_init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">couple[<span class="string">"泰园餐厅"</span>] = <span class="number">1</span>;</span><br><span class="line">couple[<span class="string">"6号楼"</span>] = <span class="number">2</span>;</span><br><span class="line">couple[<span class="string">"5号楼"</span>] = <span class="number">3</span>;</span><br><span class="line">couple[<span class="string">"体育馆"</span>] = <span class="number">4</span>;</span><br><span class="line">couple[<span class="string">"田径场"</span>] = <span class="number">5</span>;</span><br><span class="line">couple[<span class="string">"馨园餐厅"</span>] = <span class="number">6</span>;</span><br><span class="line">couple[<span class="string">"荟园餐厅"</span>] = <span class="number">7</span>;</span><br><span class="line">couple[<span class="string">"法学院"</span>] = <span class="number">8</span>;</span><br><span class="line">couple[<span class="string">"雀园餐厅"</span>] = <span class="number">9</span>;</span><br><span class="line">couple[<span class="string">"电子楼"</span>] = <span class="number">10</span>;</span><br><span class="line">couple[<span class="string">"图书馆"</span>] = <span class="number">11</span>;</span><br><span class="line">couple[<span class="string">"网络楼"</span>] = <span class="number">12</span>;</span><br><span class="line">couple[<span class="string">"数学院"</span>] = <span class="number">13</span>;</span><br><span class="line">couple[<span class="string">"教师公寓"</span>] = <span class="number">14</span>;</span><br><span class="line">couple[<span class="string">"机电院"</span>] = <span class="number">15</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_matrix</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">15</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">15</span>; j++)</span><br><span class="line"><span class="keyword">if</span> (i == j) e[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> e[i][j] = infinity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input_matrix</span><span class="params">(<span class="built_in">string</span> a,<span class="built_in">string</span> b)</span> </span>&#123;</span><br><span class="line">e[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">50</span>;e[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">50</span>;</span><br><span class="line">e[<span class="number">1</span>][<span class="number">6</span>] = <span class="number">50</span>;e[<span class="number">6</span>][<span class="number">1</span>] = <span class="number">50</span>;</span><br><span class="line">e[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">20</span>;e[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">20</span>;</span><br><span class="line">e[<span class="number">3</span>][<span class="number">4</span>] = <span class="number">289</span>;e[<span class="number">4</span>][<span class="number">3</span>] = <span class="number">289</span>;</span><br><span class="line">e[<span class="number">4</span>][<span class="number">5</span>] = <span class="number">150</span>;e[<span class="number">5</span>][<span class="number">4</span>] = <span class="number">150</span>;</span><br><span class="line">e[<span class="number">7</span>][<span class="number">6</span>] = <span class="number">50</span>; e[<span class="number">6</span>][<span class="number">7</span>] = <span class="number">50</span>;</span><br><span class="line">e[<span class="number">7</span>][<span class="number">8</span>] = <span class="number">150</span>; e[<span class="number">8</span>][<span class="number">7</span>] = <span class="number">150</span>;</span><br><span class="line">e[<span class="number">8</span>][<span class="number">9</span>] = <span class="number">200</span>; e[<span class="number">9</span>][<span class="number">8</span>] = <span class="number">200</span>;</span><br><span class="line">e[<span class="number">9</span>][<span class="number">10</span>] = <span class="number">200</span>; e[<span class="number">10</span>][<span class="number">9</span>] = <span class="number">200</span>;</span><br><span class="line">e[<span class="number">10</span>][<span class="number">5</span>] = <span class="number">100</span>; e[<span class="number">5</span>][<span class="number">10</span>] = <span class="number">100</span>;</span><br><span class="line">e[<span class="number">10</span>][<span class="number">12</span>] = <span class="number">100</span>; e[<span class="number">12</span>][<span class="number">10</span>] = <span class="number">100</span>;</span><br><span class="line">e[<span class="number">10</span>][<span class="number">11</span>] = <span class="number">160</span>; e[<span class="number">11</span>][<span class="number">10</span>] = <span class="number">160</span>;</span><br><span class="line">e[<span class="number">11</span>][<span class="number">12</span>] = <span class="number">150</span>; e[<span class="number">12</span>][<span class="number">11</span>] = <span class="number">150</span>;</span><br><span class="line">e[<span class="number">11</span>][<span class="number">13</span>] = <span class="number">250</span>; e[<span class="number">13</span>][<span class="number">11</span>] = <span class="number">250</span>;</span><br><span class="line">e[<span class="number">12</span>][<span class="number">13</span>] = <span class="number">170</span>; e[<span class="number">13</span>][<span class="number">12</span>] = <span class="number">170</span>;</span><br><span class="line">e[<span class="number">8</span>][<span class="number">13</span>] = <span class="number">300</span>; e[<span class="number">13</span>][<span class="number">8</span>] = <span class="number">300</span>;</span><br><span class="line">e[<span class="number">8</span>][<span class="number">11</span>] = <span class="number">190</span>; e[<span class="number">11</span>][<span class="number">8</span>] = <span class="number">190</span>;</span><br><span class="line">e[<span class="number">12</span>][<span class="number">14</span>] = <span class="number">400</span>; e[<span class="number">14</span>][<span class="number">12</span>] = <span class="number">400</span>;</span><br><span class="line">e[<span class="number">13</span>][<span class="number">15</span>] = <span class="number">500</span>; e[<span class="number">15</span>][<span class="number">13</span>] = <span class="number">500</span>;</span><br><span class="line">e[<span class="number">14</span>][<span class="number">15</span>] = <span class="number">1000</span>; e[<span class="number">15</span>][<span class="number">14</span>] = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (couple[a] &gt; couple[b]) &#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">t = couple[a];</span><br><span class="line">couple[a] = couple[b];</span><br><span class="line">couple[b] = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">15</span>; i++)</span><br><span class="line">dis[i] = e[couple[a]][i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">15</span>; i++)</span><br><span class="line">book[i] = <span class="number">0</span>;</span><br><span class="line">book[couple[a]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">14</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">min = infinity;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">15</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (book[j] == <span class="number">0</span> &amp;&amp; dis[j] &lt; min) &#123;</span><br><span class="line">min = dis[j];</span><br><span class="line">u = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">book[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (v = <span class="number">1</span>; v &lt;= <span class="number">15</span>; v++) &#123;</span><br><span class="line"><span class="keyword">if</span> (e[u][v] &lt; infinity) &#123;</span><br><span class="line"><span class="keyword">if</span> (dis[v] &gt; dis[u] + e[u][v])</span><br><span class="line">dis[v] = dis[u] + e[u][v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"以图片的实例为标准，以泰园餐厅为起点"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达6号楼的最短路径为"</span> &lt;&lt; dis[i+<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达5号楼的最短路径为"</span> &lt;&lt; dis[i+<span class="number">2</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达体育馆的最短路径为"</span> &lt;&lt; dis[i+<span class="number">3</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达田径场的最短路径为"</span> &lt;&lt; dis[i+<span class="number">4</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达馨园餐厅的最短路径为"</span> &lt;&lt; dis[i+<span class="number">5</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达荟园餐厅的最短路径为"</span> &lt;&lt; dis[i+<span class="number">6</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达法学院的最短路径为"</span> &lt;&lt; dis[i+<span class="number">7</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达雀园餐厅的最短路径为"</span> &lt;&lt; dis[i+<span class="number">8</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达电子楼的最短路径为"</span> &lt;&lt; dis[i+<span class="number">9</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达图书馆的最短路径为"</span> &lt;&lt; dis[i+<span class="number">10</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达网络楼的最短路径为"</span> &lt;&lt; dis[i+<span class="number">11</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达数学院的最短路径为"</span> &lt;&lt; dis[i+<span class="number">12</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达教师公寓的最短路径为"</span> &lt;&lt; dis[i+<span class="number">13</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达机电院的最短路径为"</span> &lt;&lt; dis[i+<span class="number">14</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> a = <span class="string">"泰园餐厅"</span>;</span><br><span class="line"><span class="built_in">string</span> b = <span class="string">"机电院"</span>;</span><br><span class="line">map_init();</span><br><span class="line">create_matrix();</span><br><span class="line">input_matrix(a,b);</span><br><span class="line">dijkstra();</span><br><span class="line">print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://s2.ax1x.com/2019/12/02/QuQ7Ix.png" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 迪杰斯特拉 </tag>
            
            <tag> 最短路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷p1605迷宫</title>
      <link href="/2019/11/21/%E6%B4%9B%E8%B0%B7p1605%E8%BF%B7%E5%AE%AB/"/>
      <url>/2019/11/21/%E6%B4%9B%E8%B0%B7p1605%E8%BF%B7%E5%AE%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>题目地址：<a href="https://www.luogu.org/problem/P1605" target="_blank" rel="noopener">https://www.luogu.org/problem/P1605</a></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> migong[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> n,m, fx, fy, dx, dy;</span><br><span class="line"><span class="keyword">int</span> total;</span><br><span class="line"><span class="keyword">int</span> barraier;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> dir[][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125; &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y,<span class="keyword">int</span> step)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dx == x &amp;&amp; dy == y) &#123;</span><br><span class="line">total++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> nx = x + dir[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> ny = y + dir[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (vis[nx][ny] == <span class="number">0</span> &amp;&amp; nx &gt;= <span class="number">1</span> &amp;&amp; ny &gt;= <span class="number">1</span> &amp;&amp; x &lt;= n &amp;&amp; y &lt;= m) &#123;</span><br><span class="line">vis[nx][ny] = <span class="number">1</span>;</span><br><span class="line">dfs(nx, ny, step + <span class="number">1</span>);</span><br><span class="line">vis[nx][ny] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; barraier;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; fx &gt;&gt; fy &gt;&gt; dx &gt;&gt; dy;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= barraier; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> tx, ty;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; tx &gt;&gt; ty;</span><br><span class="line">vis[tx][ty] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">vis[fx][fy] = <span class="number">1</span>;不要忘了给初始值打标记</span><br><span class="line">dfs(fx, fy,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 深度优先搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1101单词方阵</title>
      <link href="/2019/11/21/%E6%B4%9B%E8%B0%B7P1101%E5%8D%95%E8%AF%8D%E6%96%B9%E9%98%B5/"/>
      <url>/2019/11/21/%E6%B4%9B%E8%B0%B7P1101%E5%8D%95%E8%AF%8D%E6%96%B9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> dir[][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125; ,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125; ,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125; ,&#123;<span class="number">-1</span>,<span class="number">1</span>&#125; &#125;;<span class="comment">//八个方向</span></span><br><span class="line"><span class="keyword">char</span> fz[maxn][maxn];<span class="comment">//存储字母的矩阵</span></span><br><span class="line"><span class="keyword">int</span> vis[maxn][maxn];<span class="comment">//遍历矩阵表示是否被访问过</span></span><br><span class="line"><span class="keyword">char</span> stand[] = <span class="string">"yizhong"</span>;<span class="comment">//标准单词</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;c[maxn];<span class="comment">//用来记录路径</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> k,<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cur == <span class="number">7</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">vis[c[i].x][c[i].y] = <span class="number">1</span>;<span class="comment">//表示被访问过</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> dx = x + dir[k][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> dy = y + dir[k][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (cur == <span class="number">6</span> || fz[dx][dy] == stand[cur + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">c[cur].x = x; c[cur].y = y;<span class="comment">//记录路径</span></span><br><span class="line">dfs(dx, dy, k, cur + <span class="number">1</span>);<span class="comment">//递归</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; fz[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; n;j++)</span><br><span class="line"><span class="keyword">if</span>(fz[i][j] == <span class="string">'y'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">8</span>; k++) &#123;<span class="comment">//定好方向</span></span><br><span class="line"><span class="keyword">int</span> dx = i + dir[k][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> dy = j + dir[k][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (fz[dx][dy] == <span class="string">'i'</span>)</span><br><span class="line">dfs(i, j, k, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line"><span class="keyword">if</span> (!vis[i][j]) <span class="built_in">cout</span> &lt;&lt; <span class="string">"*"</span>;<span class="comment">//没被标记过就输出*；</span></span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; fz[i][j];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 深度优先搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八皇后问题</title>
      <link href="/2019/11/21/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/"/>
      <url>/2019/11/21/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>深搜模板题目：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>];<span class="comment">//表示行</span></span><br><span class="line"><span class="keyword">int</span> b[<span class="number">100</span>];<span class="comment">//表示第几列被占领</span></span><br><span class="line"><span class="keyword">int</span> c[<span class="number">100</span>];<span class="comment">//表示左下到右上的对角线</span></span><br><span class="line"><span class="keyword">int</span> d[<span class="number">100</span>];<span class="comment">//表示左上到右下的对角线</span></span><br><span class="line"><span class="keyword">int</span> total, n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (total &lt;= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[i];</span><br><span class="line"><span class="keyword">if</span> (i != n)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">total++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">queen</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; n) &#123;</span><br><span class="line">print();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> ((!b[j]) &amp;&amp; (!c[i + j]) &amp;&amp; (!d[i - j + n]))<span class="comment">//如果没有皇后占领，则宣布占领</span></span><br><span class="line">&#123;</span><br><span class="line">a[i] = j;</span><br><span class="line">b[j] = <span class="number">1</span>;</span><br><span class="line">c[i + j] = <span class="number">1</span>;</span><br><span class="line">d[i - j + n] = <span class="number">1</span>;</span><br><span class="line">queen(i + <span class="number">1</span>);</span><br><span class="line">b[j] = <span class="number">0</span>;</span><br><span class="line">c[i + j] = <span class="number">0</span>;</span><br><span class="line">d[i - j + n] = <span class="number">0</span>;<span class="comment">//回溯清除标记</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">queen(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 深度优先搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速幂模板</title>
      <link href="/2019/11/20/%E5%BF%AB%E9%80%9F%E5%B9%82%E6%A8%A1%E6%9D%BF/"/>
      <url>/2019/11/20/%E5%BF%AB%E9%80%9F%E5%B9%82%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p> 适用于 b的 p次方 % k</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> b, a, p, k, ans = <span class="number">1</span>, c;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;b, &amp;p, &amp;k);</span><br><span class="line">a = b; c = p;</span><br><span class="line"><span class="keyword">while</span> (p &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p % <span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line">ans = ans * b%k;</span><br><span class="line">b = b * b % k;</span><br><span class="line">p = p &gt;&gt; <span class="number">1</span>;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld %lld mod %lld=%lld"</span>, a, c, k, ans%k);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 快速幂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java计算器</title>
      <link href="/2019/11/20/java%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
      <url>/2019/11/20/java%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="comment">//注意：运算符号并不显示</span></span><br></pre></td></tr></table></figure><p>先导入需要的包</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Container container = <span class="keyword">this</span>.getContentPane();</span><br><span class="line">    <span class="keyword">private</span> GridBagLayout gridBagLayout = <span class="keyword">new</span> GridBagLayout();</span><br><span class="line">    <span class="keyword">private</span> GridBagConstraints gridBagConstraints= <span class="keyword">new</span> GridBagConstraints();</span><br><span class="line">    <span class="keyword">private</span> JTextField displayField;</span><br><span class="line">    <span class="keyword">private</span> String lastCommand=<span class="string">"="</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> result=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> start=<span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Calculator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"super计算器"</span>);</span><br><span class="line">        container.setLayout(gridBagLayout);</span><br><span class="line">        initDisplayArea();</span><br><span class="line">        initButtons();</span><br><span class="line">        initFrame();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFrame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">600</span>, <span class="number">700</span>);</span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line">        setResizable(<span class="keyword">true</span>);</span><br><span class="line">        setForeground(Color.CYAN);</span><br><span class="line">        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initButtons</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ActionListener insert = <span class="keyword">new</span> Calculator.InsertAction();</span><br><span class="line">        ActionListener command = <span class="keyword">new</span> Calculator.CommandAction();</span><br><span class="line">        addButton(<span class="string">"Back"</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>,command);</span><br><span class="line">        <span class="comment">//addButton("π", 0, 1, 1, 1, insert);</span></span><br><span class="line">        addButton(<span class="string">"C"</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"7"</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"8"</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"9"</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"+"</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"4"</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"5"</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"6"</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"-"</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"1"</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"2"</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"3"</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"*"</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"0"</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"-"</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"."</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"/"</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"="</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">2</span>, command);</span><br><span class="line">        addButton(<span class="string">"sin °"</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"cos °"</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"tan °"</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"x^y"</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"%"</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"√"</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"n!"</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton2(<span class="string">"designed by superzhaoyang"</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">1</span>, command);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initDisplayArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        displayField = <span class="keyword">new</span> JTextField(<span class="number">20</span>);</span><br><span class="line">        displayField.setHorizontalAlignment(SwingConstants.RIGHT);</span><br><span class="line">        displayField.setBackground(Color.gray);</span><br><span class="line">        displayField.setDisabledTextColor(Color.BLACK);</span><br><span class="line">        displayField.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">        displayField.setFont(<span class="keyword">new</span> Font(<span class="string">"宋体"</span>, Font.BOLD ,<span class="number">50</span>));</span><br><span class="line">        gridBagConstraints.gridx = <span class="number">0</span>;</span><br><span class="line">        gridBagConstraints.gridy = <span class="number">0</span>;</span><br><span class="line">        gridBagConstraints.gridwidth = <span class="number">4</span>;</span><br><span class="line">        gridBagConstraints.gridheight = <span class="number">1</span>;</span><br><span class="line">        gridBagConstraints.fill = <span class="number">1</span>;</span><br><span class="line">        gridBagConstraints.weightx = <span class="number">1</span>;</span><br><span class="line">        gridBagConstraints.weighty = <span class="number">1</span>;</span><br><span class="line">        gridBagLayout.setConstraints(displayField, gridBagConstraints);</span><br><span class="line">        container.add(displayField);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addButton</span><span class="params">(String label, <span class="keyword">int</span> column, <span class="keyword">int</span> row, <span class="keyword">int</span> width, <span class="keyword">int</span> height, ActionListener listener)</span> </span>&#123;</span><br><span class="line">        JButton button = <span class="keyword">new</span> JButton(label);</span><br><span class="line">        button.setForeground(Color.black);</span><br><span class="line">        button.setBackground(Color.white);</span><br><span class="line">        button.setFont(<span class="keyword">new</span> Font(<span class="string">"楷体"</span>, Font.BOLD, <span class="number">36</span>));</span><br><span class="line">        <span class="keyword">if</span>(listener != <span class="keyword">null</span>)</span><br><span class="line">            button.addActionListener(listener);</span><br><span class="line"></span><br><span class="line">        gridBagConstraints.gridx = column;</span><br><span class="line">        gridBagConstraints.gridy = row;</span><br><span class="line">        gridBagConstraints.gridwidth = width;</span><br><span class="line">        gridBagConstraints.gridheight = height;</span><br><span class="line">        gridBagConstraints.fill = GridBagConstraints.BOTH;<span class="comment">//填充空间</span></span><br><span class="line">        gridBagConstraints.insets = <span class="keyword">new</span> Insets(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);<span class="comment">//彼此组件的距离</span></span><br><span class="line">        gridBagLayout.setConstraints(button, gridBagConstraints);</span><br><span class="line">        container.add(button);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addButton_</span><span class="params">(String label, <span class="keyword">int</span> column, <span class="keyword">int</span> row, <span class="keyword">int</span> width, <span class="keyword">int</span> height, ActionListener listener,ActionListener listener2)</span> </span>&#123;</span><br><span class="line">        JButton button = <span class="keyword">new</span> JButton(label);</span><br><span class="line">        button.setForeground(Color.black);</span><br><span class="line">        button.setBackground(Color.white);</span><br><span class="line">        button.setFont(<span class="keyword">new</span> Font(<span class="string">"楷体"</span>, Font.BOLD, <span class="number">36</span>));</span><br><span class="line">        button.addActionListener(listener);</span><br><span class="line">        button.addActionListener(listener2);</span><br><span class="line"></span><br><span class="line">        gridBagConstraints.gridx = column;</span><br><span class="line">        gridBagConstraints.gridy = row;</span><br><span class="line">        gridBagConstraints.gridwidth = width;</span><br><span class="line">        gridBagConstraints.gridheight = height;</span><br><span class="line">        gridBagConstraints.fill = GridBagConstraints.BOTH;<span class="comment">//填充空间</span></span><br><span class="line">        gridBagConstraints.insets = <span class="keyword">new</span> Insets(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);<span class="comment">//彼此组件的距离</span></span><br><span class="line">        gridBagLayout.setConstraints(button, gridBagConstraints);</span><br><span class="line">        container.add(button);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addButton2</span><span class="params">(String label, <span class="keyword">int</span> column, <span class="keyword">int</span> row, <span class="keyword">int</span> width, <span class="keyword">int</span> height, ActionListener listener)</span> </span>&#123;</span><br><span class="line">        JButton button = <span class="keyword">new</span> JButton(label);</span><br><span class="line">            button.setForeground(Color.orange);</span><br><span class="line">        button.setBackground(Color.CYAN);</span><br><span class="line">        button.setFont(<span class="keyword">new</span> Font(<span class="string">"楷体"</span>, Font.BOLD, <span class="number">36</span>));</span><br><span class="line">        <span class="keyword">if</span>(listener != <span class="keyword">null</span>)</span><br><span class="line">            button.addActionListener(listener);</span><br><span class="line"></span><br><span class="line">        gridBagConstraints.gridx = column;</span><br><span class="line">        gridBagConstraints.gridy = row;</span><br><span class="line">        gridBagConstraints.gridwidth = width;</span><br><span class="line">        gridBagConstraints.gridheight = height;</span><br><span class="line">        gridBagConstraints.fill = GridBagConstraints.BOTH;<span class="comment">//填充空间</span></span><br><span class="line">        gridBagConstraints.insets = <span class="keyword">new</span> Insets(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);<span class="comment">//彼此组件的距离</span></span><br><span class="line">        gridBagLayout.setConstraints(button, gridBagConstraints);</span><br><span class="line">        container.add(button);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.lastCommand.equals(<span class="string">"+"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.result += x;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.lastCommand.equals(<span class="string">"-"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.result -= x;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.lastCommand.equals(<span class="string">"*"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.result *= x;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.lastCommand.equals(<span class="string">"/"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.result /= x;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.lastCommand.equals(<span class="string">"="</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.result = x;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.lastCommand.equals(<span class="string">"%"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.result = <span class="keyword">this</span>.result % x;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.lastCommand.equals(<span class="string">"√"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.result = Math.sqrt(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.lastCommand.equals(<span class="string">"sin °"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.result = Math.sin(x*Math.PI / <span class="number">180</span>) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.lastCommand.equals(<span class="string">"cos °"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.result = Math.cos(x*Math.PI / <span class="number">180</span>) ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.lastCommand.equals(<span class="string">"x^y"</span>)) &#123;</span><br><span class="line">            <span class="keyword">double</span> t = <span class="keyword">this</span>.result;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; x;i++)</span><br><span class="line">                <span class="keyword">this</span>.result *= t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.lastCommand.equals(<span class="string">"tan °"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.result = Math.tan(x*Math.PI / <span class="number">180</span>) ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.lastCommand.equals(<span class="string">"n!"</span>)) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = (<span class="keyword">int</span>)x;i &gt;= <span class="number">1</span>;i--)</span><br><span class="line">                temp = temp * i ;</span><br><span class="line">            <span class="keyword">this</span>.result = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.displayField.setText(<span class="string">""</span> + <span class="keyword">this</span>.result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Calculator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandAction</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">CommandAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent evt)</span> </span>&#123;</span><br><span class="line">            String command = evt.getActionCommand();</span><br><span class="line">            <span class="keyword">if</span> (Calculator.<span class="keyword">this</span>.start) &#123;</span><br><span class="line">                Calculator.<span class="keyword">this</span>.lastCommand = command;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Calculator.<span class="keyword">this</span>.calculate(Double.parseDouble(Calculator.<span class="keyword">this</span>.displayField.getText()));</span><br><span class="line">                Calculator.<span class="keyword">this</span>.lastCommand = command;</span><br><span class="line">                Calculator.<span class="keyword">this</span>.start = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertAction</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">InsertAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent event)</span> </span>&#123;</span><br><span class="line">            String input = event.getActionCommand();</span><br><span class="line">            <span class="keyword">if</span> (Calculator.<span class="keyword">this</span>.start) &#123;</span><br><span class="line">                Calculator.<span class="keyword">this</span>.displayField.setText(<span class="string">""</span>);</span><br><span class="line">                Calculator.<span class="keyword">this</span>.start = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (input.equals(<span class="string">"-"</span>)) &#123;</span><br><span class="line">                    Calculator.<span class="keyword">this</span>.displayField.setText(Calculator.<span class="keyword">this</span>.displayField.getText() + <span class="string">"-"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!input.equals(<span class="string">"-"</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (input.equals(<span class="string">"Back"</span>)) &#123;</span><br><span class="line">                    String str = Calculator.<span class="keyword">this</span>.displayField.getText();</span><br><span class="line">                    <span class="keyword">if</span> (str.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        Calculator.<span class="keyword">this</span>.displayField.setText(str.substring(<span class="number">0</span>, str.length() - <span class="number">1</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input.equals(<span class="string">"C"</span>)) &#123;</span><br><span class="line">                    Calculator.<span class="keyword">this</span>.displayField.setText(<span class="string">"0"</span>);</span><br><span class="line">                    result=<span class="number">0.0</span>d;</span><br><span class="line">                    Calculator.<span class="keyword">this</span>.start = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (input.equals(<span class="string">"."</span>)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (Calculator.<span class="keyword">this</span>.displayField.getText().trim().indexOf(<span class="string">"."</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">                            Calculator.<span class="keyword">this</span>.displayField.setText(Calculator.<span class="keyword">this</span>.displayField.getText() + input);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        Calculator.<span class="keyword">this</span>.displayField.setText(Calculator.<span class="keyword">this</span>.displayField.getText() + input);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行界面如下：</p><p><img alt data-src="https://s2.ax1x.com/2019/11/20/MfkCH1.png" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 计算器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实验六之二叉树的孩子链表发和双亲链表法</title>
      <link href="/2019/11/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E5%85%AD%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AD%A9%E5%AD%90%E9%93%BE%E8%A1%A8%E5%8F%91%E5%92%8C%E5%8F%8C%E4%BA%B2%E9%93%BE%E8%A1%A8%E6%B3%95/"/>
      <url>/2019/11/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E5%85%AD%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AD%A9%E5%AD%90%E9%93%BE%E8%A1%A8%E5%8F%91%E5%92%8C%E5%8F%8C%E4%BA%B2%E9%93%BE%E8%A1%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_TREE_SIZE 100</span></span><br></pre></td></tr></table></figure><p>下面是二叉树的双亲表示法</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PTNode</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> data;</span><br><span class="line"><span class="keyword">int</span> parent;</span><br><span class="line">&#125;PTNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">PTNode nodes[MAX_TREE_SIZE];</span><br><span class="line"><span class="keyword">int</span> r, n;</span><br><span class="line">&#125;PTree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Create_Parentree</span><span class="params">(PTree &amp;p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> data;</span><br><span class="line"><span class="keyword">int</span> parent;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p.n; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入节点"</span>&lt;&lt;i &lt;&lt;<span class="string">"的值及其父节点"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; data &gt;&gt; parent;</span><br><span class="line">p.nodes[i].data = data;</span><br><span class="line">p.nodes[i].parent = parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入结束"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traversal_Parentree</span><span class="params">(PTree &amp;p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p.n; i++) &#123;</span><br><span class="line"><span class="comment">//if(p.nodes[i+1].parent == i)</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; p.nodes[i].data &lt;&lt; " ";</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"节点"</span> &lt;&lt; p.nodes[i].data &lt;&lt; <span class="string">"的子节点为："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> flag2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i; ;j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (j == p.n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (p.nodes[j + <span class="number">1</span>].parent == i) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p.nodes[j + <span class="number">1</span>].data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">flag2 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(p.nodes[j + <span class="number">1</span>].parent != i &amp;&amp; flag == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!flag2) <span class="built_in">cout</span> &lt;&lt; <span class="string">"无"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是二叉树的孩子表示法：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span> &#123;</span><span class="comment">//孩子节点</span></span><br><span class="line"><span class="keyword">int</span> child;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;*ChildPtr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> data;</span><br><span class="line">ChildPtr firstchild;<span class="comment">//孩子链表头指针</span></span><br><span class="line">&#125;CTBox;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">CTBox nodes[MAX_TREE_SIZE];</span><br><span class="line"><span class="keyword">int</span> n, r;<span class="comment">//节点数和根的位置</span></span><br><span class="line">&#125;CTree;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Create_Childtree</span><span class="params">(CTree &amp;p)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ChildPtr c =(ChildPtr)malloc (sizeof(CTNode));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p.n; i++) &#123;</span><br><span class="line">p.nodes[i].firstchild = (ChildPtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CTNode));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入节点"</span> &lt;&lt; i &lt;&lt; <span class="string">"的值"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; data;</span><br><span class="line">p.nodes[i].data = data;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入值来判定头节点"</span>&lt;&lt;i&lt;&lt;<span class="string">"的next是否为空"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line"><span class="keyword">if</span> (temp == <span class="number">-1</span>) &#123;</span><br><span class="line">p.nodes[i].firstchild = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入第一个孩子节点的值"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p.nodes[i].firstchild-&gt;child;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入第一个孩子节点next的值以判断是否为空"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line"></span><br><span class="line">ChildPtr c2 = (ChildPtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CTNode));</span><br><span class="line"><span class="keyword">if</span> (temp == <span class="number">-1</span>) &#123;</span><br><span class="line">c2 = <span class="literal">NULL</span>;</span><br><span class="line">p.nodes[i].firstchild-&gt;next = c2;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//ChildPtr c3 = (ChildPtr)malloc(sizeof(CTNode));</span></span><br><span class="line">p.nodes[i].firstchild-&gt;next = c2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入第二个孩子节点的值"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; c2-&gt;child;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入第二个孩子节点next的值"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line"><span class="keyword">if</span> (temp == <span class="number">-1</span>) &#123;</span><br><span class="line">c2-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">ChildPtr cctemp;</span><br><span class="line"><span class="keyword">while</span> (temp != <span class="number">-1</span>) &#123;</span><br><span class="line">ChildPtr cc;</span><br><span class="line">cc = (ChildPtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CTNode));</span><br><span class="line">c2-&gt;next = cc;</span><br><span class="line">cctemp = cc;</span><br><span class="line">c2 = cc;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入节点值"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; cc-&gt;child;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入节点的next的值"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">&#125;</span><br><span class="line">cctemp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tranversal_Childrentree</span><span class="params">(CTree &amp;p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p.n; i++) &#123;</span><br><span class="line">ChildPtr t = (ChildPtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CTNode));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"节点"</span> &lt;&lt; p.nodes[i].data &lt;&lt; <span class="string">"的子树位置为:"</span>;</span><br><span class="line"><span class="keyword">if</span> (p.nodes[i].firstchild == <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"无子树"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p.nodes[i].firstchild-&gt;child &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">t = p.nodes[i].firstchild-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (t != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t-&gt;child &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">t = t-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main函数：</p><p>(我将双亲表示法做了注释)</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//树的双亲表存储表示</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">PTree P;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入根节点的位置："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; P.r;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入节点数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; P.n;</span><br><span class="line">Create_Parentree(P);</span><br><span class="line">Traversal_Parentree(P);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">//树的孩子节点表示</span></span><br><span class="line">CTree P2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入根节点的位置："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; P2.r;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入节点数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; P2.n;</span><br><span class="line">Create_Childtree(P2);</span><br><span class="line">Tranversal_Childrentree(P2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双亲表示法运行结果如下：</p><p><img alt data-src="https://s2.ax1x.com/2019/11/18/M6QbcD.png" class="lazyload"></p><p>孩子表示法的输入过程如下：</p><p><img alt data-src="https://s2.ax1x.com/2019/11/18/M6QzNt.png" class="lazyload"></p><p>运行结果如下：</p><p><img alt data-src="https://s2.ax1x.com/2019/11/18/M6lABj.png" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实验五之二叉树相关操作</title>
      <link href="/2019/11/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E4%BA%94%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/11/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E4%BA%94%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="今天复习，突然发现漏了个函数没有写进来，顺便加了个层序遍历。"><a href="#今天复习，突然发现漏了个函数没有写进来，顺便加了个层序遍历。" class="headerlink" title="今天复习，突然发现漏了个函数没有写进来，顺便加了个层序遍历。"></a>今天复习，突然发现漏了个函数没有写进来，顺便加了个层序遍历。</h3><p>OK,我们先把头文件拽过来</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 1024</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> TElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> SeqTree[MAX_SIZE];<span class="comment">//顺序二叉树的定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiNode</span> &#123;</span><span class="comment">//链式二叉树的定义</span></span><br><span class="line">TElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiNode</span>* <span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">&#125;*Bitree, BiTnode;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACK_INIT_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACKINCREASEMENT 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span><span class="comment">//栈的定义</span></span><br><span class="line">Bitree* base;</span><br><span class="line">Bitree* top;</span><br><span class="line"><span class="keyword">int</span> stacksize;</span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure><p>接下来是函数体，有点长的亚子。</p><p><img alt data-src="https://s2.ax1x.com/2019/09/09/ntEkxs.jpg" class="lazyload"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatSeqTree</span><span class="params">(SeqTree tree, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'N'</span>) &#123;</span><br><span class="line"><span class="comment">//tree[i] = '\0';</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">tree[i] = ch;</span><br><span class="line"></span><br><span class="line">CreatSeqTree(tree, <span class="number">2</span> * i);</span><br><span class="line">CreatSeqTree(tree, <span class="number">2</span> * i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitSeqTree</span><span class="params">(SeqTree &amp;tree)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(tree, <span class="number">0</span>, MAX_SIZE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">SqStack <span class="title">InitStack</span><span class="params">(SqStack&amp; S)</span> </span>&#123;</span><br><span class="line">S.base = (Bitree*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Bitree) * STACK_INIT_SIZE);</span><br><span class="line">S.top = S.base;</span><br><span class="line">S.stacksize = STACK_INIT_SIZE;</span><br><span class="line"><span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Bitree <span class="title">GetTop</span><span class="params">(SqStack S, Bitree &amp;e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top == S.base) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"遍历结束"</span>;</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">&#125;</span><br><span class="line">e = *(S.top - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(SqStack&amp; S, Bitree &amp;e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top - S.base &gt;= S.stacksize) &#123;</span><br><span class="line">S.base = (Bitree*)<span class="built_in">realloc</span>(S.base, (S.stacksize + STACKINCREASEMENT) * <span class="keyword">sizeof</span>(Bitree));</span><br><span class="line">S.top = S.base + S.stacksize;</span><br><span class="line">S.stacksize += STACKINCREASEMENT;</span><br><span class="line">&#125;</span><br><span class="line">*S.top++ = e;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Bitree <span class="title">Pop</span><span class="params">(SqStack &amp;S, Bitree &amp;e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top == S.base) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">e = *--S.top;</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBitree</span><span class="params">(Bitree &amp;T)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'N'</span>) T = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!(T = (BiNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiNode)))) <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">T-&gt;data = c;</span><br><span class="line">CreateBitree(T-&gt;lchild);</span><br><span class="line">CreateBitree(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PreOrder_print</span><span class="params">(Bitree T)</span> </span>&#123;</span><br><span class="line"><span class="comment">//前序遍历输出</span></span><br><span class="line"><span class="keyword">if</span> (T) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; T-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">if</span> (PreOrder_print(T-&gt;lchild))</span><br><span class="line"><span class="keyword">if</span> (PreOrder_print(T-&gt;rchild))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder_print</span><span class="params">(Bitree T, SqStack S)</span> </span>&#123;<span class="comment">//算法1</span></span><br><span class="line">Bitree P = T;</span><br><span class="line">Push(S, P);</span><br><span class="line"><span class="keyword">while</span> (!(S.top - S.base == <span class="number">0</span>)) &#123;</span><br><span class="line"><span class="keyword">while</span> (GetTop(S, P) &amp;&amp; P) Push(S, P-&gt;lchild);</span><br><span class="line">Pop(S, P);</span><br><span class="line"><span class="keyword">if</span> (!(S.top - S.base == <span class="number">0</span>)) &#123;</span><br><span class="line">Pop(S, P);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; P-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">Push(S, P-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelorderTraversal</span><span class="params">(Bitree BT)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BT == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">Bitree <span class="built_in">queue</span>[<span class="number">100</span>];</span><br><span class="line">Bitree q;</span><br><span class="line"><span class="keyword">int</span> tail = <span class="number">0</span>, head = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (BT) &#123;</span><br><span class="line"><span class="built_in">queue</span>[tail++] = BT;</span><br><span class="line"><span class="keyword">while</span> (head != tail) &#123;</span><br><span class="line">q = <span class="built_in">queue</span>[head++];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>, q-&gt;data);</span><br><span class="line"><span class="keyword">if</span> (q-&gt;lchild) <span class="built_in">queue</span>[tail++] = q-&gt;lchild;</span><br><span class="line"><span class="keyword">if</span> (q-&gt;rchild) <span class="built_in">queue</span>[tail++] = q-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder_print2</span><span class="params">(Bitree T, SqStack S)</span> </span>&#123;<span class="comment">//算法2</span></span><br><span class="line">Bitree P = T;</span><br><span class="line"><span class="keyword">while</span> (P || !(S.top - S.base == <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (P) &#123; Push(S, P); P = P-&gt;lchild; &#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Pop(S, P);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; P-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">P = P-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTravel</span><span class="params">(Bitree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//常规中续遍历</span></span><br><span class="line"><span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">InOrderTravel(T-&gt;lchild);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>, T-&gt;data);</span><br><span class="line">InOrderTravel(T-&gt;rchild);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TailOrderTravel</span><span class="params">(Bitree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//常规后续遍历</span></span><br><span class="line"><span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">TailOrderTravel(T-&gt;lchild);</span><br><span class="line">TailOrderTravel(T-&gt;rchild);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>, T-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(<span class="keyword">char</span> *BT, <span class="keyword">int</span> i)</span> <span class="comment">//先序遍历(递归法)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BT[i] != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>, BT[i]);</span><br><span class="line">preOrder(BT, <span class="number">2</span> * i);</span><br><span class="line">preOrder(BT, <span class="number">2</span> * i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，主函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Bitree T, T4, T5,T6;</span><br><span class="line">SqStack S;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-------层序遍历二叉树-------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"先序输入二叉树（空用N表示）"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">CreateBitree(T6);</span><br><span class="line">LevelorderTraversal(T6);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-------前序遍历二叉树-------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"先序输入二叉树（空用N表示）"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">CreateBitree(T);</span><br><span class="line">PreOrder_print(T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-------中序遍历二叉树-------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"先序输入二叉树（空用N表示）"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">CreateBitree(T4);</span><br><span class="line">InOrderTravel(T4);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-------后序遍历二叉树-------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"先序输入二叉树（空用N表示）"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">CreateBitree(T5);</span><br><span class="line">TailOrderTravel(T5);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Bitree T2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-------栈的方式(算法1）中序遍历二叉树-------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"先序输入二叉树（空用N表示）"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">CreateBitree(T2);</span><br><span class="line">InitStack(S);</span><br><span class="line">InOrder_print(T2, S);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-------栈的方式(算法2）中序遍历二叉树-------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"先序输入二叉树（空用N表示）"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Bitree T3;</span><br><span class="line">SqStack S3;</span><br><span class="line">InitStack(S3);</span><br><span class="line">CreateBitree(T3);</span><br><span class="line">InOrder_print2(T3, S3);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"----------------------------以下是顺序二叉树--------------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">SeqTree tree ;</span><br><span class="line">InitSeqTree(tree);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请先序输入二叉树：\n"</span>);</span><br><span class="line">CreatSeqTree(tree, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"先序遍历结果为："</span>;</span><br><span class="line">preOrder(tree, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img alt data-src="https://s2.ax1x.com/2019/12/11/Qs7OuF.png" class="lazyload"></p><p><img alt data-src="https://s2.ax1x.com/2019/12/11/Qs7bcT.png" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归并排序</title>
      <link href="/2019/10/21/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/10/21/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>前几天遇到了一道题，快排过不去，一定要用mergesort，特来学习一下。</p><p>该算法时间复杂度为O(NlogN).</p><h4 id="当数据量很大的时候-nlogn的优势将会比n-2越来越大，当n-10-5的时候，nlogn的算法要比n-2的算法快6000倍，那么6000倍是什么概念呢，就是如果我们要处理一个数据集，用nlogn的算法要处理一天的话，用n-2的算法将要处理6020天。这就基本相当于是15年。一个优化改进的算法可能比一个比一个笨的算法速度快了许多，这就是为什么我们要学习算法的原因。"><a href="#当数据量很大的时候-nlogn的优势将会比n-2越来越大，当n-10-5的时候，nlogn的算法要比n-2的算法快6000倍，那么6000倍是什么概念呢，就是如果我们要处理一个数据集，用nlogn的算法要处理一天的话，用n-2的算法将要处理6020天。这就基本相当于是15年。一个优化改进的算法可能比一个比一个笨的算法速度快了许多，这就是为什么我们要学习算法的原因。" class="headerlink" title="当数据量很大的时候 nlogn的优势将会比n^2越来越大，当n=10^5的时候，nlogn的算法要比n^2的算法快6000倍，那么6000倍是什么概念呢，就是如果我们要处理一个数据集，用nlogn的算法要处理一天的话，用n^2的算法将要处理6020天。这就基本相当于是15年。一个优化改进的算法可能比一个比一个笨的算法速度快了许多，这就是为什么我们要学习算法的原因。"></a>当数据量很大的时候 nlogn的优势将会比n^2越来越大，当n=10^5的时候，nlogn的算法要比n^2的算法快6000倍，那么6000倍是什么概念呢，就是如果我们要处理一个数据集，用nlogn的算法要处理一天的话，用n^2的算法将要处理6020天。这就基本相当于是15年。一个优化改进的算法可能比一个比一个笨的算法速度快了许多，这就是为什么我们要学习算法的原因。</h4><p><img alt data-src="https://s2.ax1x.com/2019/10/21/KlBQPg.png" class="lazyload"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> mid)</span> <span class="comment">//并的思想</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *aux = <span class="keyword">new</span> <span class="keyword">int</span>[r - l + <span class="number">1</span>], i, j, k;</span><br><span class="line"><span class="keyword">for</span> (k = l; k &lt;= r; k++)</span><br><span class="line">aux[k - l] = a[k];</span><br><span class="line">i = l;</span><br><span class="line">j = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (k = l; k &lt;= r; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; mid)</span><br><span class="line">&#123;</span><br><span class="line">a[k] = aux[j - l];</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (j &gt; r)</span><br><span class="line">&#123;</span><br><span class="line">a[k] = aux[i - l];</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (aux[i - l] &gt; aux[j - l])</span><br><span class="line">&#123;</span><br><span class="line">a[k] = aux[j - l];</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">a[k] = aux[i - l];</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span><span class="comment">//归的思想</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l &gt;= r)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">merge_sort(a, l, mid);</span><br><span class="line">merge_sort(a, mid + <span class="number">1</span>, r);</span><br><span class="line">merge(a, l, r, mid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergesort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span><span class="comment">//再写个函数，方标调用</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">merge_sort(a, l, r - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>], n, i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">mergesort(a, <span class="number">0</span>, n);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下附运行结果：</p><p><img alt data-src="https://s2.ax1x.com/2019/10/21/KlBKIS.png" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 排序 </tag>
            
            <tag> 归并排序 </tag>
            
            <tag> 性能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实验四之矩s十字链表存储系数矩阵及其转置</title>
      <link href="/2019/10/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E5%9B%9B%E4%B9%8B%E5%8D%81%E5%AD%97%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E5%8F%8A%E5%85%B6%E8%BD%AC%E7%BD%AE/"/>
      <url>/2019/10/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E5%9B%9B%E4%B9%8B%E5%8D%81%E5%AD%97%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E5%8F%8A%E5%85%B6%E8%BD%AC%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="如题，"><a href="#如题，" class="headerlink" title="如题，"></a>如题，</h3><h3 id="数据结构实验四之矩s十字链表存储系数矩阵及其转置。"><a href="#数据结构实验四之矩s十字链表存储系数矩阵及其转置。" class="headerlink" title="数据结构实验四之矩s十字链表存储系数矩阵及其转置。"></a>数据结构实验四之矩s十字链表存储系数矩阵及其转置。</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">101</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">OLNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> i, j, e; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">OLNode</span> *<span class="title">right</span>, *<span class="title">down</span>;</span> </span><br><span class="line">&#125;OLNode, *OLink;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">OLink *rhead, *chead;</span><br><span class="line"><span class="keyword">int</span> mu, nu, tu;  </span><br><span class="line">&#125;CrossList;</span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn];<span class="comment">//利用十字链表存储非零元，后将非零元存至二维数组中。</span></span><br><span class="line"><span class="keyword">int</span> b[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">CrossList <span class="title">CreateMatrix_OL</span><span class="params">(CrossList &amp;M)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">int</span> i, j, e;</span><br><span class="line">OLNode *p, *q;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入矩阵的行数、列数和非0元素个数："</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;m, &amp;n, &amp;t);</span><br><span class="line">M.mu = m;</span><br><span class="line">M.nu = n;</span><br><span class="line">M.tu = t;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请依次输入%d行三个一组（分别表示非零元的行，列，数值）的数据,最终以0 0 0结束\n"</span>,t);</span><br><span class="line"><span class="keyword">if</span> (!(M.rhead = (OLink*)<span class="built_in">malloc</span>((m + <span class="number">1</span>) * <span class="keyword">sizeof</span>(OLink))) || !(M.chead = (OLink*)<span class="built_in">malloc</span>((n + <span class="number">1</span>) * <span class="keyword">sizeof</span>(OLink))))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"矩阵初始化失败"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line">M.rhead[i] = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line">M.chead[j] = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;i, &amp;j, &amp;e); <span class="number">0</span> != i; <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;i, &amp;j, &amp;e)) &#123;</span><br><span class="line"><span class="keyword">if</span> (!(p = (OLNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OLNode))))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"初始化三元组失败"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">p-&gt;i = i;</span><br><span class="line">p-&gt;j = j;</span><br><span class="line">p-&gt;e = e;</span><br><span class="line">a[i][j] = e;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == M.rhead[i] || M.rhead[i]-&gt;j &gt; j)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;right = M.rhead[i];</span><br><span class="line">M.rhead[i] = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (q = M.rhead[i]; (q-&gt;right) &amp;&amp; q-&gt;right-&gt;j &lt; j; q = q-&gt;right);</span><br><span class="line">p-&gt;right = q-&gt;right;</span><br><span class="line">q-&gt;right = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == M.chead[j] || M.chead[j]-&gt;i &gt; i)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;down = M.chead[j];</span><br><span class="line">M.chead[j] = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (q = M.chead[j]; (q-&gt;down) &amp;&amp; q-&gt;down-&gt;i &lt; i; q = q-&gt;down);</span><br><span class="line">p-&gt;down = q-&gt;down;</span><br><span class="line">q-&gt;down = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> M;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[i][j] &lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="keyword">if</span> (j == n) <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TransposeSMatrix</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> col, row;</span><br><span class="line"><span class="keyword">for</span> (col = <span class="number">1</span>; col &lt;= n; col++)</span><br><span class="line"><span class="keyword">for</span> (row = <span class="number">1</span>; row &lt;= m; row++)</span><br><span class="line">b[col][row] = a[row][col];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display_Transpose</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"转置后的矩阵M："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= m;j++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">if</span> (j == m) <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CrossList M;</span><br><span class="line">M.rhead = <span class="literal">NULL</span>;</span><br><span class="line">M.chead = <span class="literal">NULL</span>;</span><br><span class="line">M = CreateMatrix_OL(M);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输出矩阵M:\n"</span>);</span><br><span class="line">display();</span><br><span class="line">TransposeSMatrix();</span><br><span class="line">display_Transpose();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img alt data-src="https://s2.ax1x.com/2019/10/19/KmbVgK.png" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 十字链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实验三之矩阵的压缩和解压</title>
      <link href="/2019/10/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E4%B8%89%E4%B9%8B%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B/"/>
      <url>/2019/10/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E4%B8%89%E4%B9%8B%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="数据结构实验三之矩阵压缩和释放，应用多种方法。"><a href="#数据结构实验三之矩阵压缩和释放，应用多种方法。" class="headerlink" title="数据结构实验三之矩阵压缩和释放，应用多种方法。"></a>数据结构实验三之矩阵压缩和释放，应用多种方法。</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">200</span>][<span class="number">200</span>];</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">200</span>][<span class="number">200</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200</span> * <span class="number">201</span> / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> b[maxn];</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">two_circle_compression</span><span class="params">()</span> </span>&#123;<span class="comment">/*二重循环压缩矩阵*/</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"二重循环压缩后的结果"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= j) &#123;</span><br><span class="line">b[i * (i - <span class="number">1</span>) / <span class="number">2</span> + j - <span class="number">1</span>] = a[i][j];</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">b[j * (j - <span class="number">1</span>) / <span class="number">2</span> + i - <span class="number">1</span>] = a[i][j];</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">one_circle_compression</span><span class="params">()</span> </span>&#123;<span class="comment">/*一重循环压缩矩阵*/</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"一重循环压缩后的结果"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; i &lt;= n; )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= j) &#123;</span><br><span class="line">b[i * (i - <span class="number">1</span>) / <span class="number">2</span> + j - <span class="number">1</span>] = a[i][j];</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">b[j * (j - <span class="number">1</span>) / <span class="number">2</span> + i - <span class="number">1</span>] = a[i][j];</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">j = <span class="number">1</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">release1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"一重循环解压的结果"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; k; x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (; i &lt;= n; )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (x == i * (i - <span class="number">1</span>) / <span class="number">2</span> + j - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i == j) c[i][j] = b[x];</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">c[i][j] = b[x];</span><br><span class="line">c[j][i] = b[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">i++;</span><br><span class="line">j = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> j++;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">release2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"二重循环解压的结果"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; k; x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (x == i * (i - <span class="number">1</span>) / <span class="number">2</span> + j - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i == j) c[i][j] = b[x];</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">c[i][j] = b[x];</span><br><span class="line">c[j][i] = b[x];</span><br><span class="line">&#125;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">release3</span><span class="params">()</span> </span>&#123;<span class="comment">/*矩阵解压*/</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"公式解压后的结果"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">float</span> i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; k; x++)</span><br><span class="line">&#123;</span><br><span class="line">i = <span class="built_in">sqrt</span>(<span class="number">2</span> * (x + <span class="number">1</span>) + <span class="number">0.25</span>) - <span class="number">0.5</span>;</span><br><span class="line">i = <span class="built_in">ceil</span>(i);</span><br><span class="line"><span class="keyword">int</span> i_ = i;</span><br><span class="line"><span class="keyword">int</span> j = x + <span class="number">1</span> - i * (i - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (i == j)</span><br><span class="line">c[i_][j] = b[x];</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">c[i_][j] = b[x];</span><br><span class="line">c[j][i_] = b[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_compression</span><span class="params">()</span> </span>&#123;<span class="comment">/*压缩后的矩阵打印*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_realease</span><span class="params">()</span> </span>&#123;<span class="comment">/*解压后的矩阵打印*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;= n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (j != n)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; c[i][j];</span><br><span class="line"><span class="keyword">if</span> (j == n)<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入矩阵的阶数："</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line"> </span><br><span class="line">one_circle_compression();<span class="comment">//一重循环压缩</span></span><br><span class="line">print_compression();<span class="comment">//打印</span></span><br><span class="line">two_circle_compression();<span class="comment">//二重循环压缩</span></span><br><span class="line">print_compression();<span class="comment">//打印</span></span><br><span class="line">release1();<span class="comment">//一重循环解压</span></span><br><span class="line">print_realease();<span class="comment">//打印 </span></span><br><span class="line">release2();<span class="comment">//二重循环解压</span></span><br><span class="line">print_realease();<span class="comment">//打印</span></span><br><span class="line">release3();<span class="comment">//公式解压矩阵</span></span><br><span class="line">print_realease();<span class="comment">//打印</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://s2.ax1x.com/2019/10/13/uxBdr4.png" class="lazyload"></p><p><img alt data-src="https://s2.ax1x.com/2019/10/13/uxBBZ9.png" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 矩阵压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1086花生采摘</title>
      <link href="/2019/10/10/%E6%B4%9B%E8%B0%B7P1086%E8%8A%B1%E7%94%9F%E9%87%87%E6%91%98/"/>
      <url>/2019/10/10/%E6%B4%9B%E8%B0%B7P1086%E8%8A%B1%E7%94%9F%E9%87%87%E6%91%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img alt data-src="https://s2.ax1x.com/2019/10/10/u7FwPP.png" class="lazyload"></p><p>解题过程如下，刚开始以为要冬天规划，实则不用。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">200</span>][<span class="number">200</span>];</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">peanut</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">&#125;;</span><br><span class="line">peanut pnut[<span class="number">5010</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(peanut a, peanut b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.num &gt; b.num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> m, n,time, k = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; time;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=m;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p[i][j];</span><br><span class="line"><span class="keyword">if</span> (p[i][j] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">pnut[k].num = p[i][j];</span><br><span class="line">pnut[k].x = i;</span><br><span class="line">pnut[k].y = j;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(pnut, pnut + k, cmp);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span>) pnut[i].t = pnut[i].x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> pnut[i].t = pnut[i - <span class="number">1</span>].t + <span class="built_in">abs</span>(pnut[i].x - pnut[i - <span class="number">1</span>].x) + <span class="built_in">abs</span>(pnut[i].y - pnut[i - <span class="number">1</span>].y) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (pnut[i].t + pnut[i].x &lt;= time) ans += pnut[i].num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汉诺塔的非递归实现方法</title>
      <link href="/2019/09/30/%E6%B1%89%E8%AF%BA%E5%A1%94%E7%9A%84%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/"/>
      <url>/2019/09/30/%E6%B1%89%E8%AF%BA%E5%A1%94%E7%9A%84%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="数据结构国庆作业——"><a href="#数据结构国庆作业——" class="headerlink" title="数据结构国庆作业——"></a>数据结构国庆作业——</h3><p>汉诺塔的非递归实现方法</p><p>版本一是STL版本；</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> from, <span class="keyword">char</span> to)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"from "</span> &lt;&lt; from &lt;&lt; <span class="string">" move "</span> &lt;&lt; n &lt;&lt; <span class="string">" to "</span> &lt;&lt; to &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hanoinode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> from, pass, to;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> from, <span class="keyword">char</span> pass, <span class="keyword">char</span> to)</span> </span>&#123;</span><br><span class="line"><span class="built_in">stack</span> &lt;hanoinode&gt; s;</span><br><span class="line">hanoinode par_outer = &#123; n,from,pass,to &#125;;</span><br><span class="line"><span class="keyword">while</span> (!(par_outer.n == <span class="number">0</span> &amp;&amp; s.empty())) &#123;</span><br><span class="line">hanoinode par_inner = par_outer;</span><br><span class="line"><span class="keyword">while</span> (par_inner.n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">s.push(par_inner);</span><br><span class="line">par_inner.n--;</span><br><span class="line">swap(par_inner.pass, par_inner.to);</span><br><span class="line">&#125;</span><br><span class="line">par_outer = s.top();</span><br><span class="line">s.pop();</span><br><span class="line">move(par_outer.n, par_outer.from, par_outer.to);</span><br><span class="line">par_outer.n--;</span><br><span class="line">swap(par_outer.from, par_outer.pass);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">hanoi(n, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>版本二是顺序栈版</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACK_INIT_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCREASEMENT 10</span></span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hanoinode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> from, pass, to;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  &#123;</span></span><br><span class="line">hanoinode *base;</span><br><span class="line">hanoinode *top;</span><br><span class="line"><span class="keyword">int</span> stacksize;</span><br><span class="line">&#125;Sqstack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Initstack</span><span class="params">(Sqstack &amp;S)</span> </span>&#123;</span><br><span class="line">S.base = (hanoinode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(hanoinode)*STACK_INIT_SIZE);</span><br><span class="line">S.top = S.base;</span><br><span class="line">S.stacksize = STACK_INIT_SIZE;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(Sqstack &amp;S, hanoinode e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top - S.base == S.stacksize) &#123;</span><br><span class="line">S.base = (hanoinode *)<span class="built_in">realloc</span>(S.base, (S.stacksize + INCREASEMENT) * <span class="keyword">sizeof</span>(hanoinode));</span><br><span class="line">S.top = S.base + S.stacksize;</span><br><span class="line">S.stacksize += INCREASEMENT;</span><br><span class="line">&#125;</span><br><span class="line">*S.top++ = e;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> from, <span class="keyword">char</span> to)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"from "</span> &lt;&lt; from &lt;&lt; <span class="string">" move "</span> &lt;&lt; n &lt;&lt; <span class="string">" to "</span> &lt;&lt; to &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">hanoinode <span class="title">GetTop</span><span class="params">(Sqstack S)</span> </span>&#123;</span><br><span class="line"><span class="comment">//if (S.top == S.base) return 0;</span></span><br><span class="line">hanoinode e;</span><br><span class="line">e = *--S.top;</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Pop</span><span class="params">(Sqstack &amp;S)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top == S.base) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">hanoinode e;</span><br><span class="line">e = *--S.top;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> from, <span class="keyword">char</span> pass, <span class="keyword">char</span> to)</span> </span>&#123;</span><br><span class="line">Sqstack s;</span><br><span class="line">Initstack(s);</span><br><span class="line">hanoinode par_outer = &#123; n,from,pass,to &#125;;</span><br><span class="line"><span class="keyword">while</span> (!(par_outer.n == <span class="number">0</span> &amp;&amp; s.top == s.base)) &#123;</span><br><span class="line">hanoinode par_inner = par_outer;</span><br><span class="line"><span class="keyword">while</span> (par_inner.n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">push(s, par_inner);</span><br><span class="line">par_inner.n--;</span><br><span class="line">swap(par_inner.pass, par_inner.to);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">par_outer = GetTop(s);</span><br><span class="line">Pop(s);</span><br><span class="line">move(par_outer.n, par_outer.from, par_outer.to);</span><br><span class="line">par_outer.n--;</span><br><span class="line">swap(par_outer.from, par_outer.pass);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">hanoi(n, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt;<span class="string">"共进行了"</span> &lt;&lt; cnt &lt;&lt; <span class="string">"次"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 汉诺塔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图的广度优先遍历</title>
      <link href="/2019/09/25/%E5%9B%BE%E7%9A%84%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/"/>
      <url>/2019/09/25/%E5%9B%BE%E7%9A%84%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img alt data-src="https://s2.ax1x.com/2019/09/25/ueiIit.jpg" class="lazyload"></p><p><img alt data-src="https://s2.ax1x.com/2019/09/25/uei4II.jpg" class="lazyload"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">9999999</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, s;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">que</span>[2501];</span></span><br><span class="line"><span class="keyword">int</span> e[<span class="number">101</span>][<span class="number">101</span>], book[<span class="number">51</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> head, tail;</span><br><span class="line"><span class="keyword">int</span> n, m, a,b, cur, start, end, flag = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; start &gt;&gt; end;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i == j) e[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> e[i][j] = maxn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">e[a][b] = <span class="number">1</span>;</span><br><span class="line">e[b][a] = <span class="number">1</span>;<span class="comment">//无向图</span></span><br><span class="line">&#125;</span><br><span class="line">head = <span class="number">1</span>;</span><br><span class="line">tail = <span class="number">1</span>;</span><br><span class="line">que[head].x = start;</span><br><span class="line">que[head].s = <span class="number">0</span>;</span><br><span class="line">tail++;</span><br><span class="line">book[start] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (head &lt; tail) &#123;</span><br><span class="line">cur = que[head].x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (e[cur][j] != maxn &amp;&amp; book[j] == <span class="number">0</span>) &#123;</span><br><span class="line">que[tail].x = j;</span><br><span class="line">que[tail].s = que[head].s + <span class="number">1</span>;</span><br><span class="line">tail++;</span><br><span class="line">book[j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (que[tail - <span class="number">1</span>].s == end) &#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">head++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, que[tail - <span class="number">1</span>].s); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        本题也可使用深度优先搜索，但是这里使用广度优先搜索会更快。广度优先搜索会更加适用于所有边的 权值相同的情况。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 啊哈算法 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 广度优先遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图的深度优先遍历</title>
      <link href="/2019/09/25/%E5%9B%BE%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/"/>
      <url>/2019/09/25/%E5%9B%BE%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="数据是这样给出的："><a href="#数据是这样给出的：" class="headerlink" title="数据是这样给出的："></a>数据是这样给出的：</h2><p><img alt data-src="https://s2.ax1x.com/2019/09/25/uZXA61.jpg" class="lazyload"></p><p>好了，下面附上代码。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> limit = <span class="number">999999</span>;</span><br><span class="line"><span class="keyword">int</span> min_ = limit, book[<span class="number">101</span>], n, e[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> dis)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">if</span> (dis &gt; min_) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (cur == n) &#123;</span><br><span class="line"><span class="keyword">if</span> (dis &lt; min_) min_ = dis;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (e[cur][j] != limit &amp;&amp; book[j] == <span class="number">0</span>) &#123;</span><br><span class="line">book[j] = <span class="number">1</span>;</span><br><span class="line">dfs(j, dis + e[cur][j]);</span><br><span class="line">book[j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> m, a, b, c;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line"><span class="keyword">if</span> (i == j) e[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> e[i][j] = limit;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">e[a][b] = c;</span><br><span class="line">&#125;</span><br><span class="line">book[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; min_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 啊哈算法 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 深度优先遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1036选数</title>
      <link href="/2019/09/23/%E6%B4%9B%E8%B0%B7P1036%E9%80%89%E6%95%B0/"/>
      <url>/2019/09/23/%E6%B4%9B%E8%B0%B7P1036%E9%80%89%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img alt data-src="https://s2.ax1x.com/2019/09/23/uiciad.png" class="lazyload"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000</span>], book[<span class="number">1000</span>], m,n,sum,ans;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span> || x == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(x); i++)</span><br><span class="line"><span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = y; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (book[i] == <span class="number">0</span>) &#123;</span><br><span class="line">book[i] = <span class="number">1</span>;</span><br><span class="line">sum += a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n == x) &#123;</span><br><span class="line"><span class="keyword">if</span> (isprime(sum)) ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dfs(x + <span class="number">1</span>, i + <span class="number">1</span>);</span><br><span class="line">sum -= a[i];</span><br><span class="line">book[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">dfs(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深搜广搜遍历图</title>
      <link href="/2019/09/22/%E6%B7%B1%E6%90%9C%E5%B9%BF%E6%90%9C%E9%81%8D%E5%8E%86%E5%9B%BE/"/>
      <url>/2019/09/22/%E6%B7%B1%E6%90%9C%E5%B9%BF%E6%90%9C%E9%81%8D%E5%8E%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>今天学习了一下如何用深搜和广搜遍历图。</p><p>下面是广度优先搜索</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;<span class="comment">//广度优先搜索</span></span><br><span class="line">    <span class="keyword">int</span> i,j,n,m,a,b,cur,book[<span class="number">101</span>] = &#123;<span class="number">0</span>&#125;,e[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line">    <span class="keyword">int</span> que[<span class="number">10001</span>],head,tail;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>;j &lt;= n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == j) e[i][j] = <span class="number">0</span>;<span class="comment">//对角线赋值为0</span></span><br><span class="line">            <span class="keyword">else</span> e[i][j] = <span class="number">9999999</span>;<span class="comment">//定义9999999为∞</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a,&amp;b);</span><br><span class="line">        e[a][b] = <span class="number">1</span>;</span><br><span class="line">        e[b][a] = <span class="number">1</span>;<span class="comment">//无向图双向赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">    head = <span class="number">1</span>;</span><br><span class="line">    tail = <span class="number">1</span>;</span><br><span class="line">    que[tail] = <span class="number">1</span>;</span><br><span class="line">    tail++;</span><br><span class="line">    book[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(head &lt; tail &amp;&amp; tail &lt;= n)&#123;</span><br><span class="line">        cur = que[head];</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(e[cur][i] == <span class="number">1</span> &amp;&amp; book[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                que[tail] = i;</span><br><span class="line">                tail++;</span><br><span class="line">                book[i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(tail &gt; n) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        head++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt; tail;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,que[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img alt data-src="https://s2.ax1x.com/2019/09/22/u9MxRU.png" class="lazyload"></p><p>深度优先搜索</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> book[<span class="number">101</span>],sum,n,e[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>,cur);</span><br><span class="line">    sum++;</span><br><span class="line">    <span class="keyword">if</span>(sum == n) <span class="keyword">return</span> ;<span class="comment">//访问所有节点</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(e[cur][i] == <span class="number">1</span>&amp;&amp; book[i] == <span class="number">0</span>)&#123;</span><br><span class="line">            book[i] = <span class="number">1</span>;</span><br><span class="line">            dfs(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,m,a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>;j &lt;= n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == j) e[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> e[i][j] = <span class="number">9999999</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a,&amp;b);</span><br><span class="line">        e[a][b] = <span class="number">1</span>;</span><br><span class="line">        e[b][a] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    book[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img alt data-src="https://s2.ax1x.com/2019/09/22/u9MTMQ.png" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 深度优先搜索 </tag>
            
            <tag> 广度优先搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1060-开心的金明(背包问题）</title>
      <link href="/2019/09/22/%E6%B4%9B%E8%B0%B7P1060-%E5%BC%80%E5%BF%83%E7%9A%84%E9%87%91%E6%98%8E(%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%EF%BC%89/"/>
      <url>/2019/09/22/%E6%B4%9B%E8%B0%B7P1060-%E5%BC%80%E5%BF%83%E7%9A%84%E9%87%91%E6%98%8E(%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img alt data-src="https://s2.ax1x.com/2019/09/22/upOy24.png" class="lazyload"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> weight[<span class="number">30</span>],cost[<span class="number">30</span>],f[<span class="number">10000</span>];</span><br><span class="line"><span class="keyword">int</span> money,number;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; money &gt;&gt; number;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= number;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt;cost[i] &gt;&gt;weight[i];</span><br><span class="line">        weight[i] *= cost[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= number;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = money;j &gt;= cost[i];j--)</span><br><span class="line">            f[j] = max(f[j],f[j - cost[i]] + weight[i]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f[money] &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1002过河卒</title>
      <link href="/2019/09/21/%E6%B4%9B%E8%B0%B7P1002%E8%BF%87%E6%B2%B3%E5%8D%92/"/>
      <url>/2019/09/21/%E6%B4%9B%E8%B0%B7P1002%E8%BF%87%E6%B2%B3%E5%8D%92/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img alt data-src="https://s2.ax1x.com/2019/09/21/nzxhlQ.png" class="lazyload"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MX[] = &#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;<span class="comment">//记录马能到达的位置</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MY[] = &#123;<span class="number">0</span>,<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-2</span>&#125;;</span><br><span class="line">ull destination[<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> book[<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dx,dy,mx,my;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; dx &gt;&gt; dy &gt;&gt; mx &gt;&gt; my;</span><br><span class="line">    ++dx;++dy;++mx;++my;<span class="comment">//防止数组越界全部加1</span></span><br><span class="line">    destination[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;<span class="comment">//初始化马的初始位置</span></span><br><span class="line">    book[mx][my] = <span class="number">1</span>;<span class="comment">//记录马能到达的位置的值为1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">8</span>;i++)</span><br><span class="line">        book[mx + MX[i]][my + MY[i]] = <span class="number">1</span>;<span class="comment">//作记录</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= dx;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= dy;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(book[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">            destination[i][j] = max(destination[i][j],destination[i<span class="number">-1</span>][j]+destination[i][j<span class="number">-1</span>]);<span class="comment">//状态转移方程</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; destination[dx][dy];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列的实现</title>
      <link href="/2019/09/21/%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/09/21/%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> QElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> &#123;</span></span><br><span class="line">    QElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;QNode,*QueuePtr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    QueuePtr front;</span><br><span class="line">    QueuePtr rear;</span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"></span><br><span class="line"><span class="function">QueuePtr <span class="title">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span> </span>&#123;</span><br><span class="line">    Q.front = Q.rear = (QueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line">    Q.front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> Q.front;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DestroyQueue</span><span class="params">(LinkQueue&amp; Q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (Q.front) &#123;</span><br><span class="line">        Q.rear = Q.front-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(Q.front);</span><br><span class="line">        Q.front = Q.rear;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EnQueue</span><span class="params">(LinkQueue &amp;Q, QElemType e)</span> </span>&#123;</span><br><span class="line">    QueuePtr p;</span><br><span class="line">    p = (QueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line">    p-&gt;data = e; p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    Q.rear-&gt;next = p;</span><br><span class="line">    Q.rear = p;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeQueue</span><span class="params">(LinkQueue&amp; Q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Q.front == Q.rear) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    QueuePtr p;</span><br><span class="line">    p = Q.front-&gt;next;</span><br><span class="line">    Q.front-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (Q.rear == p) Q.rear = Q.front;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(LinkQueue Q)</span> </span>&#123;</span><br><span class="line">    QueuePtr p = Q.front -&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p-&gt;data &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LinkQueue q;</span><br><span class="line">    InitQueue(q);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入度列的长度: "</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">        EnQueue(q, temp);</span><br><span class="line">    &#125;</span><br><span class="line">    print(q);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    LinkQueue t = q;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t.front&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t.rear &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t.front-&gt;next-&gt;data &lt;&lt; t.rear-&gt;data &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    DeQueue(q);</span><br><span class="line">    print(q);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    EnQueue(q,<span class="number">5</span>);</span><br><span class="line">    print(q);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">if</span>(DestroyQueue(q))</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Destroy Queue completely"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈的实现</title>
      <link href="/2019/09/21/%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/09/21/%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACK_INIT_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACKINCREASEMENT 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> SElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    SElemType* base;</span><br><span class="line">    SElemType* top;</span><br><span class="line">    <span class="keyword">int</span> stacksize;</span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">SqStack <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span> </span>&#123;</span><br><span class="line">    S.base = (SElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SElemType)* STACK_INIT_SIZE);</span><br><span class="line">    S.top = S.base ;</span><br><span class="line">    S.stacksize = STACK_INIT_SIZE;</span><br><span class="line">    <span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">SElemType <span class="title">GetTop</span><span class="params">(SqStack S, SElemType&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == S.base) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = *(S.top - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(SqStack&amp; S, SElemType e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top - S.base &gt;= S.stacksize) &#123;</span><br><span class="line">        S.base = (SElemType*)<span class="built_in">realloc</span>(S.base, (S.stacksize + STACKINCREASEMENT) * <span class="keyword">sizeof</span>(SElemType));</span><br><span class="line">        S.top = S.base + S.stacksize;</span><br><span class="line">        S.stacksize += STACKINCREASEMENT;</span><br><span class="line">    &#125;</span><br><span class="line">    *S.top++ = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">SElemType <span class="title">Pop</span><span class="params">(SqStack&amp; S, SElemType&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == S.base) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    e = *--S.top;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(SqStack S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (S.top != S.base) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *--S.top &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"栈的元素个数："</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    SqStack S;</span><br><span class="line">    InitStack(S);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">        Push(S, temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"栈顶的值为："</span>);</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, GetTop(S, k));</span><br><span class="line">    print(S);</span><br><span class="line">    <span class="keyword">int</span> del;</span><br><span class="line">    <span class="keyword">int</span> t = Pop(S, del);</span><br><span class="line">    <span class="keyword">if</span> (t) <span class="built_in">printf</span>(<span class="string">"删除栈顶值%d成功\n"</span>,t);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"剩余的值为："</span>);</span><br><span class="line">    print(S);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"继续插入一个值："</span>);</span><br><span class="line">    <span class="keyword">int</span> extra;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; extra;</span><br><span class="line">    Push(S,extra);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    print(S);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法与数据结构7-5 堆中的路径 (25 分)</title>
      <link href="/2019/09/17/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%847-5-%E5%A0%86%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84-25-%E5%88%86/"/>
      <url>/2019/09/17/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%847-5-%E5%A0%86%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84-25-%E5%88%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>将一系列给定数字插入一个初始为空的小顶堆<code>H[]</code>。随后对任意给定的下标<code>i</code>，打印从<code>H[i]</code>到根结点的路径。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>每组测试第1行包含2个正整数<em>N</em>和<em>M</em>(≤1000)，分别是插入元素的个数、以及需要打印的路径条数。下一行给出区间[-10000, 10000]内的<em>N</em>个要被插入一个初始为空的小顶堆的整数。最后一行给出<em>M</em>个下标。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>对输入中给出的每个下标<code>i</code>，在一行中输出从<code>H[i]</code>到根结点的路径上的数据。数字间以1个空格分隔，行末不得有多余空格。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 3</span><br><span class="line">46 23 26 24 10</span><br><span class="line">5 4 3</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">24 23 10</span><br><span class="line">46 23 10</span><br><span class="line">26 10</span><br></pre></td></tr></table></figure><p>用了啊哈算法上的代码通不过，还得另行他法。</p><p>下附AC代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> h[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> Size = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">Size++;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = Size; x &lt; h[i / <span class="number">2</span>]; i /= <span class="number">2</span>) &#123;</span><br><span class="line">h[i] = h[i / <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">h[i] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">h[<span class="number">0</span>] = <span class="number">-100001</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">insert(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> t; </span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (i = t; i &gt;= <span class="number">1</span>; i /= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == t) <span class="built_in">cout</span> &lt;&lt; h[i];</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt;<span class="string">" "</span>&lt;&lt; h[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> PTA </tag>
            
            <tag> 算法与数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈和队列的综合应用——纸牌游戏</title>
      <link href="/2019/09/16/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E7%9A%84%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8%E2%80%94%E2%80%94%E7%BA%B8%E7%89%8C%E6%B8%B8%E6%88%8F/"/>
      <url>/2019/09/16/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E7%9A%84%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8%E2%80%94%E2%80%94%E7%BA%B8%E7%89%8C%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="现有纸牌游戏的规则如下：将一副扑克牌平均分成两份，每人拿一份。小哼先拿出手中的第一张扑克牌放在桌上，然后小哈也拿出手中的第一张扑克牌，并放在小哼刚打出的扑克牌的上面，就像这样两人交替出牌。出牌时，如果某人打出的牌与桌面上某张牌的牌面相同，即可将两张相同的牌及其中间所夹的牌全部取走，并依次放入到自己手中牌的末尾。当任意一个人手中的牌全部出完时，游戏结束，对手获胜。"><a href="#现有纸牌游戏的规则如下：将一副扑克牌平均分成两份，每人拿一份。小哼先拿出手中的第一张扑克牌放在桌上，然后小哈也拿出手中的第一张扑克牌，并放在小哼刚打出的扑克牌的上面，就像这样两人交替出牌。出牌时，如果某人打出的牌与桌面上某张牌的牌面相同，即可将两张相同的牌及其中间所夹的牌全部取走，并依次放入到自己手中牌的末尾。当任意一个人手中的牌全部出完时，游戏结束，对手获胜。" class="headerlink" title="现有纸牌游戏的规则如下：将一副扑克牌平均分成两份，每人拿一份。小哼先拿出手中的第一张扑克牌放在桌上，然后小哈也拿出手中的第一张扑克牌，并放在小哼刚打出的扑克牌的上面，就像这样两人交替出牌。出牌时，如果某人打出的牌与桌面上某张牌的牌面相同，即可将两张相同的牌及其中间所夹的牌全部取走，并依次放入到自己手中牌的末尾。当任意一个人手中的牌全部出完时，游戏结束，对手获胜。"></a>现有纸牌游戏的规则如下：将一副扑克牌平均分成两份，每人拿一份。小哼先拿出手中的第一张扑克牌放在桌上，然后小哈也拿出手中的第一张扑克牌，并放在小哼刚打出的扑克牌的上面，就像这样两人交替出牌。出牌时，如果某人打出的牌与桌面上某张牌的牌面相同，即可将两张相同的牌及其中间所夹的牌全部取走，并依次放入到自己手中牌的末尾。当任意一个人手中的牌全部出完时，游戏结束，对手获胜。</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">queue</span> &#123;</span><span class="comment">//将队列的元素封装为一个结构体</span></span><br><span class="line"><span class="keyword">int</span> data[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> head;</span><br><span class="line"><span class="keyword">int</span> tail;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stack</span> &#123;</span><span class="comment">//将栈的元素封装为一个结构体</span></span><br><span class="line"><span class="keyword">int</span> data[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> top;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">queue</span> <span class="title">q1</span>, <span class="title">q2</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stack</span> <span class="title">s</span>;</span></span><br><span class="line"><span class="keyword">int</span> book[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> i, t;</span><br><span class="line"><span class="comment">//初始化队列</span></span><br><span class="line">q1.head = <span class="number">1</span>; q1.tail = <span class="number">1</span>;</span><br><span class="line">q2.head = <span class="number">1</span>; q2.tail = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//初始化栈</span></span><br><span class="line">s.top = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//用来标记的数组，用来标记哪些牌已经在桌上；</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">book[i] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//小哼手上的6张牌</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q1.data[q1.tail];</span><br><span class="line">q1.tail++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//小哈手上的6张牌</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q2.data[q2.tail];</span><br><span class="line">q2.tail++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (q1.head &lt; q1.tail &amp;&amp; q2.head &lt; q2.tail) &#123;</span><br><span class="line">t = q1.data[q1.head];<span class="comment">//小哼出牌</span></span><br><span class="line"><span class="comment">//判断小哼是否能赢牌</span></span><br><span class="line"><span class="keyword">if</span> (book[t] == <span class="number">0</span>) &#123;<span class="comment">//表明桌上没有牌面为t的牌</span></span><br><span class="line"><span class="comment">//小哼此轮没有赢牌</span></span><br><span class="line">q1.head++;<span class="comment">//出列</span></span><br><span class="line">s.top++;</span><br><span class="line">s.data[s.top] = t;<span class="comment">//入栈</span></span><br><span class="line">book[t] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//小哼此轮可以赢牌</span></span><br><span class="line">q1.head++;<span class="comment">//出列</span></span><br><span class="line">q1.data[q1.tail] = t;<span class="comment">//将牌放入末尾</span></span><br><span class="line">q1.tail++;</span><br><span class="line"><span class="keyword">while</span> (s.data[s.top] != t) &#123;<span class="comment">//将可以赢的的牌放入队尾</span></span><br><span class="line">book[s.data[s.top]] = <span class="number">0</span>;</span><br><span class="line">q1.data[q1.tail] = s.data[s.top];</span><br><span class="line">q1.tail++; s.top--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//收回桌上为t的牌</span></span><br><span class="line">book[s.data[s.top]] = <span class="number">0</span>;</span><br><span class="line">q1.data[q1.tail] = s.data[s.top];</span><br><span class="line">q1.tail++; s.top--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (q1.head == q1.tail) <span class="keyword">break</span>;</span><br><span class="line">t = q2.data[q2.head];<span class="comment">//小哼出牌</span></span><br><span class="line"><span class="comment">//判断小哼是否能赢牌</span></span><br><span class="line"><span class="keyword">if</span> (book[t] == <span class="number">0</span>) &#123;<span class="comment">//表明桌上没有牌面为t的牌</span></span><br><span class="line"><span class="comment">//小哼此轮没有赢牌</span></span><br><span class="line">q2.head++;<span class="comment">//出列</span></span><br><span class="line">s.top++;</span><br><span class="line">s.data[s.top] = t;<span class="comment">//入栈</span></span><br><span class="line">book[t] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//小哼此轮可以赢牌</span></span><br><span class="line">q2.head++;<span class="comment">//出列</span></span><br><span class="line">q2.data[q2.tail] = t;<span class="comment">//将牌放入末尾</span></span><br><span class="line">q2.tail++;</span><br><span class="line"><span class="keyword">while</span> (s.data[s.top] != t) &#123;<span class="comment">//将可以赢的的牌放入队尾</span></span><br><span class="line">book[s.data[s.top]] = <span class="number">0</span>;</span><br><span class="line">q2.data[q2.tail] = s.data[s.top];</span><br><span class="line">q2.tail++; s.top--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//收回桌上为t的牌</span></span><br><span class="line">book[s.data[s.top]] = <span class="number">0</span>;</span><br><span class="line">q2.data[q2.tail] = s.data[s.top];</span><br><span class="line">q2.tail++; s.top--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (q2.head == q2.tail) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"小哼win\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"小哼当前手中的牌是"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = q1.head; i &lt;= q1.tail - <span class="number">1</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d"</span>, q1.data[i]);</span><br><span class="line"><span class="keyword">if</span> (s.top &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n桌上的牌是"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= s.top; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.data[i] &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n桌上已经没有牌了"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"小哈win\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"小哈当前手中的牌是"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = q2.head; i &lt;= q2.tail - <span class="number">1</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d"</span>, q2.data[i]);</span><br><span class="line"><span class="keyword">if</span> (s.top &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n桌上的牌是"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= s.top; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.data[i] &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n桌上已经没有牌了"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img alt data-src="https://s2.ax1x.com/2019/09/16/nWawrj.png" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 啊哈算法 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列的应用</title>
      <link href="/2019/09/15/%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2019/09/15/%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>以揭秘qq号为例，若是美女告诉你个qq号码你不会解密那就很尴尬了。</p><p><img alt data-src="https://s2.ax1x.com/2019/09/15/ngUheP.jpg" class="lazyload"></p><h4 id="如过没有排错的话，最终结果应该是“6-1-5-9-4-7-2-8-3”。"><a href="#如过没有排错的话，最终结果应该是“6-1-5-9-4-7-2-8-3”。" class="headerlink" title="如过没有排错的话，最终结果应该是“6 1 5 9 4 7 2 8 3”。"></a><strong>如过没有排错的话，最终结果应该是“6 1 5 9 4 7 2 8 3”。</strong></h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">queue</span> &#123;</span><span class="comment">//将队列的元素封装为一个结构体</span></span><br><span class="line"><span class="keyword">int</span> data[<span class="number">101</span>];</span><br><span class="line"><span class="keyword">int</span> head;</span><br><span class="line"><span class="keyword">int</span> tail;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span> q;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;<span class="comment">//我将原题目的意思稍微修改了一下，不再局限于九位数，可以是任意位数字。</span></span><br><span class="line">q.head = <span class="number">1</span>;</span><br><span class="line">q.tail = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q.data[q.tail];</span><br><span class="line">q.tail++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (q.head &lt; q.tail) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, q.data[q.head]);<span class="comment">//打印队首</span></span><br><span class="line">q.head++;<span class="comment">//队首出列</span></span><br><span class="line">q.data[q.tail] = q.data[q.head];<span class="comment">//将新队首的数添加至队尾</span></span><br><span class="line">q.tail++;<span class="comment">//队尾加1</span></span><br><span class="line">q.head++;<span class="comment">//队首出列</span></span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想到singularity等大佬已经那么强了，不写点东西心里难受。</p><p><img alt data-src="https://s2.ax1x.com/2019/09/09/ntEkxs.jpg" class="lazyload"></p><p>一会儿要出去吃饭，嘻嘻嘻。</p><p><img alt data-src="https://s2.ax1x.com/2019/09/12/nBqMlt.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 啊哈算法 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉搜索树的相关操作</title>
      <link href="/2019/09/15/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/09/15/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">/二叉搜索树是一棵二叉树，可以为空，如果不为空，有如下的性质</span><br><span class="line"><span class="comment">//（1）非空左子树的所有键值小于其根结点的键值</span></span><br><span class="line"><span class="comment">//（2）非空右子树的所有键值大于其根结点的键值</span></span><br><span class="line"><span class="comment">//（3）左右子树都是二叉搜索树</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> &#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> *<span class="title">left</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> *<span class="title">right</span>;</span></span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">typedef</span> TNode *BT;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">BT <span class="title">CreateBinTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">BT T;</span><br><span class="line">ElemType ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="number">0</span>)</span><br><span class="line">T = <span class="literal">NULL</span>;<span class="comment">//到叶节点之后，其左右儿子的值赋值为0</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">T = (BT)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TNode));</span><br><span class="line">T-&gt;data = ch;</span><br><span class="line">T-&gt;left = CreateBinTree();</span><br><span class="line">T-&gt;right = CreateBinTree();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二叉搜索树查找元素（递归）</span></span><br><span class="line"><span class="function">BT <span class="title">Findx_inBST</span><span class="params">(BT BST, ElemType x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!BST) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (BST-&gt;data &lt; x)</span><br><span class="line">Findx_inBST(BST-&gt;right, x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BST-&gt;data &gt; x)</span><br><span class="line">Findx_inBST(BST-&gt;left, x);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二叉搜索树查找元素（非递归）</span></span><br><span class="line"><span class="function">BT <span class="title">Findx_inBST2</span><span class="params">(BT BST, ElemType x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!BST) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (BST) &#123;</span><br><span class="line"><span class="keyword">if</span> (BST-&gt;data &lt; x)</span><br><span class="line">BST = BST-&gt;right;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BST-&gt;data &gt; x)</span><br><span class="line">BST = BST-&gt;left;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递归方式查找二叉搜索树的最大值</span></span><br><span class="line"><span class="comment">//二叉搜索树最大值的查找</span></span><br><span class="line"><span class="comment">//树为空直接返回；不为空，就到右子树去找，直到右子树为空，返回其父节点</span></span><br><span class="line"><span class="function">BT <span class="title">Findmax_inBST</span><span class="params">(BT BST)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!BST) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!BST-&gt;right) <span class="keyword">return</span> BST;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> Findmax_inBST(BST-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//非递归方式查找</span></span><br><span class="line"><span class="function">BT <span class="title">Findmax_inBST2</span><span class="params">(BT BST)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!BST) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (BST-&gt;right) BST = BST-&gt;right;</span><br><span class="line"><span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递归方式查找二叉搜索树的最小值</span></span><br><span class="line"><span class="function">BT <span class="title">Findmin_inBST</span><span class="params">(BT BST)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!BST) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!BST-&gt;left) <span class="keyword">return</span> BST;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> Findmax_inBST(BST-&gt;left);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非递归方式查找</span></span><br><span class="line"><span class="function">BT <span class="title">Findmin_inBST2</span><span class="params">(BT BST)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!BST) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (BST-&gt;left) BST = BST-&gt;left;</span><br><span class="line"><span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">/二叉搜索树的插入，与find类似</span><br><span class="line"><span class="function">BT <span class="title">InsertXtoBST</span><span class="params">(BT BST, ElemType x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!BST) &#123;</span><br><span class="line">BST = (BT)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TNode));</span><br><span class="line">BST-&gt;data = x;</span><br><span class="line">BST-&gt;left = BST-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (BST-&gt;data &gt; x)</span><br><span class="line">BST-&gt;left = InsertXtoBST(BST-&gt;left, x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BST-&gt;data &lt; x)</span><br><span class="line">BST-&gt;right = InsertXtoBST(BST-&gt;right, x);</span><br><span class="line"><span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二叉搜索树的删除</span></span><br><span class="line"><span class="comment">//（1）删除的是叶节点</span></span><br><span class="line"><span class="comment">//（2）删除的节点只有一个孩子</span></span><br><span class="line"><span class="comment">//（3）删除的节点有两个孩子。此时，可以取左子树的最大值，或右子树的最小值。</span></span><br><span class="line"><span class="function">BT <span class="title">Deletex_inBST</span><span class="params">(BT BST, ElemType x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!BST) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"树为空，无法删除"</span>);</span><br><span class="line"><span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br><span class="line">BT temp;</span><br><span class="line"><span class="keyword">if</span> (BST-&gt;data &gt; x) BST-&gt;left = Deletex_inBST(BST-&gt;left, x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BST-&gt;data &lt; x) BST-&gt;right = Deletex_inBST(BST-&gt;right, x);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (BST-&gt;left&amp;&amp;BST-&gt;right) &#123;</span><br><span class="line">temp = Findmax_inBST2(BST-&gt;right);</span><br><span class="line">BST-&gt;data = temp-&gt;data;</span><br><span class="line">BST-&gt;right = Deletex_inBST(BST-&gt;right, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">temp = BST;</span><br><span class="line"><span class="keyword">if</span> (BST-&gt;left == <span class="literal">NULL</span>) BST = BST-&gt;right;</span><br><span class="line"><span class="keyword">else</span> BST = BST-&gt;left;</span><br><span class="line"><span class="built_in">free</span>(temp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 中序遍历(递归)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraversal</span><span class="params">(BT BT)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BT) &#123;</span><br><span class="line">InOrderTraversal(BT-&gt;left);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, BT-&gt;data);</span><br><span class="line">InOrderTraversal(BT-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先序遍历(递归)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraversal</span><span class="params">(BT BT)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BT) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, BT-&gt;data);</span><br><span class="line">PreOrderTraversal(BT-&gt;left);</span><br><span class="line">PreOrderTraversal(BT-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建一棵二叉树</span></span><br><span class="line">BT T = CreateBinTree();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"二叉搜索树创建成功, 现在输出先序遍历的结果:"</span>);</span><br><span class="line">PreOrderTraversal(T);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"二叉搜索树创建成功, 现在输出中序遍历的结果:"</span>);</span><br><span class="line">InOrderTraversal(T);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"></span><br><span class="line">BT resTNode;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"【1】使用递归方式查找数字 7 是否在二叉搜索树中  : "</span>);</span><br><span class="line"><span class="keyword">if</span> (Findx_inBST(T, <span class="number">7</span>)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"YES \n"</span>);</span><br><span class="line">resTNode = Findx_inBST(T, <span class="number">7</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" 用FindX_inBST的结果显示一下数字 7 : %d\n\n"</span>, resTNode-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NO \n\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"【2】使用非递归方式查找数字 5 是否在二叉搜索树中 : "</span>);</span><br><span class="line"><span class="keyword">if</span> (Findx_inBST2(T, <span class="number">5</span>)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"YES \n\n"</span>);</span><br><span class="line">resTNode = Findx_inBST2(T, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" 用FindX_inBST_的结果显示一下数字 5 : %d\n\n"</span>, resTNode-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NO\n\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resTNode = Findmax_inBST(T);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"【3】使用递归方式找到该二叉搜索树的最大值为   : %d\n"</span>, resTNode-&gt;data);</span><br><span class="line">resTNode = Findmax_inBST2(T);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"【4】使用非递归方式找到该二叉搜索树的最大值为 : %d\n\n"</span>, resTNode-&gt;data);</span><br><span class="line"></span><br><span class="line">resTNode = Findmin_inBST(T);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"【5】使用递归方式找到该二叉搜索树的最小值为   : %d\n"</span>, resTNode-&gt;data);</span><br><span class="line">resTNode = Findmin_inBST2(T);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"【6】使用非递归方式找到该二叉搜索树的最小值为 : %d\n\n"</span>, resTNode-&gt;data);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"【7】将数字 35 插入该二叉搜索树中 : \n"</span>);</span><br><span class="line">resTNode = InsertXtoBST(T, <span class="number">35</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"     成功插入数字 35, 现在输出先序遍历的结果:"</span>);</span><br><span class="line">PreOrderTraversal(resTNode);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"     成功插入数字 35, 现在输出中序遍历的结果:"</span>);</span><br><span class="line">InOrderTraversal(resTNode);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"【8】将数字 6 插入空树中 : "</span>);</span><br><span class="line">BT T1 = CreateBinTree();</span><br><span class="line">resTNode = InsertXtoBST(T1, <span class="number">6</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"     成功插入数字 6, 现在输出先序遍历的结果:"</span>);</span><br><span class="line">PreOrderTraversal(resTNode);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"     成功插入数字 6, 现在输出中序遍历的结果:"</span>);</span><br><span class="line">InOrderTraversal(resTNode);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"【9】将数字 33 从该二叉搜索树中删除 : \n"</span>);</span><br><span class="line">resTNode = Deletex_inBST(T, <span class="number">33</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"     成功删除数字 33, 现在输出先序遍历的结果:"</span>);</span><br><span class="line">PreOrderTraversal(resTNode);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"     成功删除数字 33, 现在输出中序遍历的结果:"</span>);</span><br><span class="line">InOrderTraversal(resTNode);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 二叉搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法与数据结构7-3 树的同构 (25 分)</title>
      <link href="/2019/09/14/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%847-3-%E6%A0%91%E7%9A%84%E5%90%8C%E6%9E%84-25-%E5%88%86/"/>
      <url>/2019/09/14/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%847-3-%E6%A0%91%E7%9A%84%E5%90%8C%E6%9E%84-25-%E5%88%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>7-3 树的同构 (25 分)</p><p>给定两棵树T1和T2。如果T1可以通过若干次左右孩子互换就变成T2，则我们称两棵树是“同构”的。例如图1给出的两棵树就是同构的，因为我们把其中一棵树的结点A、B、G的左右孩子互换后，就得到另外一棵树。而图2就不是同构的。</p><p><img alt="img" data-src="https://images.ptausercontent.com/28" class="lazyload"></p><p>图1</p><p><img alt="img" data-src="https://images.ptausercontent.com/29" class="lazyload"></p><p>图2 </p><p> 现给定两棵树，请你判断它们是否是同构的。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入给出2棵二叉树树的信息。对于每棵树，首先在一行中给出一个非负整数<em>N</em> (≤10)，即该树的结点数（此时假设结点从0到<em>N</em>−1编号）；随后<em>N</em>行，第<em>i</em>行对应编号第<em>i</em>个结点，给出该结点中存储的1个英文大写字母、其左孩子结点的编号、右孩子结点的编号。如果孩子结点为空，则在相应位置上给出“-”。给出的数据间用一个空格分隔。注意：题目保证每个结点中存储的字母是不同的。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>如果两棵树是同构的，输出“Yes”，否则输出“No”。</p><h3 id="输入样例1（对应图1）："><a href="#输入样例1（对应图1）：" class="headerlink" title="输入样例1（对应图1）："></a>输入样例1（对应图1）：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">A 1 2</span><br><span class="line">B 3 4</span><br><span class="line">C 5 -</span><br><span class="line">D - -</span><br><span class="line">E 6 -</span><br><span class="line">G 7 -</span><br><span class="line">F - -</span><br><span class="line">H - -</span><br><span class="line">8</span><br><span class="line">G - 4</span><br><span class="line">B 7 6</span><br><span class="line">F - -</span><br><span class="line">A 5 1</span><br><span class="line">H - -</span><br><span class="line">C 0 -</span><br><span class="line">D - -</span><br><span class="line">E 2 -</span><br></pre></td></tr></table></figure><h3 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1:"></a>输出样例1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Yes</span><br></pre></td></tr></table></figure><h3 id="输入样例2（对应图2）："><a href="#输入样例2（对应图2）：" class="headerlink" title="输入样例2（对应图2）："></a>输入样例2（对应图2）：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">B 5 7</span><br><span class="line">F - -</span><br><span class="line">A 0 3</span><br><span class="line">C 6 -</span><br><span class="line">H - -</span><br><span class="line">D - -</span><br><span class="line">G 4 -</span><br><span class="line">E 1 -</span><br><span class="line">8</span><br><span class="line">D 6 -</span><br><span class="line">B 5 -</span><br><span class="line">E - -</span><br><span class="line">H - -</span><br><span class="line">C 0 2</span><br><span class="line">G - 3</span><br><span class="line">F - -</span><br><span class="line">A 1 4</span><br></pre></td></tr></table></figure><h3 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2:"></a>输出样例2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">No</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NULL -1</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> data;</span><br><span class="line"><span class="keyword">int</span> left;</span><br><span class="line"><span class="keyword">int</span> right;</span><br><span class="line">&#125;T1[<span class="number">20</span>],T2[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> book[<span class="number">20</span>];<span class="comment">//用来找到根节点</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(struct Node tree[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> l, r;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> root = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">book[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; tree[i].data &gt;&gt; l &gt;&gt; r;</span><br><span class="line"><span class="keyword">if</span> (l == <span class="string">'-'</span>) tree[i].left = <span class="literal">NULL</span>;<span class="comment">//左子树</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">tree[i].left = l - <span class="string">'0'</span>;</span><br><span class="line">book[l - <span class="string">'0'</span>] = <span class="number">1</span>;<span class="comment">//将儿子们赋值为1，则为0的必然是爹，也就是根节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (r == <span class="string">'-'</span>) tree[i].right = <span class="literal">NULL</span>;<span class="comment">//右子树</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">tree[i].right = r - <span class="string">'0'</span>;</span><br><span class="line">book[r - <span class="string">'0'</span>] = <span class="number">1</span>;<span class="comment">//将儿子们赋值为1，则为0的必然是爹，也就是根节点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (book[j] != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">root = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> root;<span class="comment">//返回根节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Issame</span><span class="params">(<span class="keyword">int</span> root1, <span class="keyword">int</span> root2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root1 == <span class="literal">NULL</span> &amp;&amp; root2 == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//都为空树，必然同构</span></span><br><span class="line"><span class="keyword">if</span> ((root1 == <span class="literal">NULL</span> &amp;&amp; root2 != <span class="literal">NULL</span>) || (root1 != <span class="literal">NULL</span> &amp;&amp; root2 == <span class="literal">NULL</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//一个为空，另一个不为空，不同构</span></span><br><span class="line"><span class="keyword">if</span> (T1[root1].data != T2[root2].data)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//节点值不同，不同构</span></span><br><span class="line"><span class="keyword">if</span> (T1[T1[root1].left].data == T2[T2[root2].left].data)<span class="comment">//左儿子值相同，则比较右儿子</span></span><br><span class="line"><span class="keyword">return</span> Issame(T1[root1].right, T2[root2].right);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> Issame(T1[root1].left, T2[root2].right) &amp;&amp; Issame(T1[root1].right, T2[root2].left);<span class="comment">//若不同，则比较第一棵树的左儿子和第二棵树的右儿子</span></span><br><span class="line">      <span class="comment">//以及第一棵树的右儿子和第二棵树的左儿子，都为1的返回值才说明同构</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> root1 = build(T1);</span><br><span class="line"><span class="keyword">int</span> root2 = build(T2);</span><br><span class="line"><span class="keyword">if</span> (Issame(root1, root2))</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span>;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> PTA </tag>
            
            <tag> 算法与数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法与数据结构7-2 一元多项式的乘法与加法运算 (20 分)</title>
      <link href="/2019/09/13/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%847-2-%E4%B8%80%E5%85%83%E5%A4%9A%E9%A1%B9%E5%BC%8F%E7%9A%84%E4%B9%98%E6%B3%95%E4%B8%8E%E5%8A%A0%E6%B3%95%E8%BF%90%E7%AE%97-20-%E5%88%86/"/>
      <url>/2019/09/13/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%847-2-%E4%B8%80%E5%85%83%E5%A4%9A%E9%A1%B9%E5%BC%8F%E7%9A%84%E4%B9%98%E6%B3%95%E4%B8%8E%E5%8A%A0%E6%B3%95%E8%BF%90%E7%AE%97-20-%E5%88%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>设计函数分别求两个一元多项式的乘积与和。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入分2行，每行分别先给出多项式非零项的个数，再以指数递降方式输入一个多项式非零项系数和指数（绝对值均为不超过1000的整数）。数字间以空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>输出分2行，分别以指数递降方式输出乘积多项式以及和多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。零多项式应输出<code>0 0</code>。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 3 4 -5 2  6 1  -2 0</span><br><span class="line">3 5 20  -7 4  3 1</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">15 24 -25 22 30 21 -10 20 -21 8 35 6 -33 5 14 4 -15 3 18 2 -6 1</span><br><span class="line">5 20 -4 4 -5 2 9 1 -2 0</span><br></pre></td></tr></table></figure><p>本应该用链表做的，但是太复杂了，索性用数组。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn],c[maxn],d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">int</span> x, z;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line"><span class="keyword">while</span> (i--) &#123;</span><br><span class="line"><span class="comment">//scanf("%d %d", &amp;x, &amp;z);</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; z;</span><br><span class="line">a[z] += x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line"><span class="keyword">while</span> (i--) &#123;</span><br><span class="line"><span class="comment">//scanf("%d %d", &amp;x, &amp;z);</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; z;</span><br><span class="line">b[z] += x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = maxn - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i]) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; maxn; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (b[j]) c[i + j] += a[i] * b[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span> (i = maxn - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (c[i]) &#123;</span><br><span class="line"><span class="keyword">if</span> (cnt) <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>, c[i], i);</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!cnt) <span class="built_in">printf</span>(<span class="string">"0 0"</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (i = maxn - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line"><span class="keyword">if</span> (a[i]) d[i] += a[i];</span><br><span class="line"><span class="keyword">for</span> (j = maxn - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line"><span class="keyword">if</span> (b[j]) d[j] += b[j];</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = maxn - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (d[i]) &#123;</span><br><span class="line"><span class="keyword">if</span> (cnt) <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>, d[i], i);</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!cnt) <span class="built_in">printf</span>(<span class="string">"0 0"</span>);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> PTA </tag>
            
            <tag> 算法与数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法与数据结构7-1 最大子列和问题 (20 分)</title>
      <link href="/2019/09/13/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%847-1-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%88%97%E5%92%8C%E9%97%AE%E9%A2%98-20-%E5%88%86/"/>
      <url>/2019/09/13/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%847-1-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%88%97%E5%92%8C%E9%97%AE%E9%A2%98-20-%E5%88%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>给定<em>K</em>个整数组成的序列{ <em>N</em>1, <em>N</em>2, …, <em>N**K</em> }，“连续子列”被定义为{ <em>N**i</em>, <em>N**i</em>+1, …, <em>N**j</em> }，其中 1≤<em>i</em>≤<em>j</em>≤<em>K</em>。“最大子列和”则被定义为所有连续子列元素的和中最大者。例如给定序列{ -2, 11, -4, 13, -5, -2 }，其连续子列{ 11, -4, 13 }有最大的和20。现要求你编写程序，计算给定整数序列的最大子列和。 </p><p>本题旨在测试各种不同的算法在各种数据情况下的表现。各组测试数据特点如下：</p><ul><li>数据1：与样例等价，测试基本正确性；</li><li>数据2：102个随机整数；</li><li>数据3：103个随机整数；</li><li>数据4：104个随机整数；</li><li>数据5：105个随机整数；</li></ul><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入第1行给出正整数<em>K</em> (≤100000)；第2行给出<em>K</em>个整数，其间以空格分隔。 </p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中输出最大子列和。如果序列中所有整数皆为负数，则输出0。 </p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">-2 11 -4 13 -5 -2</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">20</span><br></pre></td></tr></table></figure><p>题解代码（效率为O(N)):</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">int</span> max = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">temp += a[i];</span><br><span class="line"><span class="keyword">if</span> (temp &gt; max)</span><br><span class="line">max = temp;</span><br><span class="line"><span class="keyword">if</span> (temp &lt; <span class="number">0</span>)</span><br><span class="line">temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; max;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> PTA </tag>
            
            <tag> 算法与数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>擒贼先擒王——并查集</title>
      <link href="/2019/09/12/%E6%93%92%E8%B4%BC%E5%85%88%E6%93%92%E7%8E%8B%E2%80%94%E2%80%94%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2019/09/12/%E6%93%92%E8%B4%BC%E5%85%88%E6%93%92%E7%8E%8B%E2%80%94%E2%80%94%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>今天复习了一下堆的两种排序方法，又学习了一下并查集。</strong></p><p><strong>下附上问题描述和代码</strong></p><p><img alt data-src="https://s2.ax1x.com/2019/09/12/nBb4oQ.jpg" class="lazyload"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1001</span>] = &#123; <span class="number">0</span> &#125;, n, m, sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">f[i] = i;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//找爹且擒贼先擒王</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getf</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (f[v] == v)</span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//路径压缩，每次函数返回的时候，顺带把路上遇到的人的"BOSS"改为最后找到的祖宗编号；</span></span><br><span class="line"><span class="comment">//提高找祖先的速度。</span></span><br><span class="line">f[v] = getf(f[v]);</span><br><span class="line"><span class="keyword">return</span> f[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//合并两子集合的函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t1, t2;</span><br><span class="line">t1 = getf(v);<span class="comment">//t1,t2分别为v和u的最大BOSS</span></span><br><span class="line">t2 = getf(u);</span><br><span class="line"><span class="keyword">if</span> (t1 != t2)</span><br><span class="line">f[t2] = t1;<span class="comment">//靠左原则</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, x, y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n, &amp;m);<span class="comment">//n是有多少个犯罪个体，m是由多少条描述</span></span><br><span class="line">init();<span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;y);</span><br><span class="line">merge(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扫描有多少个独立的犯罪团伙</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span> (f[i] == i)</span><br><span class="line">sum++;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终返回的是有多少个独立团伙。</p><p>运行结果：</p><p><img alt data-src="https://s2.ax1x.com/2019/09/12/nBbwZD.png" class="lazyload"></p><p>最后结果是3.</p><p>附上今日份的山大月饼，馋你们。<img alt data-src="https://s2.ax1x.com/2019/09/12/nBqMlt.jpg" class="lazyload"></p><p><img alt data-src="https://s2.ax1x.com/2019/09/12/nBbIij.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 啊哈算法 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实验一——顺序表的相关操作</title>
      <link href="/2019/09/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E4%B8%80%E2%80%94%E2%80%94%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/09/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E4%B8%80%E2%80%94%E2%80%94%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">ListNode *Next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> ListNode * List;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回表长</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">(List L)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">List p = L;</span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line">cnt++;</span><br><span class="line">p = p-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回元素的值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetElem</span><span class="params">(List L, ElementType pos)</span> </span>&#123;</span><br><span class="line">List p = L;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos - <span class="number">1</span>; i++)</span><br><span class="line">p = p-&gt;Next;</span><br><span class="line"><span class="keyword">return</span> p-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找表中是否有对应元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">LocateElem</span><span class="params">(List L, ElementType v)</span> </span>&#123;</span><br><span class="line">List p = L;</span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data == v)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">p = p-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链表插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListInsert</span><span class="params">(List L, ElementType pos, ElementType v)</span> </span>&#123;</span><br><span class="line">List p = L;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; pos - <span class="number">1</span>; i++)</span><br><span class="line">p = p-&gt;Next;</span><br><span class="line">List temp = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">temp-&gt;data = v;</span><br><span class="line">temp-&gt;Next = p-&gt;Next;</span><br><span class="line">p-&gt;Next = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链表打印及去重排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(List L)</span> </span>&#123;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">List p = L;</span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s%d"</span>, flag ? <span class="string">" "</span> : <span class="string">""</span>, p-&gt;data);</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">p = p-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">p = L;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"去重后的元素："</span>);</span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line">s.insert(p-&gt;data);</span><br><span class="line">p = p-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it = s.begin(); it != s.end(); it++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s%d"</span>, flag ? <span class="string">" "</span> : <span class="string">""</span>, *it);</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">p = L;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"排序后的元素为："</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : s) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s%d"</span>, flag ? <span class="string">" "</span> : <span class="string">""</span>, it);</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList2</span><span class="params">(List L)</span> </span>&#123;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">List p = L;</span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s%d"</span>, flag ? <span class="string">" "</span> : <span class="string">""</span>, p-&gt;data);</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">p = p-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链表创建</span></span><br><span class="line"><span class="function">List <span class="title">create</span><span class="params">(<span class="keyword">char</span> id)</span> </span>&#123;</span><br><span class="line">ElementType all;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入集合%c的元素个数：%c = "</span>, id, id + <span class="number">23</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;all);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入集合%c的元素："</span>, id);</span><br><span class="line">List head, p;<span class="comment">//头插法创建链表</span></span><br><span class="line">head = <span class="literal">NULL</span>;</span><br><span class="line">p = head;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; all; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">p = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct ListNode));</span><br><span class="line">p-&gt;data = n;</span><br><span class="line">p-&gt;Next = head;</span><br><span class="line">head = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"集合%c中的元素为："</span>, id);</span><br><span class="line">PrintList(head);</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个求并集的算法还是有些问题，待我日后再改。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UnionList</span><span class="params">(List a, List b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> lena = ListLength(a), lenb = ListLength(b);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lenb; i++) &#123;</span><br><span class="line">ElementType v = GetElem(b, i);</span><br><span class="line"><span class="keyword">if</span> (!LocateElem(a, v))</span><br><span class="line">ListInsert(a, ++lena, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"合并后的集合为："</span>);</span><br><span class="line">PrintList2(a);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List La = create(<span class="string">'A'</span>);</span><br><span class="line">List Lb = create(<span class="string">'B'</span>);</span><br><span class="line">UnionList(La, Lb);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img alt data-src="https://s2.ax1x.com/2019/09/10/nURCtJ.png" class="lazyload"></p><p>溜了溜了，第一遍没上传过来，很气。</p><p><img alt data-src="https://s2.ax1x.com/2019/09/09/ntEkxs.jpg" class="lazyload"></p><p>好了，作为不食言的我，今天决定传上来顺序表的操作，这个表实现了所有功能。</p><p><img alt data-src="https://s2.ax1x.com/2019/09/18/nHNoW9.jpg" class="lazyload"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR -1 </span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s1, s2,s3,s4,s5;</span><br><span class="line"><span class="keyword">int</span> book[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Position;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">List</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">ElementType Data[MAXSIZE];</span><br><span class="line">Position Last; <span class="comment">/* 保存线性表中最后一个元素的位置 */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function">List <span class="title">MakeEmpty</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createList</span><span class="params">(List L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(List L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList2</span><span class="params">(List L)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">List L,L2;</span><br><span class="line">ElementType X;</span><br><span class="line">Position P;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line">L = MakeEmpty();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入A集合的元素个数："</span>);</span><br><span class="line">createList(L);</span><br><span class="line">PrintList(L);</span><br><span class="line">L2 = MakeEmpty();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入B集合的元素个数："</span>);</span><br><span class="line">createList(L2);</span><br><span class="line">PrintList2(L2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"有序集合A:"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : s1) <span class="built_in">cout</span>&lt;&lt;it &lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"有序集合B:"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : s2) <span class="built_in">cout</span>&lt;&lt;it&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s4 = s1;</span><br><span class="line">s5 = s2;</span><br><span class="line">s3 = s1;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"AB的并集为："</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : s2) &#123;</span><br><span class="line"><span class="keyword">if</span> (book[it] == <span class="number">0</span>) &#123;</span><br><span class="line">L-&gt;Last++;</span><br><span class="line">s1.insert(it);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it:s1) <span class="built_in">cout</span> &lt;&lt; it &lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"AB的交集为："</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it:s3)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it2 : s2) &#123;</span><br><span class="line"><span class="keyword">if</span> (it == it2)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"A-B的差积为："</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : s2) &#123;</span><br><span class="line"><span class="keyword">if</span> (book[it] == <span class="number">1</span>)</span><br><span class="line">s3.erase(it);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : s3) <span class="built_in">cout</span> &lt;&lt; it &lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"B-A的差积为："</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : s4) &#123;</span><br><span class="line"><span class="keyword">if</span> (book[it] == <span class="number">1</span>)</span><br><span class="line">s5.erase(it);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : s5) <span class="built_in">cout</span> &lt;&lt; it &lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">List <span class="title">MakeEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List p;</span><br><span class="line">p = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));</span><br><span class="line">p-&gt;Last = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createList</span><span class="params">(List L)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入集合的元素："</span>);</span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; L-&gt;Data[i];</span><br><span class="line">L-&gt;Last = i;</span><br><span class="line">s2.insert(L-&gt;Data[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; L-&gt;Data[i];</span><br><span class="line">L-&gt;Last = i;</span><br><span class="line">s1.insert(L-&gt;Data[i]);</span><br><span class="line">book[L-&gt;Data[i]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(List L)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"原集合的元素为："</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= L-&gt;Last; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; L-&gt;Data[i] &lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"集合去重后剩余元素个数："</span>);</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : s1) cnt++;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; cnt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"集合去重后剩余元素："</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : s1)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList2</span><span class="params">(List L)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"原集合的元素为："</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= L-&gt;Last; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; L-&gt;Data[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"集合去重后剩余元素个数："</span>);</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : s2) cnt++;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"集合去重后剩余元素："</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : s2)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下附运行结果：</p><p><img alt data-src="https://s2.ax1x.com/2019/09/18/nHaL5D.png" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 顺序表 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆————神奇的优先队列</title>
      <link href="/2019/09/10/%E5%A0%86%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
      <url>/2019/09/10/%E5%A0%86%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="堆——神奇的优先队列"><a href="#堆——神奇的优先队列" class="headerlink" title="堆——神奇的优先队列"></a><strong>堆——神奇的优先队列</strong></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//建堆以及堆排序</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> h[<span class="number">101</span>];<span class="comment">//存放堆的数组</span></span><br><span class="line"><span class="keyword">int</span> n;<span class="comment">//用来存储堆中元素的个数，也就是堆的大小</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">t = h[x];</span><br><span class="line">h[x] = h[y];</span><br><span class="line">h[y] = t;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//向下调整函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">siftdown</span><span class="params">(<span class="keyword">int</span> i)</span><span class="comment">//从1开始，向下调整</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t, flag = <span class="number">0</span>;<span class="comment">//flag用来标记是否需要继续向下调整</span></span><br><span class="line"><span class="comment">//当i节点有儿子的时候才向下执行</span></span><br><span class="line"><span class="keyword">while</span> (i * <span class="number">2</span> &lt;= n &amp;&amp; flag == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//首先判断它与左儿子的关系，用t记录值比较小的节点的编号</span></span><br><span class="line"><span class="keyword">if</span> (h[i] &gt; h[i * <span class="number">2</span>])</span><br><span class="line">t = i * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">t = i;</span><br><span class="line"><span class="comment">//再判断它与右儿子的关系，用t记录值比较小的节点的编号</span></span><br><span class="line"><span class="keyword">if</span> (i * <span class="number">2</span> + <span class="number">1</span> &lt;= n) &#123;</span><br><span class="line"><span class="comment">//如果右儿子更小，更新较小的节点编号</span></span><br><span class="line"><span class="keyword">if</span> (h[t] &gt; h[i * <span class="number">2</span>+<span class="number">1</span>]  )</span><br><span class="line">t = i * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如法发现最小的节点编号不是自己，说明有比父节点更小的</span></span><br><span class="line"><span class="keyword">if</span> (t != i) &#123;</span><br><span class="line">swap(i, t);<span class="comment">//交换值</span></span><br><span class="line">i = t;<span class="comment">//更新i为刚才与它交换的儿子节点的编号，便于继续进行调整</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是用堆排序的方法所用到的调整函数，目的在于建立最大堆</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">siftdown1</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t, flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i * <span class="number">2</span> &lt;= n &amp;&amp; flag == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (h[i] &lt; h[i * <span class="number">2</span>])</span><br><span class="line">t = i * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">t = i;</span><br><span class="line"><span class="keyword">if</span> (i * <span class="number">2</span> + <span class="number">1</span> &lt;= n) &#123;</span><br><span class="line"><span class="keyword">if</span> (h[t] &lt; h[i * <span class="number">2</span> + <span class="number">1</span>])</span><br><span class="line">t = i * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (t != i) &#123;</span><br><span class="line">swap(i, t);</span><br><span class="line">i = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//堆排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapsort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">swap(<span class="number">1</span>, n);</span><br><span class="line">n--;</span><br><span class="line">siftdown1(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立堆的函数</span></span><br><span class="line"><span class="comment">//从最后一个非叶节点到第一个节点依次进行向下调整</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = n / <span class="number">2</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">siftdown(i);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//堆排序方法的建立最大堆</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creat</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = n / <span class="number">2</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">siftdown1(i);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除最大的元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deletemax</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">t = h[<span class="number">1</span>];<span class="comment">//临时变量记录定点值</span></span><br><span class="line">h[<span class="number">1</span>] = h[n];<span class="comment">//将堆的最后一个点赋值到堆顶</span></span><br><span class="line">n--;<span class="comment">//堆的元素个数减少一</span></span><br><span class="line">siftdown(<span class="number">1</span>);<span class="comment">//向下调整</span></span><br><span class="line"><span class="keyword">return</span> t;<span class="comment">//返回之前记录的定点最小值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, num;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;h[i]);</span><br><span class="line">n = num;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create();<span class="comment">//建堆</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//连续删除n次顶部元素，也就是从小到大把数输出来</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, deletemax());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;h[i]);</span><br><span class="line">n = num;</span><br><span class="line">creat();</span><br><span class="line">heapsort();<span class="comment">//堆排序</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, h[i]);</span><br><span class="line">getchar();</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img alt data-src="https://s2.ax1x.com/2019/09/09/ntEkxs.jpg" class="lazyload"></p><p>咳咳，运行结果被我搞没了，总而言之是按照升序排列就对了。</p><p>最后贴上我的良师益友的照片来镇楼。</p><p><img alt data-src="https://s2.ax1x.com/2019/09/09/ntnDbR.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 堆 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
