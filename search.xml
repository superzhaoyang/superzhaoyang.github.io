<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test2</title>
      <link href="/2020/04/29/test2/"/>
      <url>/2020/04/29/test2/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2020/04/29/test/"/>
      <url>/2020/04/29/test/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>hello </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu18.04配置静态ip的方法</title>
      <link href="/2020/04/28/Ubuntu18-04%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2020/04/28/Ubuntu18-04%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81ip%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>​    与Ubuntu 16.04不同，从Ubuntu 17.10 之后，系统便不再支持使用 /etc/network/interfaces的方式来配置静态ip了，需要在 /etc/netplan/xx.yaml 文件修改如下，其中网关设置为用route -n 命令输出的网关。</p><p><img alt data-src="https://s1.ax1x.com/2020/04/28/JIR36I.png" class="lazyload"></p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Let NetworkManager manage all devices on this system</span><br><span class="line">network:</span><br><span class="line">  version: 2</span><br><span class="line">  renderer: NetworkManager</span><br><span class="line">  ethernets:</span><br><span class="line">    ens33:</span><br><span class="line">      dhcp4: no</span><br><span class="line">      dhcp6: no</span><br><span class="line">      addresses: [192.168.136.129/24]</span><br><span class="line">      gateway4: 192.168.136.2</span><br><span class="line">      nameservers:</span><br><span class="line">         addresses: [114.114.114.114,8.8.8.8]</span><br></pre></td></tr></table></figure><p>设置完成后，</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo netplan apply</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> 静态ip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>过拟合与欠拟合的区别</title>
      <link href="/2020/04/13/%E8%BF%87%E6%8B%9F%E5%90%88%E4%B8%8E%E6%AC%A0%E6%8B%9F%E5%90%88/"/>
      <url>/2020/04/13/%E8%BF%87%E6%8B%9F%E5%90%88%E4%B8%8E%E6%AC%A0%E6%8B%9F%E5%90%88/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="欠拟合是指模型在训练集、验证集和测试集上均表现不佳的情况"><a href="#欠拟合是指模型在训练集、验证集和测试集上均表现不佳的情况" class="headerlink" title="欠拟合是指模型在训练集、验证集和测试集上均表现不佳的情况"></a>欠拟合是指模型在训练集、验证集和测试集上均表现不佳的情况</h3><h3 id="过拟合是指模型在训练集上表现很好，到了验证和测试阶段就大不如意了，即模型的泛化能力很差"><a href="#过拟合是指模型在训练集上表现很好，到了验证和测试阶段就大不如意了，即模型的泛化能力很差" class="headerlink" title="过拟合是指模型在训练集上表现很好，到了验证和测试阶段就大不如意了，即模型的泛化能力很差"></a>过拟合是指模型在训练集上表现很好，到了验证和测试阶段就大不如意了，即模型的泛化能力很差</h3><p>欠拟合和过拟合一直是机器学习训练中的难题，在进行模型训练的时候往往要对这二者进行权衡，使得模型不仅在训练集上表现良好，在验证集以及测试集上也要有出色的预测能力。</p><p>解决欠拟合(高偏差)的方法<br>1.模型复杂化<br>对同一个算法复杂化。例如回归模型添加更多的高次项，增加决策树的深度，增加神经网络的隐藏层数和隐藏单元数等<br>弃用原来的算法，使用一个更加复杂的算法或模型。例如用神经网络来替代线性回归，用随机森林来代替决策树等<br>2.增加更多的特征，使输入数据具有更强的表达能力<br>特征挖掘十分重要，尤其是具有强表达能力的特征，往往可以抵过大量的弱表达能力的特征<br>特征的数量往往并非重点，质量才是，总之强特最重要<br>能否挖掘出强特，还在于对数据本身以及具体应用场景的深刻理解，往往依赖于经验<br>3.调整参数和超参数<br>超参数包括：<br>神经网络中：学习率、学习衰减率、隐藏层数、隐藏层的单元数、Adam优化算法中的β1和β2参数、batch_size数值等<br>其他算法中：随机森林的树数量，k-means中的cluster数，正则化参数λ等<br>4.增加训练数据往往没有用<br>欠拟合本来就是模型的学习能力不足，增加再多的数据给它训练它也没能力学习好<br>5.降低正则化约束<br>正则化约束是为了防止模型过拟合，如果模型压根不存在过拟合而是欠拟合了，那么就考虑是否降低正则化参数λ或者直接去除正则化项<br>解决过拟合(高方差)的方法<br>1.增加训练数据数<br>发生过拟合最常见的现象就是数据量太少而模型太复杂<br>过拟合是由于模型学习到了数据的一些噪声特征导致，增加训练数据的量能够减少噪声的影响，让模型更多地学习数据的一般特征<br>增加数据量有时可能不是那么容易，需要花费一定的时间和精力去搜集处理数据<br>利用现有数据进行扩充或许也是一个好办法。例如在图像识别中，如果没有足够的图片训练，可以把已有的图片进行旋转，拉伸，镜像，对称等，这样就可以把数据量扩大好几倍而不需要额外补充数据<br>注意保证训练数据的分布和测试数据的分布要保持一致，二者要是分布完全不同，那模型预测真可谓是对牛弹琴了<br>2.使用正则化约束<br>在代价函数后面添加正则化项，可以避免训练出来的参数过大从而使模型过拟合。使用正则化缓解过拟合的手段广泛应用，不论是在线性回归还是在神经网络的梯度下降计算过程中，都应用到了正则化的方法。常用的正则化有l1正则和l2正则，具体使用哪个视具体情况而定，一般l2正则应用比较多<br>3.减少特征数<br>欠拟合需要增加特征数，那么过拟合自然就要减少特征数。去除那些非共性特征，可以提高模型的泛化能力<br>4.调整参数和超参数<br>不论什么情况，调参是必须的<br>5.降低模型的复杂度<br>欠拟合要增加模型的复杂度，那么过拟合正好反过来<br>6.使用Dropout<br>这一方法只适用于神经网络中，即按一定的比例去除隐藏层的神经单元，使神经网络的结构简单化<br>7.提前结束训练<br>即early stopping，在模型迭代训练时候记录训练精度(或损失)和验证精度(或损失)，倘若模型训练的效果不再提高，比如训练误差一直在降低但是验证误差却不再降低甚至上升，这时候便可以结束模型训练了</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>豆瓣电影助手</title>
      <link href="/2020/03/31/%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E5%8A%A9%E6%89%8B/"/>
      <url>/2020/03/31/%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E5%8A%A9%E6%89%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="豆瓣电影助手"><a href="#豆瓣电影助手" class="headerlink" title="豆瓣电影助手"></a><strong>豆瓣电影助手</strong></h1><ul><li><p><strong>为用户爬取豆瓣电影详细信息</strong></p></li><li><p><strong>列出相关资源地址，比如观影地址和网盘</strong>，<strong>并实现跳转</strong></p></li><li><p><strong>数据存储</strong></p></li></ul><h2 id="一-实现思路"><a href="#一-实现思路" class="headerlink" title="一.实现思路"></a>一.实现思路</h2><ul><li><p>排行榜爬取</p><p><img alt data-src="https://s1.ax1x.com/2020/03/31/GQo29K.png" class="lazyload"></p><p>​    首先Chorme F12，按照图示依次点击，逐渐下滑页面可以发现是动态刷新的，并且点击preview有相应的json数据。</p><p>​    由此我们便可得出爬取页面的数据，相应得出代码中的url：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">url = <span class="string">'https://movie.douban.com/j/chart/top_list?type='</span> + str(</span><br><span class="line">            typeId) + <span class="string">'&amp;interval_id=100:90&amp;action=unwatched&amp;start=0&amp;limit='</span> + str(movie_count)</span><br></pre></td></tr></table></figure></li><li><p>关键字爬取</p><p>这次操作可不能像排行榜那样进行爬取了，因为关键字搜索页面没有jsondata，所以我们只能用最普通的方式进行爬取，也就是分析网页标签的方式进行爬取。</p><p><img alt data-src="https://s1.ax1x.com/2020/03/31/GQoXjg.png" class="lazyload"></p></li></ul><p>诸如其上的 “href” “rating_nums” “meta abstract”等。</p><p>​    数据爬取之后，接下来就是一些数据的存储和转化，此处不再赘述。</p><p>二.效果展示</p><p>​    主界面</p><p>​        <img alt data-src="https://s1.ax1x.com/2020/03/31/GQoR1O.png" class="lazyload"></p><ul><li><p>​    排行榜查询</p><p>可以添加类型，数量，评分，评价人数等限定</p></li><li><p>关键字查询</p><p>直接查询影片名称，并返回和其相似的电影</p></li></ul><p>我爬取的数据来源于豆瓣官方，所以我能爬取到的排行榜最大数据等同于官网数据：</p><p><img alt="爬取数据" data-src="https://s1.ax1x.com/2020/03/31/GQoyA1.png" class="lazyload"></p><p><img alt="豆瓣官网" data-src="https://s1.ax1x.com/2020/03/31/GQb12V.png" class="lazyload"></p><p>可以看到本地数据和官网数据针对”剧情“片，均为686条。</p><ul><li><p>云盘和在线观看</p><p>​    <img alt data-src="https://s1.ax1x.com/2020/03/31/GQo5Bd.png" class="lazyload"></p><p>双击可直接跳转到此电影对应的网盘和观影页面。</p><p><img alt data-src="https://s1.ax1x.com/2020/03/31/GQoH4P.png" class="lazyload"></p></li></ul><p><img alt data-src="https://s1.ax1x.com/2020/03/31/GQoTAI.png" class="lazyload"></p><ul><li><p>无gui版</p><p>​    <img alt data-src="https://s1.ax1x.com/2020/03/31/GQofje.png" class="lazyload"></p></li><li><p>数据存储</p><p><img alt data-src="https://s1.ax1x.com/2020/03/31/GQoL38.png" class="lazyload"></p><p><img alt data-src="https://s1.ax1x.com/2020/03/31/GQo6tx.png" class="lazyload"></p></li></ul><p>此处，附上无gui版本代码</p><p>（若想运行此代码，需要安装相应库和Chrome dirver）</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> ssl <span class="keyword">import</span> _create_unverified_context</span><br><span class="line"><span class="keyword">from</span> json <span class="keyword">import</span> loads</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"><span class="keyword">import</span> tkinter.messagebox</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line">movieData = <span class="string">' ['</span> \</span><br><span class="line">            <span class="string">'&#123;"title":"纪录片", "type":"1", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"传记", "type":"2", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"犯罪", "type":"3", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"历史", "type":"4", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"动作", "type":"5", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"情色", "type":"6", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"歌舞", "type":"7", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"儿童", "type":"8", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"悬疑", "type":"10", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"剧情", "type":"11", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"灾难", "type":"12", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"爱情", "type":"13", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"音乐", "type":"14", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"冒险", "type":"15", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"奇幻", "type":"16", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"科幻", "type":"17", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"运动", "type":"18", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"惊悚", "type":"19", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"恐怖", "type":"20", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"战争", "type":"22", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"短片", "type":"23", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"喜剧", "type":"24", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"动画", "type":"25", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"同性", "type":"26", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"西部", "type":"27", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"家庭", "type":"28", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"武侠", "type":"29", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"古装", "type":"30", "interval_id":"100:90"&#125;, '</span> \</span><br><span class="line">            <span class="string">' &#123;"title":"黑色电影", "type":"31", "interval_id":"100:90"&#125;'</span> \</span><br><span class="line">            <span class="string">']'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">getMovieInRankingList</span>:</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        chrome_options = Options()</span><br><span class="line">        chrome_options.add_argument(<span class="string">'--headless'</span>) </span><br><span class="line">        chrome_options.add_argument(</span><br><span class="line">            <span class="string">'user-agent="Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36"'</span>)  <span class="comment"># 设置user=agent</span></span><br><span class="line">        chrome_options.add_experimental_option(<span class="string">'excludeSwitches'</span>,[<span class="string">'enable-automation'</span>])  </span><br><span class="line">        chrome_options.add_experimental_option(<span class="string">"prefs"</span>,&#123;<span class="string">"profile.managed_default_content_settings.images"</span>: <span class="number">2</span>&#125;) </span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            self.browser = webdriver.Chrome(executable_path=<span class="string">'C:\chromedriver_win32\chromedriver.exe'</span>,options=chrome_options)  </span><br><span class="line">            self.wait = WebDriverWait(self.browser, <span class="number">10</span>)  </span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            print(<span class="string">"chromedriver.exe出错，请检查是否与你的chrome浏览器版本相匹配\n缺失chromedriver.exe不会导致从排行榜搜索功能失效，但会导致从关键字搜索功能失效"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_url_data_in_ranking_list</span><span class="params">(self, typeId,title, movie_count, rating, vote_count)</span>:</span></span><br><span class="line">        context = _create_unverified_context()  </span><br><span class="line">        headers = &#123;<span class="comment">#伪装UA绕过检测</span></span><br><span class="line">            <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36'</span>, &#125;</span><br><span class="line">        url = <span class="string">'https://movie.douban.com/j/chart/top_list?type='</span> + str(</span><br><span class="line">            typeId) + <span class="string">'&amp;interval_id=100:90&amp;action=unwatched&amp;start=0&amp;limit='</span> + str(movie_count) <span class="comment">#此url可经F12分析出</span></span><br><span class="line"></span><br><span class="line">        req = urllib.request.Request(url=url, headers=headers)</span><br><span class="line">        f = urllib.request.urlopen(req, context=context)</span><br><span class="line">        response = f.read()</span><br><span class="line">        jsonData = loads(response) </span><br><span class="line"></span><br><span class="line">        list = []</span><br><span class="line">        <span class="keyword">for</span> subData <span class="keyword">in</span> jsonData:</span><br><span class="line">            <span class="keyword">if</span> ((float(subData[<span class="string">'rating'</span>][<span class="number">0</span>]) &gt;= float(rating))<span class="keyword">and</span>(float(subData[<span class="string">'vote_count'</span>])&gt;=float(vote_count))):</span><br><span class="line">                subList = []</span><br><span class="line">                subList.append(subData[<span class="string">'title'</span>])</span><br><span class="line">                subList.append(subData[<span class="string">'rating'</span>][<span class="number">0</span>])</span><br><span class="line">                subList.append(subData[<span class="string">'rank'</span>])</span><br><span class="line">                subList.append(subData[<span class="string">'vote_count'</span>])</span><br><span class="line">                list.append(subList)</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> list:</span><br><span class="line">            print(data)</span><br><span class="line">        </span><br><span class="line">        f = open(<span class="string">"./"</span> + title+ <span class="string">"_"</span>+rating+<span class="string">"_"</span>+vote_count+<span class="string">".txt"</span>, <span class="string">"w"</span>, encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">        sample_list = [str(line) + <span class="string">'\n'</span> <span class="keyword">for</span> line <span class="keyword">in</span> list]</span><br><span class="line">        f.writelines(sample_list)</span><br><span class="line">        f.close()</span><br><span class="line">        print(<span class="string">'共爬取到'</span> + str(list.__len__()) + <span class="string">'条数据'</span>)</span><br><span class="line">        <span class="keyword">return</span> list, jsonData</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 从关键字获取电影数据</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_url_data_in_keyWord</span><span class="params">(self, key_word)</span>:</span></span><br><span class="line">        <span class="comment"># 浏览网页</span></span><br><span class="line">        self.browser.get(<span class="string">'https://movie.douban.com/subject_search?search_text='</span> + urllib.parse.quote(</span><br><span class="line">            key_word) + <span class="string">'&amp;cat=1002'</span>)  <span class="comment"># get方式获取返回数据</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        self.wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, <span class="string">'.root'</span>)))</span><br><span class="line"></span><br><span class="line">        dr = self.browser.find_elements_by_xpath(<span class="string">"//div[@class='item-root']"</span>)  <span class="comment"># 获取class为item-root的DIV(因为有多个结果)</span></span><br><span class="line">        jsonData = []</span><br><span class="line">        list = []</span><br><span class="line">        <span class="keyword">for</span> son <span class="keyword">in</span> dr:</span><br><span class="line">            movieData = &#123;<span class="string">'rating'</span>: [<span class="string">''</span>, <span class="string">'null'</span>], <span class="string">'cover_url'</span>: <span class="string">''</span>, <span class="string">'types'</span>: <span class="string">''</span>, <span class="string">'title'</span>: <span class="string">''</span>, <span class="string">'url'</span>: <span class="string">''</span>,</span><br><span class="line">                         <span class="string">'release_date'</span>: <span class="string">''</span>, <span class="string">'vote_count'</span>: <span class="string">''</span>, <span class="string">'actors'</span>: <span class="string">''</span>&#125;</span><br><span class="line">            subList = [<span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>, <span class="string">''</span>]</span><br><span class="line"></span><br><span class="line">            url_element = son.find_elements_by_xpath(<span class="string">".//a"</span>)  <span class="comment"># 获取第一个a标签的url(因为有多个结果)</span></span><br><span class="line">            <span class="keyword">if</span> (url_element):</span><br><span class="line">                movieData[<span class="string">'url'</span>] = (url_element[<span class="number">0</span>].get_attribute(<span class="string">"href"</span>))</span><br><span class="line"></span><br><span class="line">            img_url_element = url_element[<span class="number">0</span>].find_elements_by_xpath(<span class="string">".//img"</span>)  <span class="comment"># 获取影片海报图片地址</span></span><br><span class="line">            <span class="keyword">if</span> (img_url_element):</span><br><span class="line">                movieData[<span class="string">'cover_url'</span>] = (img_url_element[<span class="number">0</span>].get_attribute(<span class="string">"src"</span>))</span><br><span class="line"></span><br><span class="line">            title_element = son.find_elements_by_xpath(<span class="string">".//div[@class='title']"</span>)  <span class="comment"># 获取标题</span></span><br><span class="line">            <span class="keyword">if</span> (title_element):</span><br><span class="line">                temp_title = (title_element[<span class="number">0</span>].text)</span><br><span class="line">                movieData[<span class="string">'title'</span>] = (temp_title.split(<span class="string">'('</span>))[<span class="number">0</span>]</span><br><span class="line">                movieData[<span class="string">'release_date'</span>] = temp_title[temp_title.find(<span class="string">'('</span>) + <span class="number">1</span>:temp_title.find(<span class="string">')'</span>)]</span><br><span class="line">                subList[<span class="number">0</span>] = movieData[<span class="string">'title'</span>]</span><br><span class="line"></span><br><span class="line">            rating_element = son.find_elements_by_xpath(<span class="string">".//span[@class='rating_nums']"</span>)  <span class="comment"># 获取评分</span></span><br><span class="line">            <span class="keyword">if</span> (rating_element):</span><br><span class="line">                movieData[<span class="string">'rating'</span>][<span class="number">0</span>] = (rating_element[<span class="number">0</span>].text)</span><br><span class="line">                subList[<span class="number">1</span>] = movieData[<span class="string">'rating'</span>][<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">            vote_element = son.find_elements_by_xpath(<span class="string">".//span[@class='pl']"</span>)  <span class="comment"># 获取评价数</span></span><br><span class="line">            <span class="keyword">if</span> (vote_element):</span><br><span class="line">                movieData[<span class="string">'vote_count'</span>] = (vote_element[<span class="number">0</span>].text).replace(<span class="string">'('</span>, <span class="string">''</span>).replace(<span class="string">')'</span>, <span class="string">''</span>).replace(<span class="string">'人评价'</span>, <span class="string">''</span>)</span><br><span class="line">                subList[<span class="number">3</span>] = movieData[<span class="string">'vote_count'</span>]</span><br><span class="line"></span><br><span class="line">            type_element = son.find_elements_by_xpath(<span class="string">".//div[@class='meta abstract']"</span>)  <span class="comment"># 获取类型</span></span><br><span class="line">            <span class="keyword">if</span> (type_element):</span><br><span class="line">                movieData[<span class="string">'types'</span>] = (type_element[<span class="number">0</span>].text)</span><br><span class="line">                subList[<span class="number">2</span>] = movieData[<span class="string">'types'</span>]</span><br><span class="line"></span><br><span class="line">            actors_element = son.find_elements_by_xpath(<span class="string">".//div[@class='meta abstract_2']"</span>)  <span class="comment"># 获取演员</span></span><br><span class="line">            <span class="keyword">if</span> (actors_element):</span><br><span class="line">                movieData[<span class="string">'actors'</span>] = (actors_element[<span class="number">0</span>].text)</span><br><span class="line"></span><br><span class="line">            jsonData.append(movieData)</span><br><span class="line">            list.append(subList)</span><br><span class="line">        self.browser.quit()</span><br><span class="line">        <span class="keyword">for</span> data <span class="keyword">in</span> list:</span><br><span class="line">            print(data)</span><br><span class="line">        print(<span class="string">'共爬取到'</span>+str(list.__len__())+<span class="string">'条数据'</span>)</span><br><span class="line">        f = open(<span class="string">"./"</span> +key_word+<span class="string">".txt"</span>, <span class="string">"w"</span>,encoding=<span class="string">"utf-8"</span>)</span><br><span class="line">        sample_list = [str(line)+<span class="string">'\n'</span> <span class="keyword">for</span> line <span class="keyword">in</span> list]</span><br><span class="line">        f.writelines(sample_list)</span><br><span class="line">        f.close()</span><br><span class="line">        <span class="keyword">return</span> list, jsonData</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">BinarySearch</span><span class="params">(strs,filename)</span>:</span></span><br><span class="line">    f = open(filename,<span class="string">"r"</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">    line = f.readline()</span><br><span class="line">    cnt = <span class="number">0</span></span><br><span class="line">    dic = &#123;&#125;</span><br><span class="line">    list = []</span><br><span class="line">    <span class="keyword">while</span> line:</span><br><span class="line">        line = line[<span class="number">2</span>:line.find(<span class="string">"'"</span>,<span class="number">2</span>)]</span><br><span class="line">        line = line.rstrip()</span><br><span class="line">        dic[line] = cnt</span><br><span class="line">        cnt = cnt+<span class="number">1</span></span><br><span class="line">        line = f.readline()</span><br><span class="line">    low = <span class="number">0</span></span><br><span class="line">    high = cnt<span class="number">-1</span></span><br><span class="line">    flag = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> key <span class="keyword">in</span> dic.keys():</span><br><span class="line">        <span class="keyword">if</span> key == strs:</span><br><span class="line">            flag = <span class="number">1</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"不存在这部电影"</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> low &lt;= high:</span><br><span class="line">        mid = (low+high)/<span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> dic[strs] &lt; mid:</span><br><span class="line">            high = mid - <span class="number">1</span></span><br><span class="line">        <span class="keyword">elif</span> dic[strs] &gt; mid:</span><br><span class="line">            low = mid +<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">'找到电影，其在对应文件的行号为'</span> ,int(mid+<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    print(<span class="string">'**************1.排行榜爬取***************'</span>)</span><br><span class="line">    print(<span class="string">'**************2.电影名称爬取**************'</span>)</span><br><span class="line">    print(<span class="string">'**************3.退出********************'</span>)</span><br><span class="line">    choice = input(<span class="string">'请选择'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> choice != <span class="string">'3'</span>:</span><br><span class="line">        <span class="keyword">if</span>(choice == <span class="string">'2'</span>):</span><br><span class="line">            print(<span class="string">'蜘蛛侠即将到达战场，请稍等···'</span>)</span><br><span class="line">            movie = getMovieInRankingList()</span><br><span class="line">            moviename = input(<span class="string">"请输入要爬取的电影的名称:"</span>)</span><br><span class="line">            print(<span class="string">'数据爬取并写入文件，请等待···'</span>)</span><br><span class="line">            movie.get_url_data_in_keyWord(moviename)</span><br><span class="line">            strs = input(<span class="string">'请输入搜索的电影名称（二分查找）:'</span>)</span><br><span class="line">            filename = moviename+<span class="string">'.txt'</span></span><br><span class="line">            res = BinarySearch(strs,filename)</span><br><span class="line">            print(<span class="string">'------------------------------------------------'</span>)</span><br><span class="line">        <span class="keyword">elif</span>(choice == <span class="string">'1'</span>): <span class="comment">#若运行choice == 1此部分请参照代码顶部的movieData表</span></span><br><span class="line">            <span class="comment">#typeId, title, movie_count, rating, vote_count</span></span><br><span class="line">            print(<span class="string">'蜘蛛侠即将到达战场，请稍等···'</span>)</span><br><span class="line">            movie = getMovieInRankingList()</span><br><span class="line">            typeId = input(<span class="string">'请输入类型：'</span>)</span><br><span class="line">            title = input(<span class="string">'请输入电影类别：'</span>)</span><br><span class="line">            movie_count = input(<span class="string">'请输入爬取数量：'</span>)</span><br><span class="line">            rating = input(<span class="string">'请输入评分：'</span>)</span><br><span class="line">            vote_count = input(<span class="string">'请输入评论数：'</span>)</span><br><span class="line">            movie.get_url_data_in_ranking_list(typeId,title,movie_count,rating,vote_count)</span><br><span class="line">            print(<span class="string">'数据爬取并写入文件，请等待···'</span>)</span><br><span class="line">            print(<span class="string">'------------------------------------------------'</span>)</span><br><span class="line"></span><br><span class="line">        choice = input(<span class="string">'请选择'</span>)</span><br></pre></td></tr></table></figure><p>gui版本代码大概有600 多行 ，太长了，此处不予公示示（手动狗头）</p><p>这个tkinter 没有我的qt好使（再次狗头）</p><p>（tkinter 对于gui要求不高的还可，优点是效率较pyqt和wxpython高，缺点是一个字<strong>丑</strong>）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
            <tag> tkinter </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构课设实验一之学生信息管理系统</title>
      <link href="/2020/03/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E8%AE%BE%E5%AE%9E%E9%AA%8C%E4%B8%80%E4%B9%8B%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/03/29/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E8%AE%BE%E5%AE%9E%E9%AA%8C%E4%B8%80%E4%B9%8B%E5%AD%A6%E7%94%9F%E4%BF%A1%E6%81%AF%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="主要功能"><a href="#主要功能" class="headerlink" title="主要功能"></a>主要功能</h1><p>（1） 为了模拟专业软件的启动ui，我添加了一个一秒的缓冲界面</p><p>​      （如图所示，打开软件会将弹出一个这样的缓冲界面）</p><p> <img alt="img" data-src="https://s1.ax1x.com/2020/03/29/GETPMV.jpg" class="lazyload"></p><p>（2）主界面</p><p><img alt="主界面" data-src="https://s1.ax1x.com/2020/03/29/GETp2q.png" class="lazyload"></p><p>（3）窗口顶部和底部</p><p> <img alt="窗口美化" data-src="https://s1.ax1x.com/2020/03/29/GEozPs.png" class="lazyload"></p><p>​    为了美化窗口，我将windows传统的窗口顶部栏目隐藏，因为它比较丑陋，但是隐藏之后，我就遇到了新的问题，无法拖动界面，需要重写对鼠标事件对界面的监听，这是一个特殊处理。</p><p>​    底部添加了对考试人数的计算。</p><p>（4）工具栏</p><p><img alt="工具栏" data-src="https://s1.ax1x.com/2020/03/29/GEov5j.png" class="lazyload"></p><p>可以看到有增删改查等功能</p><p><strong>（5）接下来依次验证各项功能</strong></p><p><strong>例如使用模糊查询查询“蔡”，结果如下：</strong></p><p><strong><img alt="模糊查询" data-src="https://s1.ax1x.com/2020/03/29/GETSGn.png" class="lazyload">**</strong>如果不含有这名学生，则会弹出提示窗口：**</p><p><strong><img alt="img" data-src="https://s1.ax1x.com/2020/03/29/GETirT.png" class="lazyload"></strong></p><p><strong>下面来进行精确查询：</strong></p><p><strong>只有打出学生姓名的时候才会出现查阅结果，否则会同上弹出警告</strong></p><p><strong><img alt="精确查询" data-src="https://s1.ax1x.com/2020/03/29/GETFqU.png" class="lazyload"></strong></p><p><strong>接下来展示编辑功能，为了防止用户失误操作，我将表格设置成了不可edit的状态，只有点击工具栏上的编辑功能，才可对表格进行编辑，修改之后，可以点击编辑旁边的保存按钮，保存修改结果。如上图所示，皎月女神性别原来为女，接下来把他的性别改为男。</strong></p><p>​                                                                                         </p><p>​                   <strong><img alt="编辑" data-src="https://s1.ax1x.com/2020/03/29/GETAZF.png" class="lazyload"></strong>         </p><p>我们可以看到，性别被成功修改了。</p><p>（6）添加功能                        </p><p>   此时会出现一个二级页面。</p><p><img alt="添加" data-src="https://s1.ax1x.com/2020/03/29/GETEa4.png" class="lazyload"> </p><p>  点击保存之后，效果如下：</p><p>  ·首先弹出提示窗口</p><p><font size="10" color="purple">（ps:我不写了累死了）</font></p><h1 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h1><p><a href="https://github.com/superzhaoyang/Student-Manage-System" target="_blank" rel="noopener">https://github.com/superzhaoyang/Student-Manage-System</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL之set</title>
      <link href="/2020/03/28/STL%E4%B9%8Bset/"/>
      <url>/2020/03/28/STL%E4%B9%8Bset/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><font face="微软雅黑" color="purple" size="10">c++ set的用法</font></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//set 的迭代器是只读迭代器（const iterator)</span></span><br><span class="line"><span class="comment">//multiset允许值重复 set 和multiset 的底层实现是红黑树</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"pch.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printset</span><span class="params">(<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &amp;s)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it = s.begin(); it != s.end(); it++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//关联性容器</span></span><br><span class="line"><span class="comment">//插入数据自动排序</span></span><br><span class="line"><span class="comment">//只能用insert插入值</span></span><br><span class="line"><span class="comment">//erase可以传值或者是迭代器</span></span><br><span class="line"><span class="comment">//find()返回值是迭代器</span></span><br><span class="line"><span class="comment">//count对于set而言 结果就是0或者1</span></span><br><span class="line"><span class="comment">//lower_bound 和 upper_bound</span></span><br><span class="line"><span class="comment">//upper_bound(keyelem)返回第一个 key &gt; keyelem的元素迭代器</span></span><br><span class="line"><span class="comment">//lower_bound(keyelem) 返回第一个key&gt;= keyelem 的元素的迭代器</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s1;</span><br><span class="line">s1.insert(<span class="number">5</span>);</span><br><span class="line">s1.insert(<span class="number">1</span>);</span><br><span class="line">s1.insert(<span class="number">9</span>);</span><br><span class="line">s1.insert(<span class="number">7</span>);</span><br><span class="line">s1.insert(<span class="number">3</span>);</span><br><span class="line">printset(s1);</span><br><span class="line"><span class="keyword">if</span> (s1.empty())</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"empty"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"s1.size:"</span> &lt;&lt;s1.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s1.erase(s1.begin());</span><br><span class="line">printset(s1);</span><br><span class="line">s1.erase(<span class="number">7</span>);</span><br><span class="line">printset(s1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//对于set，没有value key就是value</span></span><br><span class="line"><span class="comment">//find函数查找key是否存在，如果存在返回迭代器，如果不存再返回end（）</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s1;</span><br><span class="line">s1.insert(<span class="number">5</span>);</span><br><span class="line">s1.insert(<span class="number">1</span>);</span><br><span class="line">s1.insert(<span class="number">9</span>);</span><br><span class="line">s1.insert(<span class="number">7</span>);</span><br><span class="line">s1.insert(<span class="number">3</span>);</span><br><span class="line">printset(s1);</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator pos = s1.find(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (pos != s1.end()) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"find it"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" not find it"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it = pos; it != s1.end(); it++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//count查找key的元素个数 结果0 或者 1</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s1;</span><br><span class="line">s1.insert(<span class="number">5</span>);</span><br><span class="line">s1.insert(<span class="number">1</span>);</span><br><span class="line">s1.insert(<span class="number">9</span>);</span><br><span class="line">s1.insert(<span class="number">7</span>);</span><br><span class="line">s1.insert(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">int</span> num = s1.count(<span class="number">2</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//lower_bound(keyelem) 返回第一个key&gt;= keyelem 的元素的迭代器</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s1;</span><br><span class="line">s1.insert(<span class="number">5</span>);</span><br><span class="line">s1.insert(<span class="number">1</span>);</span><br><span class="line">s1.insert(<span class="number">9</span>);</span><br><span class="line">s1.insert(<span class="number">7</span>);</span><br><span class="line">s1.insert(<span class="number">3</span>);</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it = s1.lower_bound(<span class="number">3</span>);<span class="comment">//10找不到</span></span><br><span class="line"><span class="keyword">if</span> (it != s1.end())</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" find it"</span>&lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"not find it"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//upper_bound(keyelem)返回第一个 key &gt; keyelem的元素迭代器</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it2 = s1.upper_bound(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">if</span> (it2 != s1.end())</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" find it"</span> &lt;&lt; *it2&lt;&lt;  <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"not find it"</span> &lt;&lt; <span class="built_in">endl</span>; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//equal_range返回容器中key与keyelem相等的两个上下限迭代器</span></span><br><span class="line"><span class="comment">//下限就是lower_bound，上限是upper_bound()</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s1;</span><br><span class="line">s1.insert(<span class="number">5</span>);</span><br><span class="line">s1.insert(<span class="number">1</span>);</span><br><span class="line">s1.insert(<span class="number">9</span>);</span><br><span class="line">s1.insert(<span class="number">7</span>);</span><br><span class="line">s1.insert(<span class="number">3</span>);</span><br><span class="line">pair &lt;<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator, <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator&gt; ret = s1.equal_range(<span class="number">3</span>);<span class="comment">//对组</span></span><br><span class="line"><span class="keyword">if</span> (ret.first != s1.end())</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"找到equal_range的值"</span> &lt;&lt; *(ret.first) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"未找到"</span>;</span><br><span class="line"><span class="keyword">if</span> (ret.second != s1.end())</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"找到equal_range的值"</span> &lt;&lt; *(ret.second) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"未找到"</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s1;</span><br><span class="line">s1.insert(<span class="number">5</span>);</span><br><span class="line">pair&lt;<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator, <span class="keyword">bool</span> &gt; ret = s1.insert(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span> (ret.second)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"插入成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"插入失败"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">ret = s1.insert(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">if</span> (ret.second)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"第二次插入成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"第二次插入失败"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指定set的排序规则从大到小</span></span><br><span class="line"><span class="comment">//仿函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyCompare</span>//仿函数</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> v1, <span class="keyword">int</span> v2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> v1 &gt; v2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test07</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>,MyCompare&gt; s1;</span><br><span class="line">s1.insert(<span class="number">5</span>);</span><br><span class="line">s1.insert(<span class="number">1</span>);</span><br><span class="line">s1.insert(<span class="number">9</span>);</span><br><span class="line">s1.insert(<span class="number">7</span>);</span><br><span class="line">s1.insert(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">set</span>&lt;<span class="keyword">int</span>, MyCompare&gt;::iterator it = s1.begin(); it != s1.end(); it++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//从大到小排序</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义数据类型</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person(<span class="built_in">string</span> name, <span class="keyword">int</span> age) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;name = name;</span><br><span class="line"><span class="keyword">this</span>-&gt;age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">string</span> name;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mycompare</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">const</span> Person &amp; p1, <span class="keyword">const</span> Person &amp; p2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (p1.age &gt; p2.age) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test08</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">set</span>&lt;Person,Mycompare&gt; s1;</span><br><span class="line">Person p1 = &#123; <span class="string">"葫芦娃"</span>,<span class="number">60</span> &#125;;</span><br><span class="line"><span class="function">Person <span class="title">p2</span><span class="params">(<span class="string">"大娃娃"</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p3</span><span class="params">(<span class="string">"二娃娃"</span>, <span class="number">15</span>)</span></span>;</span><br><span class="line"><span class="function">Person <span class="title">p4</span><span class="params">(<span class="string">"三娃娃"</span>, <span class="number">10</span>)</span></span>;</span><br><span class="line">s1.insert(p1);</span><br><span class="line">s1.insert(p2);</span><br><span class="line">s1.insert(p3);</span><br><span class="line">s1.insert(p4);</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">set</span>&lt;Person, Mycompare&gt;::iterator it = s1.begin(); it != s1.end(); it++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"姓名："</span> &lt;&lt; (*it).name &lt;&lt; <span class="string">" 年龄："</span> &lt;&lt; (*it).age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test09</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; mul;</span><br><span class="line">mul.insert(<span class="number">1</span>);</span><br><span class="line">mul.insert(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> c : mul)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mytest</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line">s.insert(<span class="number">1</span>);</span><br><span class="line">s.insert(<span class="number">2</span>);</span><br><span class="line">s.insert(<span class="number">3</span>);</span><br><span class="line">s.insert(<span class="number">4</span>);</span><br><span class="line">pair &lt; <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator, <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator&gt; res = s.equal_range(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test09();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> c++ </tag>
            
            <tag> set </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL之string</title>
      <link href="/2020/03/28/STL%E4%B9%8Bstring/"/>
      <url>/2020/03/28/STL%E4%B9%8Bstring/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><font size="10" color="grenen" face="微软雅黑"><u>c++ vector的用法</u></font></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line">s.assign(<span class="string">"abcde"</span>, <span class="number">4</span>); <span class="comment">//assign赋值进行截取个前</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">char</span> *p = (<span class="keyword">char</span>*) <span class="string">"hello world"</span>;</span><br><span class="line">s.assign(p, <span class="number">10</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s.assign(s, <span class="number">2</span>, <span class="number">5</span>); <span class="comment">//从第二个开始截取5个数。</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//s = s.substr(2,5); //从第几个开始截取几个数 和assign一样</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; s;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> s = <span class="string">"hello world"</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.size(); ++i)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.at(i) &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.at(<span class="number">100</span>);<span class="comment">//可以触发异常，不会报错，但是貌似没啥大用 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (out_of_range &amp;e) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"异常为"</span> &lt;&lt; e.what();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (...) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"捕获到其他异常"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> s = <span class="string">"我"</span>;</span><br><span class="line"><span class="built_in">string</span> s2 = <span class="string">"爱北京天安门"</span>;</span><br><span class="line">s.append(s2); <span class="comment">//相当于 +=</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//find查找</span></span><br><span class="line"><span class="built_in">string</span> s3 = <span class="string">"abcdefg"</span>;</span><br><span class="line"><span class="keyword">int</span> pos = s3.find(<span class="string">"bc"</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; pos &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">pos = s3.find(<span class="string">"bcf"</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; pos &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">pos = s3.find(<span class="string">"bc"</span>, <span class="number">2</span>);<span class="comment">//可加参数，不加默认是0；</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; pos &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">string</span> s4 = <span class="string">"12345656"</span>;</span><br><span class="line"><span class="comment">//int find(const char *s, int pos, int n) const;//从pos开始查找字符串s中前n个字符在当前串中的位置</span></span><br><span class="line"><span class="keyword">int</span> pos2 = s4.rfind(<span class="string">"56"</span>,s4.size()<span class="number">-1</span> <span class="number">-2</span>,<span class="number">1</span>);<span class="comment">//从pos开始从后向前</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; pos2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//替换</span></span><br><span class="line"><span class="built_in">string</span> s5 = <span class="string">"hello"</span>;</span><br><span class="line">s5.replace(<span class="number">1</span>, <span class="number">3</span>, <span class="string">"1111"</span>);<span class="comment">//从1开始的连续三个字符被替换成1111</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s5;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test04</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//(1)int compare(const basic_string&amp; __str)</span></span><br><span class="line"><span class="comment">//和str按字典序比较大小，若小于str返回小于0的值，若等于str返回0，若大于str返回大于0的值</span></span><br><span class="line"><span class="built_in">string</span> a = <span class="string">"e"</span>;</span><br><span class="line"><span class="built_in">string</span> b = <span class="string">"H"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a.compare(b);</span><br><span class="line"><span class="built_in">string</span> s = <span class="string">"aZ"</span>;</span><br><span class="line"><span class="built_in">string</span> s2 = <span class="string">"ab"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.compare(s2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//(2)int compare(size_type __pos, size_type __n, const basic_string&amp; __str)</span></span><br><span class="line"><span class="comment">//从pos位置开始长度为n的子字符串和str按字典序比较大小，返回值同上</span></span><br><span class="line">s = <span class="string">"helloworld"</span>;</span><br><span class="line">s2 = <span class="string">"rle"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.compare(<span class="number">7</span>, <span class="number">3</span>, s2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//(3)int compare(size_type __pos1, size_type __n1, const basic_string&amp; __str, size_type __pos2, size_type __n2)</span></span><br><span class="line"><span class="comment">//从pos1位置开始长度为n1的子字符串和str从pos2位置开始长度为n2的子字符串按字典序比较大小，返回值同上</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.compare(<span class="number">7</span>, <span class="number">3</span>, s2, <span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test05</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> s1 =<span class="string">"37987244@qq.com"</span>;</span><br><span class="line"><span class="built_in">string</span> s2 = s1.substr(<span class="number">0</span>, s1.find(<span class="string">"@"</span>));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test06</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> s1 = <span class="string">"hello"</span>;</span><br><span class="line">s1.insert(<span class="number">1</span>, <span class="string">"111"</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s1.erase(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="built_in">string</span> p)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test07</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> s = <span class="string">"abc"</span>;</span><br><span class="line"><span class="keyword">char</span> t[<span class="number">8</span>] = <span class="string">"helloo"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">char</span> *p = (<span class="keyword">char</span>*)s.c_str();<span class="comment">//c_str()生成一个const char*的指针</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//func(s);//string 不能隐式转化为char *</span></span><br><span class="line">func(p);<span class="comment">//char * 可以隐式转化为string</span></span><br><span class="line"><span class="built_in">string</span> s2 = p;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s2;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test08</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> s = <span class="string">"hello"</span>;</span><br><span class="line"><span class="keyword">char</span> &amp;a = s[<span class="number">2</span>];</span><br><span class="line"><span class="keyword">char</span> &amp;b = s[<span class="number">3</span>];</span><br><span class="line">a = <span class="string">'1'</span>;</span><br><span class="line">b = <span class="string">'2'</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span> &lt;&lt; (<span class="keyword">char</span>*)s.c_str();</span><br><span class="line">s = <span class="string">"ppppp"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">" "</span> &lt;&lt; b;<span class="comment">//此时可以继续使用a,b；</span></span><br><span class="line"><span class="comment">//s = "ppppppppppppppppppppp" 此时无法使用，因为编译器重新分配了一块内存；</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test08();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> string </tag>
            
            <tag> c++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL之vector</title>
      <link href="/2020/03/28/STL%E4%B9%8Bvector/"/>
      <url>/2020/03/28/STL%E4%B9%8Bvector/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="C-vector的用法（整理）"><a href="#C-vector的用法（整理）" class="headerlink" title="C++ vector的用法（整理）"></a>C++ vector的用法（整理）</h1><p><font size="10" face="微软雅黑" color="blue"> <u>c++ vector的用法</u></font></p><p>vector 是向量类型，它可以容纳许多类型的数据，如若干个整数，所以称其为容器。vector 是C++ STL的一个重要成员，使用它时需要包含头文件：</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;vector&gt;;</span><br></pre></td></tr></table></figure><p>一、vector 的初始化：可以有五种方式,举例说明如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"> (<span class="number">1</span>) <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(<span class="number">10</span>); <span class="comment">//定义了10个整型元素的向量（尖括号中为元素类型名，它可以是任何合法的数据类型），但没有给出初值，其值是不确定的。</span></span><br><span class="line">（<span class="number">2</span>）<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(<span class="number">10</span>,<span class="number">1</span>); <span class="comment">//定义了10个整型元素的向量,且给出每个元素的初值为1</span></span><br><span class="line">（<span class="number">3</span>）<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(b); <span class="comment">//用b向量来创建a向量，整体复制性赋值</span></span><br><span class="line">（<span class="number">4</span>）<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(b.begin(),b.begin+<span class="number">3</span>); <span class="comment">//定义了a值为b中第0个到第2个（共3个）元素</span></span><br><span class="line">（<span class="number">5</span>）<span class="keyword">int</span> b[<span class="number">7</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">9</span>,<span class="number">8</span>&#125;;</span><br><span class="line">     <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(b,b+<span class="number">7</span>); <span class="comment">//从数组中获得初值</span></span><br></pre></td></tr></table></figure><p>二、vector对象的几个重要操作，举例说明如下：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>）a.assign(b.begin(), b.begin()+<span class="number">3</span>); <span class="comment">//b为向量，将b的0~2个元素构成的向量赋给a</span></span><br><span class="line">    （<span class="number">2</span>）a.assign(<span class="number">4</span>,<span class="number">2</span>); <span class="comment">//是a只含4个元素，且每个元素为2</span></span><br><span class="line">    （<span class="number">3</span>）a.back(); <span class="comment">//返回a的最后一个元素</span></span><br><span class="line">    （<span class="number">4</span>）a.front(); <span class="comment">//返回a的第一个元素</span></span><br><span class="line">    （<span class="number">5</span>）a[i]; <span class="comment">//返回a的第i个元素，当且仅当a[i]存在2013-12-07</span></span><br><span class="line">    （<span class="number">6</span>）a.clear(); <span class="comment">//清空a中的元素</span></span><br><span class="line">    （<span class="number">7</span>）a.empty(); <span class="comment">//判断a是否为空，空则返回ture,不空则返回false</span></span><br><span class="line">    （<span class="number">8</span>）a.pop_back(); <span class="comment">//删除a向量的最后一个元素</span></span><br><span class="line">    （<span class="number">9</span>）a.erase(a.begin()+<span class="number">1</span>,a.begin()+<span class="number">3</span>); <span class="comment">//删除a中第1个（从第0个算起）到第2个元素，也就是说删除的元素从a.begin()+1算起（包括它）一直到a.begin()+         3（不包括它）</span></span><br><span class="line">    （<span class="number">10</span>）a.push_back(<span class="number">5</span>); <span class="comment">//在a的最后一个向量后插入一个元素，其值为5</span></span><br><span class="line">    （<span class="number">11</span>）a.insert(a.begin()+<span class="number">1</span>,<span class="number">5</span>); <span class="comment">//在a的第1个元素（从第0个算起）的位置插入数值5，如a为1,2,3,4，插入元素后为1,5,2,3,4</span></span><br><span class="line">    （<span class="number">12</span>）a.insert(a.begin()+<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>); <span class="comment">//在a的第1个元素（从第0个算起）的位置插入3个数，其值都为5</span></span><br><span class="line">    （<span class="number">13</span>）a.insert(a.begin()+<span class="number">1</span>,b+<span class="number">3</span>,b+<span class="number">6</span>); <span class="comment">//b为数组，在a的第1个元素（从第0个算起）的位置插入b的第3个元素到第5个元素（不包括b+6），如b为1,2,3,4,5,9,8         ，插入元素后为1,4,5,9,2,3,4,5,9,8</span></span><br><span class="line">    （<span class="number">14</span>）a.size(); <span class="comment">//返回a中元素的个数；</span></span><br><span class="line">    （<span class="number">15</span>）a.capacity(); <span class="comment">//返回a在内存中总共可以容纳的元素个数</span></span><br><span class="line">    （<span class="number">16</span>）a.resize(<span class="number">10</span>); <span class="comment">//将a的现有元素个数调至10个，多则删，少则补，其值随机</span></span><br><span class="line">    （<span class="number">17</span>）a.resize(<span class="number">10</span>,<span class="number">2</span>); <span class="comment">//将a的现有元素个数调至10个，多则删，少则补，其值为2</span></span><br><span class="line">    （<span class="number">18</span>）a.reserve(<span class="number">100</span>); <span class="comment">//将a的容量（capacity）扩充至100，也就是说现在测试a.capacity();的时候返回值是100.这种操作只有在需要给a添加大量数据的时候才         显得有意义，因为这将避免内存多次容量扩充操作（当a的容量不足时电脑会自动扩容，当然这必然降低性能） </span></span><br><span class="line">    （<span class="number">19</span>）a.swap(b); <span class="comment">//b为向量，将a中的元素和b中的元素进行整体性交换</span></span><br><span class="line">    （<span class="number">20</span>）a==b; <span class="comment">//b为向量，向量的比较操作还有!=,&gt;=,&lt;=,&gt;,&lt;</span></span><br></pre></td></tr></table></figure><p>三、顺序访问vector的几种方式，举例说明如下：<br>（1）向向量a中添加元素<br>1、</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>  <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"><span class="number">2</span> <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line"><span class="number">3</span> a.push_back(i);</span><br></pre></td></tr></table></figure><p>2、也可以从数组中选择元素向向量中添加</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">6</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b；</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">4</span>;i++)</span><br><span class="line">b.push_back(a[i]);</span><br></pre></td></tr></table></figure><p>3、也可以从现有向量中选择元素向向量中添加</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">6</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; c(a,a+<span class="number">4</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it=c.begin();it&lt;c.end();it++)</span><br><span class="line">b.push_back(*it);</span><br></pre></td></tr></table></figure><p>4、也可以从文件中读取元素向向量中添加</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">ifstream <span class="title">in</span><span class="params">(<span class="string">"data.txt"</span>)</span></span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i; in&gt;&gt;i)</span><br><span class="line">    a.push_back(i);</span><br></pre></td></tr></table></figure><p>5、【误区】</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    a[i]=i;</span><br></pre></td></tr></table></figure><p>//这种做法以及类似的做法都是错误的。刚开始我也犯过这种错误，后来发现，下标只能用于获取已存在的元素，而现在的a[i]还是空的对象</p><p>//如果想要这样进行赋值，则必须先给a开辟控件；</p><p>例如：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; a(<span class="number">10</span>);</span><br><span class="line"><span class="comment">//或者</span></span><br><span class="line">a.resize(<span class="number">10</span>);</span><br></pre></td></tr></table></figure><p>（2）从向量中读取元素<br>1、通过下标方式读取</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">6</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b(a,a+<span class="number">4</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=b.size()<span class="number">-1</span>;i++)</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;b[i]&lt;&lt;<span class="string">" "</span>;</span><br></pre></td></tr></table></figure><p>2、通过遍历器方式读取</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[<span class="number">6</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; b(a,a+<span class="number">4</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it=b.begin();it!=b.end();it++)</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;*it&lt;&lt;<span class="string">" "</span>;</span><br></pre></td></tr></table></figure><p>四、几种重要的算法，使用时需要包含头文件：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line">（<span class="number">1</span>）sort(a.begin(),a.end()); <span class="comment">//对a中的从a.begin()（包括它）到a.end()（不包括它）的元素进行从小到大排列</span></span><br><span class="line">（<span class="number">2</span>）reverse(a.begin(),a.end()); <span class="comment">//对a中的从a.begin()（包括它）到a.end()（不包括它）的元素倒置，但不排列，如a中元素为1,3,2,4,倒置后为4,2,3,1</span></span><br><span class="line">（<span class="number">3</span>）copy(a.begin(),a.end(),b.begin()+<span class="number">1</span>); <span class="comment">//把a中的从a.begin()（包括它）到a.end()（不包括它）的元素复制到b中，从b.begin()+1的位置（包括它）开        始复制，覆盖掉原有元素</span></span><br><span class="line">（<span class="number">4</span>）find(a.begin(),a.end(),<span class="number">10</span>); <span class="comment">//在a中的从a.begin()（包括它）到a.end()（不包括它）的元素中查找10，若存在返回其在向量中的位置</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> STL </tag>
            
            <tag> vector </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>qt连接sql</title>
      <link href="/2020/03/28/qt%E8%BF%9E%E6%8E%A5sql/"/>
      <url>/2020/03/28/qt%E8%BF%9E%E6%8E%A5sql/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><font size="10" color="red">    首先向今天帮助我调试mysql的大哥@湖畔 同学致以诚挚的感谢</font></p><p>​       &ensp;&ensp;&ensp;我今天本打算用qt链接mysql的，但是折腾了一天，看了网上各种教程，无论结果怎样都是QMYSQL not loaded。我还专程向csdn 大佬@湖畔同学进行了请教，他花费了宝贵的时间来无私帮助我调试代码，虽然还是失败了，但是我还是在这里表示衷心的感谢。  </p><p>​        &ensp;&ensp;好了，下面来说说sql如何链接qt。</p><h2 id="qt连接sql-server-需要配置ODBC数据源"><a href="#qt连接sql-server-需要配置ODBC数据源" class="headerlink" title="qt连接sql server 需要配置ODBC数据源"></a>qt连接sql server 需要配置ODBC数据源</h2><p>一、数据源配置<br>&ensp;&ensp;控制面板 → 管理工具 → ODBC 数据源</p><p><img alt="搜素ODBC" data-src="https://s1.ax1x.com/2020/03/28/GFiqRU.png" class="lazyload"></p><p><img alt="选择SQL Server" data-src="https://s1.ax1x.com/2020/03/28/GFFdYV.png" class="lazyload"></p><p>&ensp;&ensp;数据源名称自起（等会儿代码中会用到）。<br>&ensp;&ensp;服务器输入要连接服务器名称。</p><p><img alt data-src="https://s1.ax1x.com/2020/03/28/GFFwWT.png" class="lazyload"></p><p>&ensp;&ensp;录入登录名，密码</p><p><img alt data-src="https://s1.ax1x.com/2020/03/28/GFFNoq.png" class="lazyload"></p><p>&ensp;&ensp;选择要操作的数据库</p><p><img alt data-src="https://s1.ax1x.com/2020/03/28/GFFaF0.png" class="lazyload"></p><p>&ensp;&ensp;完成</p><p><img alt data-src="https://s1.ax1x.com/2020/03/28/GFFBSU.png" class="lazyload"></p><p>&ensp;&ensp;测试数据库能否连接，出现测试成功则说明可以链接。</p><h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><h4 id="mainwindow-h"><a href="#mainwindow-h" class="headerlink" title="mainwindow.h"></a>mainwindow.h</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MAINWINDOW_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAINWINDOW_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QMainWindow&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QSqlQuery&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QSqlDatabase&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> Ui &#123;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span>;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainWindow</span> :</span> <span class="keyword">public</span> QMainWindow</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MainWindow</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line">    ~MainWindow();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> slots:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">on_pushButton_clicked</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    Ui::MainWindow *ui;</span><br><span class="line">    QSqlDatabase db;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MAINWINDOW_H</span></span></span><br></pre></td></tr></table></figure><h4 id="mainwindow-cpp"><a href="#mainwindow-cpp" class="headerlink" title="mainwindow.cpp"></a>mainwindow.cpp</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mainwindow.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ui_mainwindow.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QtDebug&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QSqlQuery&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QSqlDatabase&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QSqlError&gt;</span></span></span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent) :</span><br><span class="line">    QMainWindow(parent),</span><br><span class="line">    ui(<span class="keyword">new</span> Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(<span class="keyword">this</span>);</span><br><span class="line">    db = QSqlDatabase::addDatabase(<span class="string">"QODBC"</span>);</span><br><span class="line">    db.setHostName(<span class="string">"(local)"</span>);<span class="comment">//服务器名</span></span><br><span class="line">    QString dsn = QString::fromLocal8Bit(<span class="string">"mytest"</span>);</span><br><span class="line">    db.setDatabaseName(dsn);<span class="comment">//数据源名</span></span><br><span class="line">    db.setUserName(<span class="string">"sa"</span>);<span class="comment">//连接数据库用户名</span></span><br><span class="line">    db.setPassword(<span class="string">"superzhaoyang1"</span>);<span class="comment">//连接数据库密码</span></span><br><span class="line">    on_pushButton_clicked();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~MainWindow()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">delete</span> ui;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> MainWindow::on_pushButton_clicked()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(!db.open())</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">"database open faile!"</span>;</span><br><span class="line">        qDebug()&lt;&lt;db.lastError().text();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        qWarning()&lt;&lt;<span class="string">"database open success!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">QSqlQuery <span class="title">query</span><span class="params">(db)</span></span>;</span><br><span class="line">    QString str = <span class="string">"delete from test where id = '111';//根据你的数据表对这句话进行修改</span></span><br><span class="line"><span class="string">    if(query.exec(str))</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">       qDebug()&lt;&lt;"</span><span class="keyword">delete</span> sucess<span class="string">";</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    else</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">       qDebug()&lt;&lt;"</span>faile<span class="string">"&lt;&lt;query.lastError();</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>最后结果如下：</p><p><img alt data-src="https://s1.ax1x.com/2020/03/28/GFktje.png" class="lazyload"></p><p><img alt data-src="https://s1.ax1x.com/2020/03/28/GFkYcD.png" class="lazyload"></p><p>显示open success，并且id为“111”的内容确实被删除了。</p><p><font size="10" color="green">（注：如果在登陆那里出现sql state：什么乱七八糟的，则在sql中的安全性-登录名-sa上右键属性，在常规中设置密码，并点击状态选择登陆启用；继而在服务器上右键属性的安全性中选择SQL SERVER和windows身份认证模式）</font></p><ol><li><p>打开数据库——用Windows身份登录数据库</p><p><a href="http://jingyan.baidu.com/album/656db918faf80fe381249c1e.html?picindex=3" target="_blank" rel="noopener"><img alt="SQL2008.sa&#39;登录失败（错误18456）图文解决方法" data-src="https://imgsa.baidu.com/exp/w=500/sign=968055657fec54e741ec1a1e89399bfd/d009b3de9c82d1587b0081ea840a19d8bd3e42ef.jpg" class="lazyload"></a></p></li><li><p>登录名——双击sa（打开属性）</p><p><a href="http://jingyan.baidu.com/album/656db918faf80fe381249c1e.html?picindex=4" target="_blank" rel="noopener"><img alt="SQL2008.sa&#39;登录失败（错误18456）图文解决方法" data-src="https://imgsa.baidu.com/exp/w=500/sign=c7d6e44faf18972ba33a00cad6cc7b9d/f703738da9773912a4db5d3afc198618377ae2e8.jpg" class="lazyload"></a></p></li><li><p>常规——设置密码——确定</p><p><a href="http://jingyan.baidu.com/album/656db918faf80fe381249c1e.html?picindex=5" target="_blank" rel="noopener"><img alt="SQL2008.sa&#39;登录失败（错误18456）图文解决方法" data-src="https://imgsa.baidu.com/exp/w=500/sign=cfc7d891e2cd7b89e96c3a833f254291/b21bb051f81986182dba37df4eed2e738ad4e6e8.jpg" class="lazyload"></a></p></li><li><p>状态——登录：启用——确定</p><p><a href="http://jingyan.baidu.com/album/656db918faf80fe381249c1e.html?picindex=6" target="_blank" rel="noopener"><img alt="SQL2008.sa&#39;登录失败（错误18456）图文解决方法" data-src="https://imgsa.baidu.com/exp/w=500/sign=387359e4885494ee87220f191df4e0e1/d0c8a786c9177f3eaca4245674cf3bc79e3d56dd.jpg" class="lazyload"></a></p></li><li><p>右击服务器名——属性</p><p><a href="http://jingyan.baidu.com/album/656db918faf80fe381249c1e.html?picindex=7" target="_blank" rel="noopener"><img alt="SQL2008.sa&#39;登录失败（错误18456）图文解决方法" data-src="https://imgsa.baidu.com/exp/w=500/sign=9219a7862a738bd4c421b231918a876c/b3fb43166d224f4a6809ab480df790529922d1dd.jpg" class="lazyload"></a></p></li><li><p>安全性——选中 SQL Server 和 Windows 身份验证模式——确</p><p><a href="http://jingyan.baidu.com/album/656db918faf80fe381249c1e.html?picindex=8" target="_blank" rel="noopener"><img alt="SQL2008.sa&#39;登录失败（错误18456）图文解决方法" data-src="https://imgsa.baidu.com/exp/w=500/sign=449808b6e31190ef01fb92dffe1a9df7/32fa828ba61ea8d33cb2ac5f930a304e241f58dd.jpg" class="lazyload"></a></p></li><li><p>&#160; &#160; &#160; &#160;右击服务器名——重新启动——关闭数据库连接，退出程序——用sa登录到数据库——解决</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> qt </tag>
            
            <tag> sql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构课设实验三之文档检索器</title>
      <link href="/2020/03/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E8%AE%BE%E5%AE%9E%E9%AA%8C%E4%B8%89%E4%B9%8B%E6%96%87%E6%A1%A3%E6%A3%80%E7%B4%A2%E5%99%A8/"/>
      <url>/2020/03/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E8%AE%BE%E5%AE%9E%E9%AA%8C%E4%B8%89%E4%B9%8B%E6%96%87%E6%A1%A3%E6%A3%80%E7%B4%A2%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="数据结构课程设计三之文档检索器"><a href="#数据结构课程设计三之文档检索器" class="headerlink" title="数据结构课程设计三之文档检索器"></a>数据结构课程设计三之文档检索器</h3><ul><li><strong>自动输出行号列号</strong></li><li><strong>自动显示关键字的树木</strong></li><li><strong>模糊查询</strong></li><li><strong>自动定位所在的行号</strong></li><li><strong>输出文章字符数</strong></li></ul><div class="justified-gallery"><p><img alt data-src="https://s1.ax1x.com/2020/03/25/8vIxOK.png" class="lazyload"></p><p><img alt data-src="https://s1.ax1x.com/2020/03/25/8voZOf.png" class="lazyload"></p><p><img alt data-src="https://s1.ax1x.com/2020/03/25/8voPFH.png" class="lazyload"></p><p><img alt data-src="https://s1.ax1x.com/2020/03/25/8voV6P.png" class="lazyload"></p><p><img alt data-src="https://s1.ax1x.com/2020/03/25/8vomm8.png" class="lazyload"></p><p>字符数统计和word相同</p><p><img alt data-src="https://s1.ax1x.com/2020/03/25/8von0S.png" class="lazyload"></p>          </div>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 文档检索器 </tag>
            
            <tag> 串 </tag>
            
            <tag> QT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构课设实验五s之山威地图</title>
      <link href="/2020/03/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E8%AE%BE%E5%AE%9E%E9%AA%8C%E4%BA%94%E4%B9%8B%E5%B1%B1%E5%A8%81%E5%9C%B0%E5%9B%BE/"/>
      <url>/2020/03/25/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E8%AE%BE%E5%AE%9E%E9%AA%8C%E4%BA%94%E4%B9%8B%E5%B1%B1%E5%A8%81%E5%9C%B0%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="数据结构课程设计五之山威地图"><a href="#数据结构课程设计五之山威地图" class="headerlink" title="数据结构课程设计五之山威地图"></a><strong>数据结构课程设计五之山威地图</strong></h3><ul><li><p><strong>主界面</strong></p><p><img alt data-src="https://s1.ax1x.com/2020/03/25/8v4uTJ.png" class="lazyload"></p><p><strong>分为地图区域，操作区域，结果显示区域</strong></p></li></ul><ul><li><p><strong>地图伸缩</strong>       </p><p><img alt data-src="https://s1.ax1x.com/2020/03/25/8v4lf1.png" class="lazyload">   </p><p><strong>点击”＋“-”可伸缩地图</strong></p></li><li><p><strong>任意两点之间的最短路</strong></p><p><img alt data-src="https://s1.ax1x.com/2020/03/25/8v4QYR.png" class="lazyload"></p><p><strong>点击定点查询</strong></p></li><li><p><strong>找最近的服务</strong></p><p><img alt data-src="https://s1.ax1x.com/2020/03/25/8v4nw4.png" class="lazyload"></p><p><strong>点击同类查询</strong></p><p><img alt data-src="https://s1.ax1x.com/2020/03/25/8v4AS0.png" class="lazyload"></p></li><li><p><strong>程序下载</strong></p><p><strong><a href="https://github.com/superzhaoyang/sduwh_map" target="_blank" rel="noopener">https://github.com/superzhaoyang/sduwh_map</a></strong></p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> QT </tag>
            
            <tag> 山威地图 </tag>
            
            <tag> dijkstra </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RNN网络实战</title>
      <link href="/2020/03/24/RNN%E7%BD%91%E7%BB%9C%E5%AE%9E%E6%88%98/"/>
      <url>/2020/03/24/RNN%E7%BD%91%E7%BB%9C%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="run-py"><a href="#run-py" class="headerlink" title="run.py"></a>run.py</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> train_eval <span class="keyword">import</span> train, init_network</span><br><span class="line"><span class="keyword">from</span> importlib <span class="keyword">import</span> import_module</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">from</span> tensorboardX <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">'Chinese Text Classification'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--model'</span>, type=str, required=<span class="literal">True</span>, help=<span class="string">'choose a model: TextCNN, TextRNN, FastText, TextRCNN, TextRNN_Att, DPCNN, Transformer'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--embedding'</span>, default=<span class="string">'pre_trained'</span>, type=str, help=<span class="string">'random or pre_trained'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--word'</span>, default=<span class="literal">False</span>, type=bool, help=<span class="string">'True for word, False for char'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    dataset = <span class="string">'THUCNews'</span>  <span class="comment"># 数据集</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 搜狗新闻:embedding_SougouNews.npz, 腾讯:embedding_Tencent.npz,用此词嵌入进行训练 在rnn任务中利用现成的即可（对于大众化词汇） 随机初始化:random</span></span><br><span class="line">    embedding = <span class="string">'embedding_SougouNews.npz'</span></span><br><span class="line">    <span class="keyword">if</span> args.embedding == <span class="string">'random'</span>:</span><br><span class="line">        embedding = <span class="string">'random'</span></span><br><span class="line">    model_name = args.model  <span class="comment">#TextCNN, TextRNN,</span></span><br><span class="line">    <span class="keyword">if</span> model_name == <span class="string">'FastText'</span>:</span><br><span class="line">        <span class="keyword">from</span> utils_fasttext <span class="keyword">import</span> build_dataset, build_iterator, get_time_dif</span><br><span class="line">        embedding = <span class="string">'random'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">from</span> utils <span class="keyword">import</span> build_dataset, build_iterator, get_time_dif</span><br><span class="line"></span><br><span class="line">    x = import_module(<span class="string">'models.'</span> + model_name)</span><br><span class="line">    config = x.Config(dataset, embedding) <span class="comment">#装载embedding和dataset</span></span><br><span class="line">    np.random.seed(<span class="number">1</span>)                                   <span class="comment">#随机种子 保证每次运行的结果都</span></span><br><span class="line">    torch.manual_seed(<span class="number">1</span>)                                <span class="comment">#不变，即为控制变量思想，只看</span></span><br><span class="line">    torch.cuda.manual_seed_all(<span class="number">1</span>)                       <span class="comment">#参数带来的影响</span></span><br><span class="line">    torch.backends.cudnn.deterministic = <span class="literal">True</span>           <span class="comment">#</span></span><br><span class="line"></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    print(<span class="string">"Loading data..."</span>)</span><br><span class="line">    vocab, train_data, dev_data, test_data = build_dataset(config, args.word)</span><br><span class="line">    train_iter = build_iterator(train_data, config)</span><br><span class="line">    dev_iter = build_iterator(dev_data, config)</span><br><span class="line">    test_iter = build_iterator(test_data, config)</span><br><span class="line">    time_dif = get_time_dif(start_time)</span><br><span class="line">    print(<span class="string">"Time usage:"</span>, time_dif)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># train</span></span><br><span class="line">    config.n_vocab = len(vocab)</span><br><span class="line">    model = x.Model(config).to(config.device)</span><br><span class="line">    writer = SummaryWriter(log_dir=config.log_path + <span class="string">'/'</span> + time.strftime(<span class="string">'%m-%d_%H.%M'</span>, time.localtime()))</span><br><span class="line">    <span class="keyword">if</span> model_name != <span class="string">'Transformer'</span>:</span><br><span class="line">        init_network(model)</span><br><span class="line">    print(model.parameters)</span><br><span class="line">    train(config, model, train_iter, dev_iter, test_iter,writer)</span><br></pre></td></tr></table></figure><h1 id="train-eval-py"><a href="#train-eval-py" class="headerlink" title="train_eval.py"></a>train_eval.py</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: UTF-8</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">from</span> sklearn <span class="keyword">import</span> metrics</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> get_time_dif</span><br><span class="line"><span class="keyword">from</span> tensorboardX <span class="keyword">import</span> SummaryWriter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 权重初始化，默认xavier</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_network</span><span class="params">(model, method=<span class="string">'xavier'</span>, exclude=<span class="string">'embedding'</span>, seed=<span class="number">123</span>)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> name, w <span class="keyword">in</span> model.named_parameters():</span><br><span class="line">        <span class="keyword">if</span> exclude <span class="keyword">not</span> <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'weight'</span> <span class="keyword">in</span> name:</span><br><span class="line">                <span class="keyword">if</span> method == <span class="string">'xavier'</span>:</span><br><span class="line">                    nn.init.xavier_normal_(w)</span><br><span class="line">                <span class="keyword">elif</span> method == <span class="string">'kaiming'</span>:</span><br><span class="line">                    nn.init.kaiming_normal_(w)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    nn.init.normal_(w)</span><br><span class="line">            <span class="keyword">elif</span> <span class="string">'bias'</span> <span class="keyword">in</span> name:</span><br><span class="line">                nn.init.constant_(w, <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(config, model, train_iter, dev_iter, test_iter,writer)</span>:</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    model.train()</span><br><span class="line">    optimizer = torch.optim.Adam(model.parameters(), lr=config.learning_rate)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 学习率指数衰减，每次epoch：学习率 = gamma * 学习率</span></span><br><span class="line">    <span class="comment"># scheduler = torch.optim.lr_scheduler.ExponentialLR(optimizer, gamma=0.9)</span></span><br><span class="line">    total_batch = <span class="number">0</span>  <span class="comment"># 记录进行到多少batch</span></span><br><span class="line">    dev_best_loss = float(<span class="string">'inf'</span>) <span class="comment">#loss值先设置为无穷大</span></span><br><span class="line">    last_improve = <span class="number">0</span>  <span class="comment"># 记录上次验证集loss下降的batch数</span></span><br><span class="line">    flag = <span class="literal">False</span>  <span class="comment"># 记录是否很久没有效果提升</span></span><br><span class="line">    <span class="comment">#writer = SummaryWriter(log_dir=config.log_path + '/' + time.strftime('%m-%d_%H.%M', time.localtime()))</span></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(config.num_epochs):</span><br><span class="line">        print(<span class="string">'Epoch [&#123;&#125;/&#123;&#125;]'</span>.format(epoch + <span class="number">1</span>, config.num_epochs))</span><br><span class="line">        <span class="comment"># scheduler.step() # 学习率衰减</span></span><br><span class="line">        <span class="keyword">for</span> i, (trains, labels) <span class="keyword">in</span> enumerate(train_iter):</span><br><span class="line">            <span class="comment">#print (trains[0].shape)</span></span><br><span class="line">            outputs = model(trains)</span><br><span class="line">            model.zero_grad()</span><br><span class="line">            loss = F.cross_entropy(outputs, labels)</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line">            <span class="keyword">if</span> total_batch % <span class="number">100</span> == <span class="number">0</span>:</span><br><span class="line">                <span class="comment"># 每多少轮输出在训练集和验证集上的效果</span></span><br><span class="line">                true = labels.data.cpu()</span><br><span class="line">                predic = torch.max(outputs.data, <span class="number">1</span>)[<span class="number">1</span>].cpu()</span><br><span class="line">                train_acc = metrics.accuracy_score(true, predic)</span><br><span class="line">                dev_acc, dev_loss = evaluate(config, model, dev_iter)</span><br><span class="line">                <span class="keyword">if</span> dev_loss &lt; dev_best_loss:</span><br><span class="line">                    dev_best_loss = dev_loss</span><br><span class="line">                    torch.save(model.state_dict(), config.save_path)    <span class="comment">#验证集合效果好，我们就进行保存</span></span><br><span class="line">                    improve = <span class="string">'*'</span></span><br><span class="line">                    last_improve = total_batch</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    improve = <span class="string">''</span></span><br><span class="line">                time_dif = get_time_dif(start_time)</span><br><span class="line">                msg = <span class="string">'Iter: &#123;0:&gt;6&#125;,  Train Loss: &#123;1:&gt;5.2&#125;,  Train Acc: &#123;2:&gt;6.2%&#125;,  Val Loss: &#123;3:&gt;5.2&#125;,  Val Acc: &#123;4:&gt;6.2%&#125;,  Time: &#123;5&#125; &#123;6&#125;'</span></span><br><span class="line">                print(msg.format(total_batch, loss.item(), train_acc, dev_loss, dev_acc, time_dif, improve))</span><br><span class="line">                writer.add_scalar(<span class="string">"loss/train"</span>, loss.item(), total_batch)</span><br><span class="line">                writer.add_scalar(<span class="string">"loss/dev"</span>, dev_loss, total_batch)</span><br><span class="line">                writer.add_scalar(<span class="string">"acc/train"</span>, train_acc, total_batch)</span><br><span class="line">                writer.add_scalar(<span class="string">"acc/dev"</span>, dev_acc, total_batch)</span><br><span class="line">                model.train()</span><br><span class="line">            total_batch += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> total_batch - last_improve &gt; config.require_improvement:</span><br><span class="line">                <span class="comment"># 验证集loss超过1000batch没下降，结束训练</span></span><br><span class="line">                print(<span class="string">"No optimization for a long time, auto-stopping..."</span>)</span><br><span class="line">                flag = <span class="literal">True</span></span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">if</span> flag:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    writer.close()</span><br><span class="line">    test(config, model, test_iter)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(config, model, test_iter)</span>:</span></span><br><span class="line">    <span class="comment"># test</span></span><br><span class="line">    model.load_state_dict(torch.load(config.save_path))</span><br><span class="line">    model.eval()</span><br><span class="line">    start_time = time.time()</span><br><span class="line">    test_acc, test_loss, test_report, test_confusion = evaluate(config, model, test_iter, test=<span class="literal">True</span>)</span><br><span class="line">    msg = <span class="string">'Test Loss: &#123;0:&gt;5.2&#125;,  Test Acc: &#123;1:&gt;6.2%&#125;'</span></span><br><span class="line">    print(msg.format(test_loss, test_acc))</span><br><span class="line">    print(<span class="string">"Precision, Recall and F1-Score..."</span>)</span><br><span class="line">    print(test_report)</span><br><span class="line">    print(<span class="string">"Confusion Matrix..."</span>)</span><br><span class="line">    print(test_confusion)</span><br><span class="line">    time_dif = get_time_dif(start_time)</span><br><span class="line">    print(<span class="string">"Time usage:"</span>, time_dif)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(config, model, data_iter, test=False)</span>:</span></span><br><span class="line">    model.eval()</span><br><span class="line">    loss_total = <span class="number">0</span></span><br><span class="line">    predict_all = np.array([], dtype=int)</span><br><span class="line">    labels_all = np.array([], dtype=int)</span><br><span class="line">    <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">        <span class="keyword">for</span> texts, labels <span class="keyword">in</span> data_iter:</span><br><span class="line">            outputs = model(texts)</span><br><span class="line">            loss = F.cross_entropy(outputs, labels)</span><br><span class="line">            loss_total += loss</span><br><span class="line">            labels = labels.data.cpu().numpy()</span><br><span class="line">            predic = torch.max(outputs.data, <span class="number">1</span>)[<span class="number">1</span>].cpu().numpy()</span><br><span class="line">            labels_all = np.append(labels_all, labels)</span><br><span class="line">            predict_all = np.append(predict_all, predic)</span><br><span class="line"></span><br><span class="line">    acc = metrics.accuracy_score(labels_all, predict_all)</span><br><span class="line">    <span class="keyword">if</span> test:</span><br><span class="line">        report = metrics.classification_report(labels_all, predict_all, target_names=config.class_list, digits=<span class="number">4</span>)</span><br><span class="line">        confusion = metrics.confusion_matrix(labels_all, predict_all)</span><br><span class="line">        <span class="keyword">return</span> acc, loss_total / len(data_iter), report, confusion</span><br><span class="line">    <span class="keyword">return</span> acc, loss_total / len(data_iter)</span><br></pre></td></tr></table></figure><h1 id="utils-py"><a href="#utils-py" class="headerlink" title="utils.py"></a>utils.py</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: UTF-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pickle <span class="keyword">as</span> pkl</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MAX_VOCAB_SIZE = <span class="number">10000</span>  <span class="comment"># 词表长度限制</span></span><br><span class="line">UNK, PAD = <span class="string">'&lt;UNK&gt;'</span>, <span class="string">'&lt;PAD&gt;'</span>  <span class="comment"># 未知字，padding符号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_vocab</span><span class="params">(file_path, tokenizer, max_size, min_freq)</span>:</span></span><br><span class="line">    vocab_dic = &#123;&#125;</span><br><span class="line">    <span class="keyword">with</span> open(file_path, <span class="string">'r'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> tqdm(f):</span><br><span class="line">            lin = line.strip()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> lin:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            content = lin.split(<span class="string">'\t'</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">for</span> word <span class="keyword">in</span> tokenizer(content):</span><br><span class="line">                vocab_dic[word] = vocab_dic.get(word, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        vocab_list = sorted([_ <span class="keyword">for</span> _ <span class="keyword">in</span> vocab_dic.items() <span class="keyword">if</span> _[<span class="number">1</span>] &gt;= min_freq], key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)[:max_size]</span><br><span class="line">        vocab_dic = &#123;word_count[<span class="number">0</span>]: idx <span class="keyword">for</span> idx, word_count <span class="keyword">in</span> enumerate(vocab_list)&#125;</span><br><span class="line">        vocab_dic.update(&#123;UNK: len(vocab_dic), PAD: len(vocab_dic) + <span class="number">1</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> vocab_dic</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_dataset</span><span class="params">(config, ues_word)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> ues_word:</span><br><span class="line">        tokenizer = <span class="keyword">lambda</span> x: x.split(<span class="string">' '</span>)  <span class="comment"># 以空格隔开，word-level</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tokenizer = <span class="keyword">lambda</span> x: [y <span class="keyword">for</span> y <span class="keyword">in</span> x]  <span class="comment"># char-level</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(config.vocab_path):</span><br><span class="line">        vocab = pkl.load(open(config.vocab_path, <span class="string">'rb'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        vocab = build_vocab(config.train_path, tokenizer=tokenizer, max_size=MAX_VOCAB_SIZE, min_freq=<span class="number">1</span>)</span><br><span class="line">        pkl.dump(vocab, open(config.vocab_path, <span class="string">'wb'</span>))</span><br><span class="line">    print(<span class="string">f"Vocab size: <span class="subst">&#123;len(vocab)&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_dataset</span><span class="params">(path, pad_size=<span class="number">32</span>)</span>:</span></span><br><span class="line">        contents = []</span><br><span class="line">        <span class="keyword">with</span> open(path, <span class="string">'r'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> tqdm(f):</span><br><span class="line">                lin = line.strip()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> lin:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                content, label = lin.split(<span class="string">'\t'</span>)    <span class="comment">#将字符串和标签分割</span></span><br><span class="line">                words_line = []                     <span class="comment">#声明空列表</span></span><br><span class="line">                token = tokenizer(content)          <span class="comment">#将字符串分割</span></span><br><span class="line">                seq_len = len(token)</span><br><span class="line">                <span class="keyword">if</span> pad_size:</span><br><span class="line">                    <span class="keyword">if</span> len(token) &lt; pad_size:</span><br><span class="line">                        token.extend([vocab.get(PAD)] * (pad_size - len(token)))   <span class="comment">#不够则补充元素</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        token = token[:pad_size]                                    <span class="comment">#够了则截断</span></span><br><span class="line">                        seq_len = pad_size                                          <span class="comment">#更新大小为pad_size</span></span><br><span class="line">                <span class="comment"># word to id</span></span><br><span class="line">                <span class="keyword">for</span> word <span class="keyword">in</span> token:</span><br><span class="line">                    words_line.append(vocab.get(word, vocab.get(UNK))) <span class="comment">#将词语转换为索引</span></span><br><span class="line">                contents.append((words_line, int(label), seq_len))</span><br><span class="line">        <span class="keyword">return</span> contents  <span class="comment"># [([...], 0), ([...], 1), ...]</span></span><br><span class="line">    train = load_dataset(config.train_path, config.pad_size)</span><br><span class="line">    dev = load_dataset(config.dev_path, config.pad_size)</span><br><span class="line">    test = load_dataset(config.test_path, config.pad_size)</span><br><span class="line">    <span class="keyword">return</span> vocab, train, dev, test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatasetIterater</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, batches, batch_size, device)</span>:</span></span><br><span class="line">        self.batch_size = batch_size</span><br><span class="line">        self.batches = batches</span><br><span class="line">        self.n_batches = len(batches) // batch_size</span><br><span class="line">        self.residue = <span class="literal">False</span>  <span class="comment"># 记录batch数量是否为整数</span></span><br><span class="line">        <span class="keyword">if</span> len(batches) % self.n_batches != <span class="number">0</span>:</span><br><span class="line">            self.residue = <span class="literal">True</span></span><br><span class="line">        self.index = <span class="number">0</span></span><br><span class="line">        self.device = device</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_to_tensor</span><span class="params">(self, datas)</span>:</span></span><br><span class="line">        x = torch.LongTensor([_[<span class="number">0</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> datas]).to(self.device)</span><br><span class="line">        y = torch.LongTensor([_[<span class="number">1</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> datas]).to(self.device)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># pad前的长度(超过pad_size的设为pad_size)</span></span><br><span class="line">        seq_len = torch.LongTensor([_[<span class="number">2</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> datas]).to(self.device)</span><br><span class="line">        <span class="keyword">return</span> (x, seq_len), y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.residue <span class="keyword">and</span> self.index == self.n_batches:</span><br><span class="line">            batches = self.batches[self.index * self.batch_size: len(self.batches)]</span><br><span class="line">            self.index += <span class="number">1</span></span><br><span class="line">            batches = self._to_tensor(batches)</span><br><span class="line">            <span class="keyword">return</span> batches</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> self.index &gt; self.n_batches:</span><br><span class="line">            self.index = <span class="number">0</span></span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            batches = self.batches[self.index * self.batch_size: (self.index + <span class="number">1</span>) * self.batch_size]</span><br><span class="line">            self.index += <span class="number">1</span></span><br><span class="line">            batches = self._to_tensor(batches)</span><br><span class="line">            <span class="keyword">return</span> batches</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.residue:</span><br><span class="line">            <span class="keyword">return</span> self.n_batches + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.n_batches</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_iterator</span><span class="params">(dataset, config)</span>:</span></span><br><span class="line">    iter = DatasetIterater(dataset, config.batch_size, config.device)</span><br><span class="line">    <span class="keyword">return</span> iter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time_dif</span><span class="params">(start_time)</span>:</span></span><br><span class="line">    <span class="string">"""获取已使用时间"""</span></span><br><span class="line">    end_time = time.time()</span><br><span class="line">    time_dif = end_time - start_time</span><br><span class="line">    <span class="keyword">return</span> timedelta(seconds=int(round(time_dif)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="string">'''提取预训练词向量'''</span></span><br><span class="line">    <span class="comment"># 下面的目录、文件名按需更改。</span></span><br><span class="line">    train_dir = <span class="string">"./THUCNews/data/train.txt"</span></span><br><span class="line">    vocab_dir = <span class="string">"./THUCNews/data/vocab.pkl"</span></span><br><span class="line">    pretrain_dir = <span class="string">"./THUCNews/data/sgns.sogou.char"</span></span><br><span class="line">    emb_dim = <span class="number">300</span></span><br><span class="line">    filename_trimmed_dir = <span class="string">"./THUCNews/data/embedding_SougouNews"</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(vocab_dir):</span><br><span class="line">        word_to_id = pkl.load(open(vocab_dir, <span class="string">'rb'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># tokenizer = lambda x: x.split(' ')  # 以词为单位构建词表(数据集中词之间以空格隔开)</span></span><br><span class="line">        tokenizer = <span class="keyword">lambda</span> x: [y <span class="keyword">for</span> y <span class="keyword">in</span> x]  <span class="comment"># 以字为单位构建词表</span></span><br><span class="line">        word_to_id = build_vocab(train_dir, tokenizer=tokenizer, max_size=MAX_VOCAB_SIZE, min_freq=<span class="number">1</span>)</span><br><span class="line">        pkl.dump(word_to_id, open(vocab_dir, <span class="string">'wb'</span>))</span><br><span class="line"></span><br><span class="line">    embeddings = np.random.rand(len(word_to_id), emb_dim)</span><br><span class="line">    f = open(pretrain_dir, <span class="string">"r"</span>, encoding=<span class="string">'UTF-8'</span>)</span><br><span class="line">    <span class="keyword">for</span> i, line <span class="keyword">in</span> enumerate(f.readlines()):</span><br><span class="line">        <span class="comment"># if i == 0:  # 若第一行是标题，则跳过</span></span><br><span class="line">        <span class="comment">#     continue</span></span><br><span class="line">        lin = line.strip().split(<span class="string">" "</span>)</span><br><span class="line">        <span class="keyword">if</span> lin[<span class="number">0</span>] <span class="keyword">in</span> word_to_id:</span><br><span class="line">            idx = word_to_id[lin[<span class="number">0</span>]]</span><br><span class="line">            emb = [float(x) <span class="keyword">for</span> x <span class="keyword">in</span> lin[<span class="number">1</span>:<span class="number">301</span>]]</span><br><span class="line">            embeddings[idx] = np.asarray(emb, dtype=<span class="string">'float32'</span>)</span><br><span class="line">    f.close()</span><br><span class="line">    np.savez_compressed(filename_trimmed_dir, embeddings=embeddings)</span><br></pre></td></tr></table></figure><h1 id="utils-fasttext-py"><a href="#utils-fasttext-py" class="headerlink" title="utils_fasttext.py"></a>utils_fasttext.py</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: UTF-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pickle <span class="keyword">as</span> pkl</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> timedelta</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MAX_VOCAB_SIZE = <span class="number">10000</span>  <span class="comment"># 词表长度限制</span></span><br><span class="line">UNK, PAD = <span class="string">'&lt;UNK&gt;'</span>, <span class="string">'&lt;PAD&gt;'</span>  <span class="comment"># 未知字，padding符号</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_vocab</span><span class="params">(file_path, tokenizer, max_size, min_freq)</span>:</span></span><br><span class="line">    vocab_dic = &#123;&#125;</span><br><span class="line">    <span class="keyword">with</span> open(file_path, <span class="string">'r'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> tqdm(f):</span><br><span class="line">            lin = line.strip()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> lin:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            content = lin.split(<span class="string">'\t'</span>)[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">for</span> word <span class="keyword">in</span> tokenizer(content):</span><br><span class="line">                vocab_dic[word] = vocab_dic.get(word, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">        vocab_list = sorted([_ <span class="keyword">for</span> _ <span class="keyword">in</span> vocab_dic.items() <span class="keyword">if</span> _[<span class="number">1</span>] &gt;= min_freq], key=<span class="keyword">lambda</span> x: x[<span class="number">1</span>], reverse=<span class="literal">True</span>)[:max_size]</span><br><span class="line">        vocab_dic = &#123;word_count[<span class="number">0</span>]: idx <span class="keyword">for</span> idx, word_count <span class="keyword">in</span> enumerate(vocab_list)&#125;</span><br><span class="line">        vocab_dic.update(&#123;UNK: len(vocab_dic), PAD: len(vocab_dic) + <span class="number">1</span>&#125;)</span><br><span class="line">    <span class="keyword">return</span> vocab_dic</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_dataset</span><span class="params">(config, ues_word)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> ues_word:</span><br><span class="line">        tokenizer = <span class="keyword">lambda</span> x: x.split(<span class="string">' '</span>)  <span class="comment"># 以空格隔开，word-level</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        tokenizer = <span class="keyword">lambda</span> x: [y <span class="keyword">for</span> y <span class="keyword">in</span> x]  <span class="comment"># char-level</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(config.vocab_path):</span><br><span class="line">        vocab = pkl.load(open(config.vocab_path, <span class="string">'rb'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        vocab = build_vocab(config.train_path, tokenizer=tokenizer, max_size=MAX_VOCAB_SIZE, min_freq=<span class="number">1</span>)</span><br><span class="line">        pkl.dump(vocab, open(config.vocab_path, <span class="string">'wb'</span>))</span><br><span class="line">    print(<span class="string">f"Vocab size: <span class="subst">&#123;len(vocab)&#125;</span>"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_dataset</span><span class="params">(path, pad_size=<span class="number">32</span>)</span>:</span></span><br><span class="line">        contents = []</span><br><span class="line">        <span class="keyword">with</span> open(path, <span class="string">'r'</span>, encoding=<span class="string">'UTF-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> tqdm(f):</span><br><span class="line">                lin = line.strip()</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> lin:</span><br><span class="line">                    <span class="keyword">continue</span></span><br><span class="line">                content, label = lin.split(<span class="string">'\t'</span>)    <span class="comment">#将字符串和标签分割</span></span><br><span class="line">                words_line = []                     <span class="comment">#声明空列表</span></span><br><span class="line">                token = tokenizer(content)          <span class="comment">#将字符串分割</span></span><br><span class="line">                seq_len = len(token)</span><br><span class="line">                <span class="keyword">if</span> pad_size:</span><br><span class="line">                    <span class="keyword">if</span> len(token) &lt; pad_size:</span><br><span class="line">                        token.extend([vocab.get(PAD)] * (pad_size - len(token)))   <span class="comment">#不够则补充元素</span></span><br><span class="line">                    <span class="keyword">else</span>:</span><br><span class="line">                        token = token[:pad_size]                                    <span class="comment">#够了则截断</span></span><br><span class="line">                        seq_len = pad_size                                          <span class="comment">#更新大小为pad_size</span></span><br><span class="line">                <span class="comment"># word to id</span></span><br><span class="line">                <span class="keyword">for</span> word <span class="keyword">in</span> token:</span><br><span class="line">                    words_line.append(vocab.get(word, vocab.get(UNK))) <span class="comment">#将词语转换为索引</span></span><br><span class="line">                contents.append((words_line, int(label), seq_len))</span><br><span class="line">        <span class="keyword">return</span> contents  <span class="comment"># [([...], 0), ([...], 1), ...]</span></span><br><span class="line">    train = load_dataset(config.train_path, config.pad_size)</span><br><span class="line">    dev = load_dataset(config.dev_path, config.pad_size)</span><br><span class="line">    test = load_dataset(config.test_path, config.pad_size)</span><br><span class="line">    <span class="keyword">return</span> vocab, train, dev, test</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DatasetIterater</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, batches, batch_size, device)</span>:</span></span><br><span class="line">        self.batch_size = batch_size</span><br><span class="line">        self.batches = batches</span><br><span class="line">        self.n_batches = len(batches) // batch_size</span><br><span class="line">        self.residue = <span class="literal">False</span>  <span class="comment"># 记录batch数量是否为整数</span></span><br><span class="line">        <span class="keyword">if</span> len(batches) % self.n_batches != <span class="number">0</span>:</span><br><span class="line">            self.residue = <span class="literal">True</span></span><br><span class="line">        self.index = <span class="number">0</span></span><br><span class="line">        self.device = device</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_to_tensor</span><span class="params">(self, datas)</span>:</span></span><br><span class="line">        x = torch.LongTensor([_[<span class="number">0</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> datas]).to(self.device)</span><br><span class="line">        y = torch.LongTensor([_[<span class="number">1</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> datas]).to(self.device)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># pad前的长度(超过pad_size的设为pad_size)</span></span><br><span class="line">        seq_len = torch.LongTensor([_[<span class="number">2</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> datas]).to(self.device)</span><br><span class="line">        <span class="keyword">return</span> (x, seq_len), y</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__next__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.residue <span class="keyword">and</span> self.index == self.n_batches:</span><br><span class="line">            batches = self.batches[self.index * self.batch_size: len(self.batches)]</span><br><span class="line">            self.index += <span class="number">1</span></span><br><span class="line">            batches = self._to_tensor(batches)</span><br><span class="line">            <span class="keyword">return</span> batches</span><br><span class="line"></span><br><span class="line">        <span class="keyword">elif</span> self.index &gt; self.n_batches:</span><br><span class="line">            self.index = <span class="number">0</span></span><br><span class="line">            <span class="keyword">raise</span> StopIteration</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            batches = self.batches[self.index * self.batch_size: (self.index + <span class="number">1</span>) * self.batch_size]</span><br><span class="line">            self.index += <span class="number">1</span></span><br><span class="line">            batches = self._to_tensor(batches)</span><br><span class="line">            <span class="keyword">return</span> batches</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__len__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> self.residue:</span><br><span class="line">            <span class="keyword">return</span> self.n_batches + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.n_batches</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build_iterator</span><span class="params">(dataset, config)</span>:</span></span><br><span class="line">    iter = DatasetIterater(dataset, config.batch_size, config.device)</span><br><span class="line">    <span class="keyword">return</span> iter</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_time_dif</span><span class="params">(start_time)</span>:</span></span><br><span class="line">    <span class="string">"""获取已使用时间"""</span></span><br><span class="line">    end_time = time.time()</span><br><span class="line">    time_dif = end_time - start_time</span><br><span class="line">    <span class="keyword">return</span> timedelta(seconds=int(round(time_dif)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    <span class="string">'''提取预训练词向量'''</span></span><br><span class="line">    <span class="comment"># 下面的目录、文件名按需更改。</span></span><br><span class="line">    train_dir = <span class="string">"./THUCNews/data/train.txt"</span></span><br><span class="line">    vocab_dir = <span class="string">"./THUCNews/data/vocab.pkl"</span></span><br><span class="line">    pretrain_dir = <span class="string">"./THUCNews/data/sgns.sogou.char"</span></span><br><span class="line">    emb_dim = <span class="number">300</span></span><br><span class="line">    filename_trimmed_dir = <span class="string">"./THUCNews/data/embedding_SougouNews"</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(vocab_dir):</span><br><span class="line">        word_to_id = pkl.load(open(vocab_dir, <span class="string">'rb'</span>))</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="comment"># tokenizer = lambda x: x.split(' ')  # 以词为单位构建词表(数据集中词之间以空格隔开)</span></span><br><span class="line">        tokenizer = <span class="keyword">lambda</span> x: [y <span class="keyword">for</span> y <span class="keyword">in</span> x]  <span class="comment"># 以字为单位构建词表</span></span><br><span class="line">        word_to_id = build_vocab(train_dir, tokenizer=tokenizer, max_size=MAX_VOCAB_SIZE, min_freq=<span class="number">1</span>)</span><br><span class="line">        pkl.dump(word_to_id, open(vocab_dir, <span class="string">'wb'</span>))</span><br><span class="line"></span><br><span class="line">    embeddings = np.random.rand(len(word_to_id), emb_dim)</span><br><span class="line">    f = open(pretrain_dir, <span class="string">"r"</span>, encoding=<span class="string">'UTF-8'</span>)</span><br><span class="line">    <span class="keyword">for</span> i, line <span class="keyword">in</span> enumerate(f.readlines()):</span><br><span class="line">        <span class="comment"># if i == 0:  # 若第一行是标题，则跳过</span></span><br><span class="line">        <span class="comment">#     continue</span></span><br><span class="line">        lin = line.strip().split(<span class="string">" "</span>)</span><br><span class="line">        <span class="keyword">if</span> lin[<span class="number">0</span>] <span class="keyword">in</span> word_to_id:</span><br><span class="line">            idx = word_to_id[lin[<span class="number">0</span>]]</span><br><span class="line">            emb = [float(x) <span class="keyword">for</span> x <span class="keyword">in</span> lin[<span class="number">1</span>:<span class="number">301</span>]]</span><br><span class="line">            embeddings[idx] = np.asarray(emb, dtype=<span class="string">'float32'</span>)</span><br><span class="line">    f.close()</span><br><span class="line">    np.savez_compressed(filename_trimmed_dir, embeddings=embeddings)</span><br></pre></td></tr></table></figure><h1 id="TextRNN-py"><a href="#TextRNN-py" class="headerlink" title="TextRNN.py"></a>TextRNN.py</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding: UTF-8</span></span><br><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">import</span> torch.nn <span class="keyword">as</span> nn</span><br><span class="line"><span class="keyword">import</span> torch.nn.functional <span class="keyword">as</span> F</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="string">"""配置参数"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, dataset, embedding)</span>:</span></span><br><span class="line">        self.model_name = <span class="string">'TextRNN'</span></span><br><span class="line">        self.train_path = dataset + <span class="string">'/data/train.txt'</span>                                <span class="comment"># 训练集</span></span><br><span class="line">        self.dev_path = dataset + <span class="string">'/data/dev.txt'</span>                                    <span class="comment"># 验证集</span></span><br><span class="line">        self.test_path = dataset + <span class="string">'/data/test.txt'</span>                                  <span class="comment"># 测试集</span></span><br><span class="line">        self.class_list = [x.strip() <span class="keyword">for</span> x <span class="keyword">in</span> open(</span><br><span class="line">            dataset + <span class="string">'/data/class.txt'</span>).readlines()]                                <span class="comment"># 类别名单</span></span><br><span class="line">        self.vocab_path = dataset + <span class="string">'/data/vocab.pkl'</span>                                <span class="comment"># 词表（字典结构（索引：词语））</span></span><br><span class="line">        self.save_path = dataset + <span class="string">'/saved_dict/'</span> + self.model_name + <span class="string">'.ckpt'</span>        <span class="comment"># 模型训练结果</span></span><br><span class="line">        self.log_path = dataset + <span class="string">'/log/'</span> + self.model_name</span><br><span class="line">        self.embedding_pretrained = torch.tensor(</span><br><span class="line">            np.load(dataset + <span class="string">'/data/'</span> + embedding)[<span class="string">"embeddings"</span>].astype(<span class="string">'float32'</span>))\</span><br><span class="line">            <span class="keyword">if</span> embedding != <span class="string">'random'</span> <span class="keyword">else</span> <span class="literal">None</span>                                       <span class="comment"># 预训练词向量 #因为是npz格式，所以需要np.load</span></span><br><span class="line">        self.device = torch.device(<span class="string">'cuda'</span> <span class="keyword">if</span> torch.cuda.is_available() <span class="keyword">else</span> <span class="string">'cpu'</span>)   <span class="comment"># 设备</span></span><br><span class="line"></span><br><span class="line">        self.dropout = <span class="number">0.5</span>                                              <span class="comment"># 随机失活</span></span><br><span class="line">        self.require_improvement = <span class="number">1000</span>                                 <span class="comment"># 若超过1000batch效果还没提升，则提前结束训练</span></span><br><span class="line">        self.num_classes = len(self.class_list)                         <span class="comment"># 类别数</span></span><br><span class="line">        self.n_vocab = <span class="number">0</span>                                                <span class="comment"># 词表大小，在运行时赋值</span></span><br><span class="line">        self.num_epochs = <span class="number">10</span>                                            <span class="comment"># epoch数</span></span><br><span class="line">        self.batch_size = <span class="number">128</span>                                           <span class="comment"># mini-batch大小</span></span><br><span class="line">        self.pad_size = <span class="number">32</span>                                              <span class="comment"># 每句话处理成的长度(短填长切)</span></span><br><span class="line">        self.learning_rate = <span class="number">1e-3</span>                                       <span class="comment"># 学习率</span></span><br><span class="line">        self.embed = self.embedding_pretrained.size(<span class="number">1</span>)\</span><br><span class="line">            <span class="keyword">if</span> self.embedding_pretrained <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="number">300</span>           <span class="comment"># 字向量维度, 若使用了预训练词向量，则维度统一</span></span><br><span class="line">        self.hidden_size = <span class="number">128</span>                                          <span class="comment"># lstm隐藏层</span></span><br><span class="line">        self.num_layers = <span class="number">2</span>                                             <span class="comment"># lstm层数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''Recurrent Neural Network for Text Classification with Multi-Task Learning'''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Model</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, config)</span>:</span></span><br><span class="line">        super(Model, self).__init__()</span><br><span class="line">        <span class="keyword">if</span> config.embedding_pretrained <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            self.embedding = nn.Embedding.from_pretrained(config.embedding_pretrained, freeze=<span class="literal">False</span>)  <span class="comment">#embedding层将词汇转化为向量</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.embedding = nn.Embedding(config.n_vocab, config.embed, padding_idx=config.n_vocab - <span class="number">1</span>)</span><br><span class="line">        self.lstm = nn.LSTM(config.embed, config.hidden_size, config.num_layers,                    <span class="comment">#词向量维度  隐层神经元 两层网络</span></span><br><span class="line">                            bidirectional=<span class="literal">True</span>, batch_first=<span class="literal">True</span>, dropout=config.dropout)           <span class="comment">#双向传播  第一维当成batch drop设置成0.5</span></span><br><span class="line">        self.fc = nn.Linear(config.hidden_size * <span class="number">2</span>, config.num_classes)                             <span class="comment">#因为是双向传播（BiLSTM) 所以要乘以2</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        x, _ = x</span><br><span class="line">        out = self.embedding(x)  <span class="comment"># [batch_size, seq_len, embeding]=[128, 32, 300]</span></span><br><span class="line">        out, _ = self.lstm(out)</span><br><span class="line">        out = self.fc(out[:, <span class="number">-1</span>, :])  <span class="comment"># 句子最后时刻的 hidden state  （最后时刻的ht）</span></span><br><span class="line">        <span class="keyword">return</span> out</span><br></pre></td></tr></table></figure><p>​     需要在pycharm中配置configurations –model=TextRNN运行。</p><p>​    TensorboardX需要本地有tensorflow的支持，运行命令为<code>tensorboard --logdir= 文件夹名</code></p><p>​    下附运行结果：</p><p>​    <img alt data-src="https://s1.ax1x.com/2020/03/24/8b2SkF.png" class="lazyload"></p><p>​                                                                                       <strong>各项指标</strong></p><p><img alt data-src="https://s1.ax1x.com/2020/03/24/8bgOO0.png" class="lazyload"></p><p>​                                                                                <strong>迷惑矩阵</strong></p><p><img alt data-src="https://s1.ax1x.com/2020/03/24/8bgvwT.png" class="lazyload"></p><p>​                                                                    <strong>tensorboard将train和dev可视化</strong></p><p><img alt data-src="https://s1.ax1x.com/2020/03/24/8b2ilR.png" class="lazyload"></p><p>​                                                                              <strong>BiLSTM原理</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> 循环神经网络 </tag>
            
            <tag> RNN </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Typora快捷键</title>
      <link href="/2020/03/24/typora%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2020/03/24/typora%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Typora快捷键"><a href="#Typora快捷键" class="headerlink" title="Typora快捷键"></a>Typora快捷键</h1><p>一：菜单栏</p><p>文件：alt+F</p><p>编辑：alt+E</p><p>段落：alt+P</p><p>格式：alt+O</p><p>视图：alt+V</p><p>主题：alt+T</p><p>帮助：alt+H</p><p>二：文件</p><p>新建：Ctrl+N</p><p>新建窗口：Ctrl+Shift+N</p><p>打开：Ctrl+O</p><p>快速打开：Ctrl+P</p><p>保存：Ctrl+S</p><p>另存为：Ctrl+Shift+S</p><p>偏好：Ctrl+,</p><p>关闭：Ctrl+W</p><p>三：编辑</p><p>撤销：Ctrl+Z</p><p>重做：Ctrl+Y</p><p>剪切：Ctrl+X</p><p>复制：Ctrl+C</p><p>粘贴：Ctrl+V</p><p>复制为MarkDown：Ctrl+Shift+C</p><p>粘贴为纯文本：Ctrl+Shift+V</p><p>全选：Ctrl+A</p><p>选中当前行/句：Ctrl+L</p><p>选中当前格式文本：Ctrl+E</p><p>选中当前词：Ctrl+D</p><p>跳转到文首：Ctrl+Home</p><p>跳转到所选内容：Ctrl+J</p><p>跳转到文末：Ctrl+End</p><p>查找：Ctrl+F</p><p>查找下一个：F3</p><p>查找上一个：Shift+F3</p><p>替换：Ctrl+H</p><p>四：段落</p><p>标题：Ctrl+1/2/3/4/5</p><p>段落：Ctrl+0</p><p>增大标题级别：Ctrl+=</p><p>减少标题级别：Ctrl+-</p><p>表格：Ctrl+T</p><p>代码块：Ctrl+Shift+K</p><p>公式块：Ctrl+Shift+M</p><p>引用：Ctrl+Shift+Q</p><p>有序列表：Ctrl+Shift+[</p><p>无序列表：Ctrl+Shift+]</p><p>增加缩进：Ctrl+]</p><p>减少缩进：Ctrl+[</p><p>五：格式</p><p>加粗：Ctrl+B</p><p>斜体：Ctrl+I</p><p>下划线：Ctrl+U</p><p>代码：Ctrl+Shift+`</p><p>删除线：Alt+Shift+5</p><p>超链接：Ctrl+K</p><p>图像：Ctrl+Shift+I</p><p>清除样式：Ctrl+</p><p>六：视图</p><p>显示隐藏侧边栏：Ctrl+Shift+L</p><p>大纲视图：Ctrl+Shift+1</p><p>文档列表视图：Ctrl+Shift+2</p><p>文件树视图：Ctrl+Shift+3</p><p>源代码模式：Ctrl+/</p><p>专注模式：F8</p><p>打字机模式：F9</p><p>切换全屏：F11</p><p>实际大小：Ctrl+Shift+0</p><p>放大：Ctrl+Shift+=</p><p>缩小：Ctrl+Shift+-</p><p>应用内窗口切换：Ctrl+Tab</p><p>打开DevTools：Shift+F12</p>]]></content>
      
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> markdown编辑器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法（第四版）之第一章</title>
      <link href="/2020/03/22/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%8F%8C%E6%A0%88%E7%AE%97%E6%9C%AF%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>/2020/03/22/%E4%BA%8C%E5%88%86%E6%90%9C%E7%B4%A2%E4%B8%8E%E5%8F%8C%E6%A0%88%E7%AE%97%E6%9C%AF%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinarySearch</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">rank</span><span class="params">(<span class="keyword">int</span> key,<span class="keyword">int</span> a[])</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> lo = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> hi = a.length - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (lo &lt;= hi)&#123;</span><br><span class="line">            <span class="keyword">int</span> mid = lo + (hi-lo)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span> (key &lt; a[mid]) hi = mid -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(key &gt; a[mid]) lo = mid +<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> mid;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] whitelist = &#123;<span class="number">1</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">8</span>,<span class="number">6</span>,<span class="number">7</span>&#125;;</span><br><span class="line">        Arrays.sort(whitelist);</span><br><span class="line">        <span class="keyword">int</span>[] mess = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; mess.length;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> key = mess[i];</span><br><span class="line">            <span class="keyword">if</span>(rank(key,whitelist) &lt; <span class="number">0</span>)</span><br><span class="line">                StdOut.println(key);<span class="comment">//打印不在whitelist中的内容</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://s1.ax1x.com/2020/03/22/85WsLF.png" class="lazyload"></p><h2 id="双栈算术表达式"><a href="#双栈算术表达式" class="headerlink" title="双栈算术表达式"></a>双栈算术表达式</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Evaluate</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Stack&lt;String&gt; ops = <span class="keyword">new</span> Stack&lt;String&gt;();</span><br><span class="line">        Stack&lt;Double&gt; vals = <span class="keyword">new</span> Stack&lt;Double&gt;();</span><br><span class="line">        StdOut.println(<span class="string">"请输入表达式："</span>);</span><br><span class="line">        <span class="keyword">while</span> (!StdIn.isEmpty()) &#123;</span><br><span class="line">            String s = StdIn.readString();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (s.equals(<span class="string">"("</span>)) ;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">"+"</span>)) ops.push(s);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">"-"</span>)) ops.push(s);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">"*"</span>)) ops.push(s);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">"/"</span>)) ops.push(s);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">"sqrt"</span>)) ops.push(s);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (s.equals(<span class="string">")"</span>)) &#123;</span><br><span class="line">                <span class="keyword">double</span> v = vals.pop();</span><br><span class="line">                String op = ops.pop();</span><br><span class="line">                <span class="keyword">if</span> (op.equals(<span class="string">"+"</span>)) v = v + vals.pop();</span><br><span class="line">                <span class="keyword">if</span> (op.equals(<span class="string">"-"</span>)) v = vals.pop() - v;</span><br><span class="line">                <span class="keyword">if</span> (op.equals(<span class="string">"*"</span>)) v = v * vals.pop();</span><br><span class="line">                <span class="keyword">if</span> (op.equals(<span class="string">"/"</span>)) v = vals.pop() / v;</span><br><span class="line">                <span class="keyword">if</span> (op.equals(<span class="string">"sqrt"</span>)) v = Math.sqrt(v);</span><br><span class="line">                vals.push(v);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                vals.push(Double.parseDouble(s));</span><br><span class="line">                <span class="keyword">double</span> temp = vals.lastElement();</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        StdOut.println(vals.pop());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://s1.ax1x.com/2020/03/22/85Xn8U.png" class="lazyload"></p><p><img alt data-src="https://s1.ax1x.com/2020/03/22/85XZ5V.png" class="lazyload"></p><p><strong>尼玛，IDEA的EOF要按^D.曹</strong></p><h2 id="泛型栈"><a href="#泛型栈" class="headerlink" title="泛型栈"></a>泛型栈</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FixedCapacityStack</span>&lt;<span class="title">Item</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Item[] a;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> N;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FixedCapacityStack</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        a = (Item[]) <span class="keyword">new</span> Object[size];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N == <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Item item)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(N == a.length) resize(<span class="number">2</span>*a.length);</span><br><span class="line">        a[N++] = item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Item <span class="title">pop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Item item = a[--N];</span><br><span class="line">        a[N] = <span class="keyword">null</span>;<span class="comment">//避免对象游离；</span></span><br><span class="line">        <span class="keyword">if</span>(N &gt; <span class="number">0</span>&amp;&amp; N == a.length/<span class="number">4</span>) resize(a.length/<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">return</span> item;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> N;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">resize</span><span class="params">(<span class="keyword">int</span> max)</span></span>&#123;</span><br><span class="line">        Item[] temp = (Item[]) <span class="keyword">new</span> Object[max];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; N;i++)</span><br><span class="line">            temp[i] = a[i];</span><br><span class="line">        a = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        FixedCapacityStack&lt;String&gt; s;</span><br><span class="line">        s = <span class="keyword">new</span> FixedCapacityStack&lt;String&gt;(<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (!StdIn.isEmpty()) &#123;</span><br><span class="line">            String temp = StdIn.readString();</span><br><span class="line">            <span class="keyword">if</span>(!temp.equals(<span class="string">"-"</span>))&#123;</span><br><span class="line">                s.push(temp);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(!s.isEmpty())</span><br><span class="line">                StdOut.print(s.pop()+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        StdOut.println(<span class="string">"("</span> + s.size() + <span class="string">" left on stack)"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://s1.ax1x.com/2020/03/22/8IDSFf.png" class="lazyload"></p><p>​        java的垃圾手机策略是回收所有无法被访问的对象的内存。在我们对pop（）的实现中，被弹出的元素仍然存在于数组中。这个元素实际上已经是个故而了—它永远也不会再次被访问了，但垃圾回收器无法知道这一点，除非该引用被覆盖。此时我们只需将该数组元素设置为null即可将其覆盖，并回收内存。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 二分搜索 </tag>
            
            <tag> 双栈算术表达式 </tag>
            
            <tag> 泛型栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>循环神经网络RNN</title>
      <link href="/2020/03/22/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
      <url>/2020/03/22/%E5%BE%AA%E7%8E%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img alt data-src="https://s1.ax1x.com/2020/03/22/84fiEd.png" class="lazyload"></p><p><img alt data-src="https://s1.ax1x.com/2020/03/22/84IaS1.png" class="lazyload"></p><p>在RNN网络中，输入的数据都是离散序列化数据。</p><p><img alt data-src="https://s1.ax1x.com/2020/03/22/84I8wF.png" class="lazyload"></p><p><img alt data-src="https://s1.ax1x.com/2020/03/22/84IYFJ.png" class="lazyload"></p><p><img alt data-src="https://s1.ax1x.com/2020/03/22/84IMQ0.png" class="lazyload"></p><p>梯度消失：</p><p>​    梯度消失包含梯度消失和梯度爆炸。梯度消失的意思是如果每一个连续相乘的导数值均小于1时，那么最终的结果很快将趋于0；相反，梯度爆炸的意思是如果每一个连续相乘的导数值均大于1，会产生一个很大的结果。</p><p><img alt data-src="https://s1.ax1x.com/2020/03/22/84InWn.png" class="lazyload"></p><p>​      为了将单词前后连续起来，便产生了LSTM(Long Short-term Memory),中文名称为长短期记忆网络。他的核心思想是利用电子电路中的各种门电路的组合来进行“记忆”。对于RNN来说，如果我们有10000个x，那么是否需要将每一个x输出的结果都进行记忆呢？答案是否定的，显然太前方的信息或者一些其他信息已经对我们当前的信息没有什么影响了，所以我们就需要LSTM的门电路对这些输入进行过滤。</p><h2 id="word2vec"><a href="#word2vec" class="headerlink" title="word2vec"></a>word2vec</h2><p><img alt data-src="https://s1.ax1x.com/2020/03/23/8oGGsf.png" class="lazyload"></p><p>如何对一个人进行描述呢？我们会直观地看到它的外貌，比如身高体重等，对于单词也是如此。我们把每一个单词拆分成一定维度地向量，向量太小会描述不准确，因为我们需要从多个角度去评价这一向量，根据Google的建议，向量大小通常设置在50-300维度为宜。通常维度越多，计算出的值越具有可靠性。</p><p>​    </p><p><img alt data-src="https://s1.ax1x.com/2020/03/23/8oGlRI.png" class="lazyload"></p><p>​                                                            <strong>（利用平均余弦相似度来计算得分)</strong></p><p><img alt data-src="https://s1.ax1x.com/2020/03/23/8oGZqO.png" class="lazyload"></p><p>​                                                                <strong>（以热力图反映出词意的相近程度。）</strong></p><p><img alt data-src="https://s1.ax1x.com/2020/03/23/8oG1zt.png" class="lazyload"></p><p>CBOW：以上下文作为输入，中间值作为输出。</p><p>Skipgram：以中间值作为输入，上下文作为输出。</p><p><img alt data-src="https://s1.ax1x.com/2020/03/23/8oGnde.png" class="lazyload"></p><p>假定限制每次三个单词，移动滑块。</p><p><img alt data-src="https://s1.ax1x.com/2020/03/23/8oGMid.png" class="lazyload"></p><p>输入A我们想得到B，即可转化思路为输入A，得到B的概率为多少，当然是越接近1越好。</p><p>但是我们所给的标签均为1，所以我们要进行负样本采样，人工加入干扰项，并将干扰项的概率设为0，</p><p>干扰项设置为<strong>5</strong>个为宜。</p><p><img alt data-src="https://s1.ax1x.com/2020/03/23/8oGQJA.png" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 循环神经网络 </tag>
            
            <tag> RNN </tag>
            
            <tag> deep learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx和fastcgi以及spawn-fcgi之间的协作工作</title>
      <link href="/2020/03/19/nginx%E5%92%8Cfastcgi%E4%BB%A5%E5%8F%8Aspawn-fcgi%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8D%8F%E4%BD%9C%E5%B7%A5%E4%BD%9C/"/>
      <url>/2020/03/19/nginx%E5%92%8Cfastcgi%E4%BB%A5%E5%8F%8Aspawn-fcgi%E4%B9%8B%E9%97%B4%E7%9A%84%E5%8D%8F%E4%BD%9C%E5%B7%A5%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="nginx和fastcgi以及spawn-fcgi之间的协作工作"><a href="#nginx和fastcgi以及spawn-fcgi之间的协作工作" class="headerlink" title="nginx和fastcgi以及spawn-fcgi之间的协作工作"></a>nginx和fastcgi以及spawn-fcgi之间的协作工作</h3><ol><li><p>我们首先修改配置文件 <code>vi /usr/local/nginx/conf/nginx.conf</code></p></li><li><p>然后填入以下内容：</p><p><img alt data-src="https://s1.ax1x.com/2020/03/19/8yD8AI.png" class="lazyload"></p><p>3.进入fcgi地examples目录 <code>cd fcgi-2.4.0/examples</code>,将echo.c示例文件复制到主目录<code>sudo cp echo.c ~</code></p><p>4.在home目录下执行<code>gcc ehco.c</code> 会报错，然我我们执行<code>gcc echo.c -lfcgi</code>,此时在家目录会生成一个a.out文件，我们执行<code>./a.out</code>，然后如果报错的话，则需要将<code>/usr/local/lib</code>中的libfcgi.so.0 cp 到<code>/lib/ x86_64-linux-gnu</code> 目录下，出现一串系统信息，则说明成功。(这是我的方法，个人觉得比较简单。)</p></li></ol><p>​    另外一种方式是<code>find /usr/local/lib -name &quot;libfcgi.so.0&quot;</code>，编辑路径到 <code>/etc/ld.so.conf</code>中，保存退出，再执行，<code>sudo ldconfig</code>。（这种方式感觉略繁琐）</p><p>​    <img alt data-src="https://s1.ax1x.com/2020/03/19/8yrbon.png" class="lazyload"></p><p>5.继而执行<code>spawn-fcgi -a 127.0.0.1 -p 9001 -f  ./a.out</code>,会出现下图：</p><p>​    <img alt data-src="https://s1.ax1x.com/2020/03/19/8ysGSf.png" class="lazyload"></p><p>这时，子进程创建成功。</p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> fastcgi </tag>
            
            <tag> spawn-fcgi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cgi和fastcgi的工作模式</title>
      <link href="/2020/03/19/cgi%E5%92%8Cfastcgi%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/"/>
      <url>/2020/03/19/cgi%E5%92%8Cfastcgi%E7%9A%84%E5%B7%A5%E4%BD%9C%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="CGI"><a href="#CGI" class="headerlink" title="CGI"></a>CGI</h1><h2 id="1-CGI是什么？"><a href="#1-CGI是什么？" class="headerlink" title="1.CGI是什么？"></a>1.CGI是什么？</h2><ul><li>公共网关接口</li><li><strong>common gateway interface</strong>,简称CGI</li><li>在物理层面上是一段程序，运行在服务器上，提供同客户端HTM页面的接口。</li></ul><h2 id="2-处理步骤："><a href="#2-处理步骤：" class="headerlink" title="2.处理步骤："></a>2.处理步骤：</h2><ul><li>通过Internet把用户请求发送到web服务器</li><li>web服务器接收到用户请求并发送给CGI程序</li><li>CGI程序把处理结果传送给web服务器</li><li>web服务器把结果回到用户</li></ul><p>图示说明过程：</p><p><img alt data-src="https://s1.ax1x.com/2020/03/19/8rw4un.png" class="lazyload"></p><p>综上所述，fastcgi效率是高于cgi的。</p><h3 id="3-fastcgi"><a href="#3-fastcgi" class="headerlink" title="3.fastcgi"></a>3.fastcgi</h3><ul><li>FastCGi是语言无关的，可伸缩架构的CGI开放扩展</li><li>其主要行为是将CGI解释器进程保持在内存中进行管理调度因此获得较高的性能</li><li>nginx下fastcgi与服务器是分离的</li><li>fastcgi可使用<strong>spawn-fcgi</strong>或者<strong>php-fpm</strong>来管理</li><li>相当于一个代理工具</li><li>角色完成nginx和fastcgi之间的进程间通信</li></ul><p><img alt data-src="https://s1.ax1x.com/2020/03/19/8sY2zn.png" class="lazyload"></p><p>环境配置</p><ul><li><p>处理不了的指令，交给fastcgi处理</p><ul><li><p>数据需要转发</p></li><li><p>数据需要发送到指定的端口</p></li><li><p>#处理一个指令test</p><p>#url:<a href="http://192.168.xx.xx/test" target="_blank" rel="noopener">http://192.168.xx.xx/test</a></p><p>location  /test{</p><p>​        #配置fastcgi模块</p><p>​        fastcgi_pass 127.0.0.1:9001;</p><p>​        include fastcgi.conf;</p><p>}</p></li></ul></li></ul><p>4.spawn-fcgi的使用</p><ul><li>spawn-fcgi -a IP -p 端口 -f fastcgi程序<ul><li>-a -IP:服务器IP地址</li><li>-p -port:服务器将数据发送到的端口</li><li>-f -cgi程序：spawn-fcgi启动时的可执行fastcgi程序</li></ul></li></ul><h1 id="安装过程遇到的问题"><a href="#安装过程遇到的问题" class="headerlink" title="安装过程遇到的问题"></a>安装过程遇到的问题</h1><h3 id="1-源码包"><a href="#1-源码包" class="headerlink" title="1.源码包"></a>1.源码包</h3><p>​    由于我们要安装fastcgi和spawn-fastcgi，在网上找来找去，发现这源码已经10来年没更新了，然后百度了半晌，发现csdn上有很多，但是鄙人穷，充不起c币。于是在<a href="https://www.oschina.net/" target="_blank" rel="noopener">OSCHINA</a>找到了spawn-fcgi的安装包，在某不知名垃圾但还算良心的论坛找到了<a href="http://bbs.verysource.com/" target="_blank" rel="noopener">fastcgi</a>的安装包。望后世之人省却些心力。</p><h3 id="2-传文件"><a href="#2-传文件" class="headerlink" title="2.传文件"></a>2.传文件</h3><p>​    由于我在windows上下载的源码包，然后我们可以用secure-CRT通过rz命令传文件到你的虚拟机上。如果rs报错，则sudo apt install lrzsz即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> nginx </tag>
            
            <tag> cgi </tag>
            
            <tag> fastcgi </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>域名和ip相关知识点</title>
      <link href="/2020/03/17/%E5%9F%9F%E5%90%8D%E5%92%8Cip%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
      <url>/2020/03/17/%E5%9F%9F%E5%90%8D%E5%92%8Cip%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="域名和ip相关知识点"><a href="#域名和ip相关知识点" class="headerlink" title="域名和ip相关知识点"></a>域名和ip相关知识点</h1><h3 id="1-域名和ip"><a href="#1-域名和ip" class="headerlink" title="1.域名和ip"></a>1.域名和ip</h3><ul><li>Ip:形势如1.1.1.1</li><li>二者的关系<ul><li>一个ip可以被多个域名绑定</li><li>一个域名只能绑定一个ip</li></ul></li></ul><p><img alt data-src="https://s1.ax1x.com/2020/03/17/8dZMVg.png" class="lazyload"></p><h3 id="2-域名解析服务器"><a href="#2-域名解析服务器" class="headerlink" title="2.域名解析服务器"></a>2.域名解析服务器</h3><ul><li><p>Pod DNS+:</p><ul><li>首选：119.29.29.29</li><li>备选：182.254.116.166</li></ul></li><li><p>114DNS：</p><ul><li>首选：114.114.114.144</li><li>备选：114.114.114.115</li></ul></li><li><p>阿里ALIDNS:</p><ul><li>首选：223.5.5.5</li><li>备选：223.6.6.6</li></ul></li></ul><h3 id="3-hosts文件"><a href="#3-hosts文件" class="headerlink" title="3.hosts文件"></a>3.hosts文件</h3><ul><li>在本地</li><li>解析域名，得到一个ip</li></ul><h3 id="4-反向代理"><a href="#4-反向代理" class="headerlink" title="4.反向代理"></a>4.反向代理</h3><ul><li>前提：需要有多台服务器</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 域名 </tag>
            
            <tag> ip </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx操作命令及配置文件</title>
      <link href="/2020/03/17/nginx%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/03/17/nginx%E6%93%8D%E4%BD%9C%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><ul><li><p>利用软连接快速启动nginx：<code>ln -s /usr/local/nginx/sbin/nginx /usr/bin/nginx</code></p></li><li><p>强制关闭nginx：<code>sudo nginx -s stop</code>(马上终止)</p></li><li><p>等待nginx当前工作结束之后再退出：<code>sudo nginx -s quit</code>（等待操作完成）</p></li><li><p>热部署(重新加载配置文件）：<code>sudo nginx -s reload</code></p></li></ul><p>Nginx配置文件</p>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构课设四之赫夫曼编/译码器</title>
      <link href="/2020/03/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E8%AE%BE%E5%AE%9E%E9%AA%8C%E5%9B%9B%E4%B9%8B%E8%B5%AB%E5%A4%AB%E6%9B%BC%E7%BC%96%E8%AF%91%E7%A0%81%E5%99%A8/"/>
      <url>/2020/03/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E8%AF%BE%E8%AE%BE%E5%AE%9E%E9%AA%8C%E5%9B%9B%E4%B9%8B%E8%B5%AB%E5%A4%AB%E6%9B%BC%E7%BC%96%E8%AF%91%E7%A0%81%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="Huffman-Tree简介"><a href="#Huffman-Tree简介" class="headerlink" title="Huffman Tree简介"></a>Huffman Tree简介</h1><p>​        赫夫曼树（Huffman Tree），又称最优二叉树，是一类带权路径长度最短的树。假设有n个权值{w1,w2,…,wn}，如果构造一棵有n个叶子节点的二叉树，而这n个叶子节点的权值是{w1,w2,…,wn}，则所构造出的带权路径长度最小的二叉树就被称为赫夫曼树。</p><p>​        这里补充下树的带权路径长度的概念。树的带权路径长度指树中所有叶子节点到根节点的路径长度与该叶子节点权值的乘积之和，如果在一棵二叉树中共有n个叶子节点，用Wi表示第i个叶子节点的权值，Li表示第i个也叶子节点到根节点的路径长度，则该二叉树的带权路径长度 WPL=W1<em>L1 + W2</em>L2 + … Wn*Ln。</p><p>​        <strong>根据节点的个数以及权值的不同，赫夫曼树的形状也各不相同，赫夫曼树具有如下特性：</strong></p><ul><li><p>对于同一组权值，所能得到的赫夫曼树不一定是唯一的。</p></li><li><p>赫夫曼树的左右子树可以互换，因为这并不影响树的带权路径长度。</p></li><li><p>带权值的节点都是叶子节点，不带权值的节点都是某棵子二叉树的根节点。</p></li><li><p>权值越大的节点越靠近赫夫曼树的根节点，权值越小的节点越远离赫夫曼树的根节点。</p></li><li><p>赫夫曼树中只有叶子节点和度为2的节点，没有度为1的节点。</p></li><li><p>一棵有n个叶子节点的赫夫曼树共有2n-1个节点。</p><h1 id="Huffman-Tree的构建"><a href="#Huffman-Tree的构建" class="headerlink" title="Huffman Tree的构建"></a>Huffman Tree的构建</h1><p> 赫夫曼树的构建步骤如下：</p><pre><code>1、将给定的n个权值看做n棵只有根节点（无左右孩子）的二叉树，组成一个集合HT，每棵树的权值为该节点的权值。2、从集合HT中选出2棵权值最小的二叉树，组成一棵新的二叉树，其权值为这2棵二叉树的权值之和。3、将步骤2中选出的2棵二叉树从集合HT中删去，同时将步骤2中新得到的二叉树加入到集合HT中。4、重复步骤2和步骤3，直到集合HT中只含一棵树，这棵树便是赫夫曼树。</code></pre><p> 假如给定如下5个权值：</p><p>​            <img alt data-src="https://s1.ax1x.com/2020/03/17/8NTkbd.png" class="lazyload"></p><p>则按照以上步骤，可以构造出如下面左图所示的赫夫曼树，当然也可能构造出如下面右图所示的赫夫曼树，这并不是唯一的。</p><p><img alt data-src="https://s1.ax1x.com/2020/03/17/8NTFDH.png" class="lazyload"></p><h1 id="Huffman编码"><a href="#Huffman编码" class="headerlink" title="Huffman编码"></a>Huffman编码</h1><p>​       赫夫曼树的应用十分广泛，比如众所周知的在通信电文中的应用。在等传送电文时，我们希望电文的总长尽可能短，因此可以对每个字符设计长度不等的编码，让电文中出现较多的字符采用尽可能短的编码。为了保证在译码时不出现歧义，我们可以采取如下图所示的编码方式：</p></li></ul><p>  <img alt data-src="https://s1.ax1x.com/2020/03/17/8NT9gO.png" class="lazyload"></p><p>   即左分支编码为字符0，右分支编码为字符1，将从根节点到叶子节点的路径上分支字符组成的字符串作为叶子节点字符的编码，这便是赫夫曼编码。我们根据上面左图可以得到各叶子节点的赫夫曼编码如下：<br>      权值为5的节点的赫夫曼编码为：11<br>      权值为4的节点的赫夫曼编码为：10<br>      权值为3的节点的赫夫曼编码为：00<br>      权值为2的节点的赫夫曼编码为：011<br>      权值为1的节点的赫夫曼编码为：010</p><p>  而对于上面右图，则可以得到各叶子节点的赫夫曼编码如下：<br>  权值为5的节点的赫夫曼编码为：00<br>  权值为4的节点的赫夫曼编码为：01<br>  权值为3的节点的赫夫曼编码为：10<br>  权值为2的节点的赫夫曼编码为：110<br>  权值为1的节点的赫夫曼编码为：111</p><p>  <strong>最小带权路径长度(左图):WPL=2<em>3+3</em>1+3<em>2+2</em>4+2<em>5=33<br>  最小带权路径长度(右图):WPL=2</em>5+2<em>4+2</em>3+3<em>2+3</em>1=33</strong><br>  <strong>由此可见，不管是左子树权值大于右子树权值还是小于右子树权值的哈夫曼树的最小带权路径长度不变。</strong></p><h1 id="Huffman编码-解码的c-实现"><a href="#Huffman编码-解码的c-实现" class="headerlink" title="Huffman编码/解码的c++实现"></a>Huffman编码/解码的c++实现</h1><p>  head.h</p>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> <span class="meta-keyword">warning</span> (disable:4996)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 100</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> weight;                </span><br><span class="line"><span class="keyword">int</span> parent; </span><br><span class="line"><span class="keyword">char</span> value;  </span><br><span class="line"><span class="keyword">int</span> lchild, rchild;         </span><br><span class="line">&#125;HTNode, *HuffmanTree;          </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> **HuffmanCode;    </span><br><span class="line"></span><br><span class="line"><span class="function">HuffmanTree <span class="title">create_HuffmanTree</span><span class="params">(<span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select_minium</span><span class="params">(HuffmanTree HT, <span class="keyword">int</span> k, <span class="keyword">int</span> &amp;min1, <span class="keyword">int</span> &amp;min2)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(HuffmanTree HT, <span class="keyword">int</span> k)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HuffmanCoding</span><span class="params">(HuffmanTree HT, HuffmanCode &amp;HC, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countWPL</span><span class="params">(HuffmanTree HT, <span class="keyword">int</span> n)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HuffmanDecoding</span><span class="params">(<span class="keyword">char</span> ch[], HuffmanTree HT,<span class="keyword">int</span> n)</span></span>;</span><br></pre></td></tr></table></figure><p>  main.cpp</p>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"head.h"</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" ========================================================================"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"%                    欢迎使用Huffman翻译器                               %"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"$                        1.初始化                                       $"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"%                        2.编码                                         %"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"$                        3.解码                                         $"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"%                        4.最小带权路径                                  %"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"$                        5.退出                                         $"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"%                                                                       %"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"$                                                                       $"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"%                                                                       %"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"$                                                                       $"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"%                                                                       %"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"$                                                                       $"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"%                                                                       %"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"$                                                                       $"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" ========================================================================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入选项（输入范围位数字1-5）:"</span>;</span><br><span class="line"><span class="keyword">char</span> input;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; input;</span><br><span class="line">HuffmanTree htree = <span class="literal">NULL</span>;</span><br><span class="line">HuffmanCode HC = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (input != <span class="string">'5'</span>) &#123;</span><br><span class="line"><span class="keyword">while</span> (input &gt; <span class="number">53</span> <span class="keyword">or</span> input &lt; <span class="number">49</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入有误，请重新输入！！！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; input;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> (input) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'1'</span>:</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入节点个数："</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">htree = create_HuffmanTree(n);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"赫夫曼树初始化完毕！"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"--------------------------------------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'2'</span>:</span><br><span class="line">HuffmanCoding(htree, HC, n);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'3'</span>: </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">1000</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入编码序列："</span> ;</span><br><span class="line">getchar();</span><br><span class="line"><span class="built_in">cin</span>.getline(ch, <span class="number">1000</span>, <span class="string">'\n'</span>);</span><br><span class="line">HuffmanDecoding(ch, htree,n);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> <span class="string">'4'</span>: &#123;</span><br><span class="line"><span class="keyword">int</span> wpl = countWPL(htree, n);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"最小带权路径长度WPL=%d\n"</span>, wpl);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-----------------------------------------------------------"</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入选项（输入范围位数字1-5）:"</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; input;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"see u next!"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  Huffmancode.cpp</p>  <figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"head.h"</span></span></span><br><span class="line"><span class="function">HuffmanTree <span class="title">create_HuffmanTree</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *wet = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">int</span>) *MAXSIZE);</span><br><span class="line"><span class="keyword">char</span> *value = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">char</span>)*MAXSIZE);</span><br><span class="line"><span class="keyword">int</span> weight;</span><br><span class="line"><span class="keyword">char</span> v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入节点"</span> &lt;&lt; i &lt;&lt; <span class="string">"的值和权重:"</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; v; <span class="built_in">cin</span> &gt;&gt; weight;</span><br><span class="line">*value = v; *wet = weight;</span><br><span class="line">value++; wet++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> total = <span class="number">2</span> * n - <span class="number">1</span>;</span><br><span class="line">HuffmanTree HT = (HuffmanTree)<span class="built_in">malloc</span>(total * <span class="keyword">sizeof</span>(HTNode));</span><br><span class="line"><span class="keyword">if</span> (!HT)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"HuffmanTree malloc faild!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">wet = wet - n;</span><br><span class="line">value = value - n;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">HT[i].parent = <span class="number">-1</span>;</span><br><span class="line">HT[i].lchild = <span class="number">-1</span>;</span><br><span class="line">HT[i].rchild = <span class="number">-1</span>;</span><br><span class="line">HT[i].weight = *wet;</span><br><span class="line">HT[i].value = *value;</span><br><span class="line">wet++; value++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; total; i++)</span><br><span class="line">&#123;</span><br><span class="line">HT[i].parent = <span class="number">-1</span>;</span><br><span class="line">HT[i].lchild = <span class="number">-1</span>;</span><br><span class="line">HT[i].rchild = <span class="number">-1</span>;</span><br><span class="line">HT[i].weight = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> min1, min2; </span><br><span class="line"><span class="keyword">for</span> (i = n; i &lt; total; i++)</span><br><span class="line">&#123;</span><br><span class="line">select_minium(HT, i, min1, min2);</span><br><span class="line">HT[min1].parent = i;</span><br><span class="line">HT[min2].parent = i;</span><br><span class="line">  </span><br><span class="line">HT[i].lchild = min1;</span><br><span class="line">HT[i].rchild = min2;</span><br><span class="line">HT[i].weight = HT[min1].weight + HT[min2].weight;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> HT;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">countWPL</span><span class="params">(HuffmanTree HT, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, countRoads, WPL = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> father = HT[i].parent; </span><br><span class="line">countRoads = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (father != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">countRoads++;</span><br><span class="line">father = HT[father].parent;</span><br><span class="line">&#125;</span><br><span class="line">WPL += countRoads * HT[i].weight;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> WPL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">select_minium</span><span class="params">(HuffmanTree HT, <span class="keyword">int</span> k, <span class="keyword">int</span> &amp;min1, <span class="keyword">int</span> &amp;min2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">min1 = min(HT, k);</span><br><span class="line">min2 = min(HT, k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(HuffmanTree HT, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> min;        </span><br><span class="line"><span class="keyword">int</span> min_weight; </span><br><span class="line"><span class="keyword">while</span> (HT[i].parent != <span class="number">-1</span>)</span><br><span class="line">i++;</span><br><span class="line">min_weight = HT[i].weight;</span><br><span class="line">min = i;</span><br><span class="line"><span class="keyword">for</span> (; i &lt; k; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (HT[i].weight &lt; min_weight &amp;&amp; HT[i].parent == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">min_weight = HT[i].weight;</span><br><span class="line">min = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">HT[min].parent = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HuffmanCoding</span><span class="params">(HuffmanTree HT, HuffmanCode &amp;HC, <span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">HC = (HuffmanCode)<span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="keyword">char</span> *));</span><br><span class="line"><span class="keyword">if</span> (!HC)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"HuffmanCode request memory failed!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> *code = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(n * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"><span class="keyword">if</span> (!code)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"code malloc faild!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line">code[n - <span class="number">1</span>] = <span class="string">'\0'</span>;   </span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> current = i;           </span><br><span class="line"><span class="keyword">int</span> father = HT[i].parent; </span><br><span class="line"><span class="keyword">int</span> start = n - <span class="number">1</span>;           </span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> (father != <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (HT[father].lchild == current)   </span><br><span class="line">code[--start] = <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">else</span>                                     </span><br><span class="line">code[--start] = <span class="string">'1'</span>;</span><br><span class="line">current = father;</span><br><span class="line">father = HT[father].parent;</span><br><span class="line">&#125;</span><br><span class="line">HC[i] = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>((n - start) * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));</span><br><span class="line"><span class="keyword">if</span> (!HC[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"HC[i] malloc faild!"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">strcpy</span>(HC[i], code + start);</span><br><span class="line">&#125;</span><br><span class="line">FILE *file = fopen(<span class="string">"codefile.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == file) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"open error!\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"----------------------编码如下--------------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c %s\n"</span>,HT[i].value,HC[i]);</span><br><span class="line"><span class="built_in">fprintf</span>(file, <span class="string">"%c %s\n"</span>, HT[i].value, HC[i]);</span><br><span class="line">&#125;</span><br><span class="line">fclose(file);</span><br><span class="line"><span class="built_in">free</span>(code); </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"已编码并写入文件codefile.txt"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-----------------------------------------------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">HuffmanDecoding</span><span class="params">(<span class="keyword">char</span> ch[], HuffmanTree HT,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> num[<span class="number">100</span>];</span><br><span class="line">HuffmanTree temp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>(ch); i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (ch[i] == <span class="string">'0'</span>) &#123;</span><br><span class="line">num[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">num[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">FILE *file = fopen(<span class="string">"textfile.txt"</span>, <span class="string">"w"</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == file) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"open error!\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"译码结果为:"</span>;</span><br><span class="line"><span class="built_in">fprintf</span>(file, <span class="string">"%s"</span>, <span class="string">"译码结果："</span>);</span><br><span class="line"><span class="keyword">if</span> (HT) &#123;</span><br><span class="line"><span class="keyword">int</span> cursor = <span class="number">2</span>*n- <span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span> (cnt &lt; <span class="built_in">strlen</span>(ch)) &#123;</span><br><span class="line"><span class="keyword">int</span> temp = cursor;</span><br><span class="line"><span class="keyword">while</span> ((HT[temp].lchild != <span class="number">-1</span>) &amp;&amp; (HT[temp].rchild != <span class="number">-1</span>)) &#123;</span><br><span class="line"><span class="keyword">if</span> (num[cnt] == <span class="number">0</span>) &#123;</span><br><span class="line">temp = HT[temp].lchild;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">temp = HT[temp].rchild;</span><br><span class="line">&#125;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c"</span>, HT[temp].value); </span><br><span class="line"><span class="built_in">fprintf</span>(file, <span class="string">"%c"</span>, HT[temp].value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt;<span class="string">"已打印出译码结果并将结果存入textfile.txt中"</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-------------------------------------------------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*101101011110101010010011100010110101011100*/</span></span><br></pre></td></tr></table></figure><p>  运行结果如下：</p><p>  <img alt data-src="https://s1.ax1x.com/2020/03/17/8NbVa9.png" class="lazyload"></p><p>  <img alt data-src="https://s1.ax1x.com/2020/03/17/8NbZ5R.png" class="lazyload"></p><p>  <img alt data-src="https://s1.ax1x.com/2020/03/17/8NbEVJ.png" class="lazyload"></p><p>  <img alt data-src="https://s1.ax1x.com/2020/03/17/8Nbkb4.png" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 赫夫曼树 </tag>
            
            <tag> 赫夫曼编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Ubuntu 19.10安装nginx时遇到的问题</title>
      <link href="/2020/03/16/%E5%85%B3%E4%BA%8EUbuntu19.10%E4%B8%8B%E5%AE%89%E8%A3%85nginx%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/03/16/%E5%85%B3%E4%BA%8EUbuntu19.10%E4%B8%8B%E5%AE%89%E8%A3%85nginx%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h1 id="关于Ubuntu-19-10安装nginx时遇到的问题"><a href="#关于Ubuntu-19-10安装nginx时遇到的问题" class="headerlink" title="关于Ubuntu 19.10安装nginx时遇到的问题"></a>关于Ubuntu 19.10安装nginx时遇到的问题</h1><h3 id="ubuntu里nginx安装时报cc1：all-warnings-being-treated-as-errors"><a href="#ubuntu里nginx安装时报cc1：all-warnings-being-treated-as-errors" class="headerlink" title="ubuntu里nginx安装时报cc1：all warnings being treated as errors"></a>ubuntu里nginx安装时报cc1：all warnings being treated as errors</h3><p>原因是编译要求太严格 中途有一点点问题 编译就停掉了 所以</p><p>解决方法：<br>找到你解压的那个nginx文件下的objs下的Makefile文件</p><ol><li>打开文件  sudo vi Makefile</li><li>在图中第三行位置 删掉 -Werror   然后按保存并退出即可</li></ol><p><img alt data-src="https://s1.ax1x.com/2020/03/16/8JWHRs.png" class="lazyload"></p><h3 id="启动nginx服务时出现找不到libpcre-so-1"><a href="#启动nginx服务时出现找不到libpcre-so-1" class="headerlink" title="启动nginx服务时出现找不到libpcre.so.1"></a>启动nginx服务时出现找不到libpcre.so.1</h3><p>出现这个问题的原因是没有连接到libpcre.so.1。在正常情况下，你应切换到/lib 目录下</p><p>执行<code>sudo ln -s libpcre.so.0.0.1 licpcre.so.1</code>,但是我怎么也找不到这个libpcre.so.0.0.1文件，遂百度下载了一个libpcre.so.0.0.1的dll文件，链接后仍然不正确，然后执行以下命令<code>ldd which /usr/local/nginx/sbin/nginx</code>,发现在我的系统中，共享库的位置在<code>/usr/x86_64-linux-gnu</code>目录下，链接之后，又出现了一串英文，大意是他是64位dll文件，我是32位系统，遂再次失败。于是灵机一动，发现<code>/usr/x86_64-linux-gnu</code>目录下有个libpcre.so.3和libpcre.so.1很是相像，然后把libpcre.so.3连接成了libpcre.so.1,<code>sudo ./nginx</code> ,终于成功了！</p><p><img alt data-src="https://s1.ax1x.com/2020/03/16/8YrijS.png" class="lazyload"></p><h5 id="进入-usr-x86-64-linux-gnu目录，执行find-pcre-（注意星号里面没有空格，你会发现这些库文件，我还安装了pcre2，你的可能和我不一样不过不要紧，照做就是了）"><a href="#进入-usr-x86-64-linux-gnu目录，执行find-pcre-（注意星号里面没有空格，你会发现这些库文件，我还安装了pcre2，你的可能和我不一样不过不要紧，照做就是了）" class="headerlink" title="进入/usr/x86_64-linux-gnu目录，执行find * pcre *（注意星号里面没有空格，你会发现这些库文件，我还安装了pcre2，你的可能和我不一样不过不要紧，照做就是了）"></a>进入/usr/x86_64-linux-gnu目录，执行find * pcre *（注意星号里面没有空格，你会发现这些库文件，我还安装了pcre2，你的可能和我不一样不过不要紧，照做就是了）</h5><h5 id="此处执行sudo-ln-s-libpcre-so-3-libpcre-so-1"><a href="#此处执行sudo-ln-s-libpcre-so-3-libpcre-so-1" class="headerlink" title="此处执行sudo ln -s libpcre.so.3 libpcre.so.1"></a>此处执行<code>sudo ln -s libpcre.so.3 libpcre.so.1</code></h5><h5 id="之后在-usr-local-nginx-sbin-nginx这个目录下执行sudo-nginx，之后启动ps-aux-grep-nginx"><a href="#之后在-usr-local-nginx-sbin-nginx这个目录下执行sudo-nginx，之后启动ps-aux-grep-nginx" class="headerlink" title="之后在/usr/local/nginx/sbin/nginx这个目录下执行sudo ./nginx，之后启动ps aux | grep nginx"></a>之后在<code>/usr/local/nginx/sbin/nginx</code>这个目录下执行<code>sudo ./nginx</code>，之后启动<code>ps aux | grep nginx</code></h5><h5 id="出现下图，说明配置正确"><a href="#出现下图，说明配置正确" class="headerlink" title="出现下图，说明配置正确"></a>出现下图，说明配置正确</h5><p><img alt data-src="https://s1.ax1x.com/2020/03/16/8Yrkng.png" class="lazyload"></p><h5 id="最后，用本机浏览器访问你的ip，出现Welcome-to-nginx！"><a href="#最后，用本机浏览器访问你的ip，出现Welcome-to-nginx！" class="headerlink" title="最后，用本机浏览器访问你的ip，出现Welcome to nginx！"></a>最后，用本机浏览器访问你的ip，出现Welcome to nginx！</h5><h5 id="大功告成"><a href="#大功告成" class="headerlink" title="大功告成"></a>大功告成</h5>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卷积神经网络实战之Lenet5 &amp; Resnet</title>
      <link href="/2020/03/15/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AE%9E%E6%88%98%E4%B9%8BLenet5-Resnet/"/>
      <url>/2020/03/15/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E5%AE%9E%E6%88%98%E4%B9%8BLenet5-Resnet/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="CNN最近几年的发展"><a href="#CNN最近几年的发展" class="headerlink" title="CNN最近几年的发展"></a>CNN最近几年的发展</h2><p>​        CNN，全称为<em>Convolutional</em> <em>Neural</em> <em>Network</em>，中文名称卷积神经网络。</p><p>​        卷积神经网络（Convolutional Neural Networks, CNN）是一类包含<a href="https://baike.baidu.com/item/卷积/9411006" target="_blank" rel="noopener">卷积</a>计算且具有深度结构的<a href="https://baike.baidu.com/item/前馈神经网络/7580523" target="_blank" rel="noopener">前馈神经网络</a>（Feedforward Neural Networks），是<a href="https://baike.baidu.com/item/深度学习/3729729" target="_blank" rel="noopener">深度学习</a>（deep learning）的代表算法之一   。卷积神经网络具有<a href="https://baike.baidu.com/item/表征学习/2140515" target="_blank" rel="noopener">表征学习</a>（representation learning）能力，能够按其阶层结构对输入信息进行平移不变分类（shift-invariant classification），因此也被称为“平移不变人工神经网络（Shift-Invariant Artificial Neural Networks, SIANN）” 。</p><p>​        对卷积神经网络的研究始于二十世纪80至90年代，时间延迟网络和LeNet-5是最早出现的卷积神经网络  ；在二十一世纪后，随着深度学习理论的提出和数值计算设备的改进，卷积神经网络得到了快速发展，并被应用于<a href="https://baike.baidu.com/item/计算机视觉/2803351" target="_blank" rel="noopener">计算机视觉</a>、<a href="https://baike.baidu.com/item/自然语言处理/365730" target="_blank" rel="noopener">自然语言处理</a>等领域 。</p><p>​        <img alt data-src="https://s1.ax1x.com/2020/03/15/88wn3Q.png" class="lazyload"></p><p>​       在2012年之前，ImageNet的错误率都是比较高的，直到2012年AlexNet的横空出世，将错误率一下子下降了</p><p>近10%，掀起了一股深度学习的浪潮。</p><h3 id="AlexNet"><a href="#AlexNet" class="headerlink" title="AlexNet"></a>AlexNet</h3><p>​     <img alt data-src="https://s1.ax1x.com/2020/03/15/88wlBq.png" class="lazyload"></p><p>​        如图为Alexnet的网络结构，它是由八层网络构成，以11*11的kernel进行大刀阔斧的提取特征，在当时是很很好的模型，在今天看来，它的粒度太大。可以看到，当时比较先进的显卡只有3GB大小，所以用两块显卡跑。</p><h3 id="VGG"><a href="#VGG" class="headerlink" title="VGG"></a>VGG</h3><p>​        <img alt data-src="https://s1.ax1x.com/2020/03/15/88w8EV.png" class="lazyload"></p><p>​        这是2014年ILSVRC的亚军VGG，相比2012年的AlexNet，error又下降了近10%。它的网络层数又加深了，从AlexNet的8层网络，变成了11-19层。Kernel大小也变得更加细致了。</p><h3 id="GoogleNET"><a href="#GoogleNET" class="headerlink" title="GoogleNET"></a>GoogleNET</h3><p>​    <img alt data-src="https://s1.ax1x.com/2020/03/15/88wGNT.png" class="lazyload"></p><p>​        上图为2014年的冠军GoogLeNet,为了纪念1998年Yann LeCun提出的1998年LeNet5,将字母L大写。该网络模型为22层。当时人们有一个想法，是不是网络层数越多，train的效果越好呢？在经历大量的实验之后，发现并不是这样的。也就是说，并不是层数越多越好。于是中国学者何凯明（大神一位，有兴趣可以百度）在2015年提出了一种网络模型叫做残差网络ResNet。</p><p>​        该模型的创新点在于，它提出了一个类似于电路中“短接”的概念，将那些train效果起到negative作用的layer丢掉，从而在保证层数的情况下又保证了一个low error。</p><p>​        <img alt data-src="https://s1.ax1x.com/2020/03/15/882lz6.png" class="lazyload"></p><p>我们今天主要介绍LeNet5和ResNet。</p><p>​    </p><h2 id="LeNet5"><a href="#LeNet5" class="headerlink" title="LeNet5"></a>LeNet5</h2><p>​        LeNet5是1998年由Yann LeCun及其团队提出的，该模型在当时的手写数字识别问题中取得了成功。</p><p><img alt data-src="https://s1.ax1x.com/2020/03/15/88wucj.png" class="lazyload"></p><p>​    该网络由2层卷积层，3层全连接层共5层网络构成。图片的大小为32*32.</p><h4 id="lenet5-py"><a href="#lenet5-py" class="headerlink" title="lenet5.py"></a>lenet5.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span> nn</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lenet5</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(Lenet5, self).__init__()</span><br><span class="line">        self.conv_unit = nn.Sequential(</span><br><span class="line">            <span class="comment">#x :[b,3,32,32]</span></span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">3</span>,out_channels=<span class="number">6</span>,kernel_size=<span class="number">5</span>,stride=<span class="number">1</span>,padding=<span class="number">0</span>),<span class="comment">#新建卷积层</span></span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>,stride=<span class="number">2</span>,padding=<span class="number">0</span>), <span class="comment">#池化层压缩特征 只改变长款，不改变channel</span></span><br><span class="line">            nn.Conv2d(in_channels=<span class="number">6</span>,out_channels=<span class="number">16</span>,kernel_size=<span class="number">5</span>,stride=<span class="number">1</span>,padding=<span class="number">0</span>),</span><br><span class="line">            nn.MaxPool2d(kernel_size=<span class="number">2</span>,stride=<span class="number">2</span>,padding=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">        )</span><br><span class="line">        self.fc_unit = nn.Sequential( <span class="comment">#三成全连接层</span></span><br><span class="line">            nn.Linear(<span class="number">16</span>*<span class="number">5</span>*<span class="number">5</span>,<span class="number">120</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">120</span>,<span class="number">84</span>),</span><br><span class="line">            nn.ReLU(),</span><br><span class="line">            nn.Linear(<span class="number">84</span>,<span class="number">10</span>)</span><br><span class="line">        )</span><br><span class="line">        <span class="comment">#[b,3,32,32]</span></span><br><span class="line">        tmp = torch.randn(<span class="number">2</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">32</span>)</span><br><span class="line">        out = self.conv_unit(tmp)</span><br><span class="line">        <span class="comment">#[b,16,5,5]</span></span><br><span class="line">        print(<span class="string">'conv_out:'</span>,out.shape)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        batchsz = x.size(<span class="number">0</span>)</span><br><span class="line">        <span class="comment">#[b,3,32,32] =&gt; [b,16,5,5]</span></span><br><span class="line">        x = self.conv_unit(x)</span><br><span class="line">        <span class="comment">#[b,16,5,5] =&gt; [b,16*5*5]</span></span><br><span class="line">        x = x.view(batchsz,<span class="number">16</span>*<span class="number">5</span>*<span class="number">5</span>) <span class="comment">#flatten</span></span><br><span class="line">        <span class="comment">#[b,16*5*5] =&gt; [b,10]</span></span><br><span class="line">        logits = self.fc_unit(x)</span><br><span class="line">        <span class="keyword">return</span> logits</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    net = Lenet5()</span><br><span class="line">    tmp = torch.randn(<span class="number">2</span>,<span class="number">3</span>,<span class="number">32</span>,<span class="number">32</span>) </span><br><span class="line">    out = net(tmp)</span><br><span class="line">    print(<span class="string">'lenet out:'</span>,out.shape)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><h4 id="main-py"><a href="#main-py" class="headerlink" title="main.py"></a>main.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> torch</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span> torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span> torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span> torch <span class="keyword">import</span>  nn,optim</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Lenet5 <span class="keyword">import</span> Lenet5</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    batchsz=<span class="number">128</span>   <span class="comment">#根据自己机器的性能来定义batchsize，不建议太小，因为梯度的优化方向是按照平均</span></span><br><span class="line">      <span class="comment">#梯度方向，所以太小会具有偶然性</span></span><br><span class="line">                <span class="comment">#新建cifar文件夹，train = true ，transforms</span></span><br><span class="line">    cifar_train = datasets.CIFAR10(<span class="string">'cifar'</span>,<span class="literal">True</span>,transform=transforms.Compose([</span><br><span class="line">        transforms.Resize((<span class="number">32</span>,<span class="number">32</span>)), <span class="comment">#resize程需要的大小</span></span><br><span class="line">        transforms.ToTensor()</span><br><span class="line">    ]),download=<span class="literal">True</span>)<span class="comment">#装载CIFAR10数据集</span></span><br><span class="line"></span><br><span class="line">    cifar_train = DataLoader(cifar_train,batch_size=batchsz,shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    cifar_test = datasets.CIFAR10(<span class="string">'cifar'</span>, <span class="literal">True</span>, transform=transforms.Compose([</span><br><span class="line">        transforms.Resize((<span class="number">32</span>,<span class="number">32</span>)),  <span class="comment"># resize程需要的大小</span></span><br><span class="line">        transforms.ToTensor()</span><br><span class="line">    ]), download=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    cifar_test = DataLoader(cifar_test, batch_size=batchsz, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    x,label = iter(cifar_train).next()</span><br><span class="line">    print(<span class="string">'x:'</span>,x.shape,<span class="string">'label:'</span>,label.shape)</span><br><span class="line"></span><br><span class="line">    device = torch.device(<span class="string">'cuda'</span>)  <span class="comment">#指定GPU寻来你</span></span><br><span class="line">    model = Lenet5().to(device)</span><br><span class="line">    criteon = nn.CrossEntropyLoss().to(device)</span><br><span class="line">    optimizer = optim.Adam(model.parameters(),lr = <span class="number">1e-3</span>)</span><br><span class="line">    print(model)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">100</span>):</span><br><span class="line">        model.train()</span><br><span class="line">        <span class="keyword">for</span> batchidx,(x,label) <span class="keyword">in</span> enumerate(cifar_train):</span><br><span class="line">            <span class="comment">#x [b,3,32,32]</span></span><br><span class="line">            <span class="comment">#label [b]</span></span><br><span class="line">            x,label = x.to(device),label.to(device)</span><br><span class="line">            logits = model(x)</span><br><span class="line">            <span class="comment">#logits:[b,10]</span></span><br><span class="line">            <span class="comment">#label: [b]</span></span><br><span class="line">            <span class="comment">#loss:tensor scalar</span></span><br><span class="line">            loss = criteon(logits,label)</span><br><span class="line"></span><br><span class="line">            <span class="comment">#backpropagate</span></span><br><span class="line">            optimizer.zero_grad()      <span class="comment">#记得迭代之前梯度要清零</span></span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line"></span><br><span class="line">        print(epoch,<span class="string">"single_loss:"</span>,loss.item()) <span class="comment">#打印一个batch的loss</span></span><br><span class="line"></span><br><span class="line">        model.eval()            <span class="comment">#验证集</span></span><br><span class="line">        <span class="keyword">with</span> torch.no_grad(): <span class="comment">#加入此函数的目的是为了不要带有梯度，因为测试集不需要梯度</span></span><br><span class="line">            <span class="comment">#test</span></span><br><span class="line">            total_correct = <span class="number">0</span></span><br><span class="line">            total_num = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> x,label <span class="keyword">in</span> cifar_test:</span><br><span class="line">                <span class="comment">#[b,3,32,32]</span></span><br><span class="line">                <span class="comment">#[b]</span></span><br><span class="line">                x,label = x.to(device),label.to(device)</span><br><span class="line"></span><br><span class="line">                <span class="comment">#[b,10]</span></span><br><span class="line">                logits = model(x)</span><br><span class="line">                <span class="comment">#[b]</span></span><br><span class="line">                pred = logits.argmax(dim = <span class="number">1</span>) <span class="comment">#max 取最大值 argmax取最大值所对应的下标</span></span><br><span class="line">                <span class="comment">#[b] vs[b] =&gt; scalar tensor</span></span><br><span class="line">                correct = torch.eq(pred,label).float().sum().item()</span><br><span class="line">                total_correct += correct</span><br><span class="line">                total_num += x.size(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">            acc = total_correct/total_num</span><br><span class="line">            print(epoch,<span class="string">'test acc:'</span>,acc)   <span class="comment">#打印平均正确率</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>​        可以看到，在epoch达到50多次的时候会出现明显的震荡。</p><p><img alt data-src="https://s1.ax1x.com/2020/03/15/88w1H0.png" class="lazyload"></p><p>​     我仅仅训练了100个epoch,accuracy达到了97%左右</p><p>​                <img alt data-src="https://s1.ax1x.com/2020/03/15/88wQun.png" class="lazyload"></p><h2 id="ResNet"><a href="#ResNet" class="headerlink" title="ResNet"></a>ResNet</h2><p>​            </p><p><img alt data-src="https://s1.ax1x.com/2020/03/15/882lz6.png" class="lazyload"></p><p>​        以这样的”短接”操作，来保证层数和准确率。ResNet是何凯明同学在2015年的ILSVRC提出的，同时也是这届大赛的冠军。他于2016年获得CVPR的Best Paper。</p><h4 id="ResNet-py"><a href="#ResNet-py" class="headerlink" title="ResNet.py"></a>ResNet.py</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span>  torch</span><br><span class="line"><span class="keyword">from</span>    torch <span class="keyword">import</span>  nn</span><br><span class="line"><span class="keyword">from</span>    torch.nn <span class="keyword">import</span> functional <span class="keyword">as</span> F</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResBlk</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    resnet block</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, ch_in, ch_out, stride=<span class="number">1</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param ch_in:</span></span><br><span class="line"><span class="string">        :param ch_out:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        super(ResBlk, self).__init__()</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        self.conv1 = nn.Conv2d(ch_in, ch_out, kernel_size=<span class="number">3</span>, stride=stride, padding=<span class="number">1</span>)</span><br><span class="line">        self.bn1 = nn.BatchNorm2d(ch_out)  <span class="comment">#序列化  让train更加的快速和稳定</span></span><br><span class="line">        self.conv2 = nn.Conv2d(ch_out, ch_out, kernel_size=<span class="number">3</span>, stride=<span class="number">1</span>, padding=<span class="number">1</span>)</span><br><span class="line">        self.bn2 = nn.BatchNorm2d(ch_out)</span><br><span class="line"></span><br><span class="line">        self.extra = nn.Sequential()  <span class="comment">#初始化self.extra</span></span><br><span class="line">        <span class="keyword">if</span> ch_out != ch_in: <span class="comment">#如果输入输出的channel不匹配，进行归一</span></span><br><span class="line">            <span class="comment"># [b, ch_in, h, w] =&gt; [b, ch_out, h, w]</span></span><br><span class="line">            self.extra = nn.Sequential(</span><br><span class="line">                nn.Conv2d(ch_in, ch_out, kernel_size=<span class="number">1</span>, stride=stride),</span><br><span class="line">                nn.BatchNorm2d(ch_out)</span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param x: [b, ch, h, w]</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        out = F.relu(self.bn1(self.conv1(x)))</span><br><span class="line">        out = self.bn2(self.conv2(out))   <span class="comment">#激活函数可加可不加</span></span><br><span class="line">        <span class="comment"># short cut.</span></span><br><span class="line">        <span class="comment"># extra module: [b, ch_in, h, w] =&gt; [b, ch_out, h, w]</span></span><br><span class="line">        <span class="comment"># element-wise add:</span></span><br><span class="line">        out = self.extra(x) + out  <span class="comment">#维度不匹配则无法相加，对应于图片中的F(X)+X</span></span><br><span class="line">        out = F.relu(out)</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> out</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ResNet18</span><span class="params">(nn.Module)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        super(ResNet18, self).__init__()</span><br><span class="line"></span><br><span class="line">        self.conv1 = nn.Sequential(</span><br><span class="line">            nn.Conv2d(<span class="number">3</span>, <span class="number">64</span>, kernel_size=<span class="number">3</span>, stride=<span class="number">3</span>, padding=<span class="number">0</span>),</span><br><span class="line">            nn.BatchNorm2d(<span class="number">64</span>)</span><br><span class="line">        )</span><br><span class="line">        <span class="comment"># followed 4 blocks</span></span><br><span class="line">        <span class="comment"># [b, 64, h, w] =&gt; [b, 128, h ,w]</span></span><br><span class="line">        self.blk1 = ResBlk(<span class="number">64</span>, <span class="number">128</span>, stride=<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># [b, 128, h, w] =&gt; [b, 256, h, w]</span></span><br><span class="line">        self.blk2 = ResBlk(<span class="number">128</span>, <span class="number">256</span>, stride=<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># # [b, 256, h, w] =&gt; [b, 512, h, w]</span></span><br><span class="line">        self.blk3 = ResBlk(<span class="number">256</span>, <span class="number">512</span>, stride=<span class="number">2</span>)</span><br><span class="line">        <span class="comment"># # [b, 512, h, w] =&gt; [b, 1024, h, w]</span></span><br><span class="line">        self.blk4 = ResBlk(<span class="number">512</span>, <span class="number">512</span>, stride=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">        self.outlayer = nn.Linear(<span class="number">512</span>*<span class="number">1</span>*<span class="number">1</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">forward</span><span class="params">(self, x)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        :param x:</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        x = F.relu(self.conv1(x))</span><br><span class="line">        <span class="comment"># [b, 64, h, w] =&gt; [b, 1024, h, w]</span></span><br><span class="line">        x = self.blk1(x)</span><br><span class="line">        x = self.blk2(x)</span><br><span class="line">        x = self.blk3(x)</span><br><span class="line">        x = self.blk4(x)</span><br><span class="line">        <span class="comment"># print('after conv:', x.shape) #[b, 512, 2, 2]</span></span><br><span class="line">        <span class="comment"># [b, 512, h, w] =&gt; [b, 512, 1, 1]</span></span><br><span class="line">        x = F.adaptive_avg_pool2d(x, [<span class="number">1</span>, <span class="number">1</span>])</span><br><span class="line">        <span class="comment"># print('after pool:', x.shape)</span></span><br><span class="line">        x = x.view(x.size(<span class="number">0</span>), <span class="number">-1</span>)</span><br><span class="line">        x = self.outlayer(x)</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    blk = ResBlk(<span class="number">64</span>, <span class="number">128</span>, stride=<span class="number">4</span>)</span><br><span class="line">    tmp = torch.randn(<span class="number">2</span>, <span class="number">64</span>, <span class="number">32</span>, <span class="number">32</span>)</span><br><span class="line">    out = blk(tmp)</span><br><span class="line">    print(<span class="string">'block:'</span>, out.shape)</span><br><span class="line">    x = torch.randn(<span class="number">2</span>, <span class="number">3</span>, <span class="number">32</span>, <span class="number">32</span>)</span><br><span class="line">    model = ResNet18()</span><br><span class="line">    out = model(x)</span><br><span class="line">    print(<span class="string">'resnet:'</span>, out.shape)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#main.py</span></span><br><span class="line"><span class="keyword">import</span>  torch</span><br><span class="line"><span class="keyword">from</span>    torch.utils.data <span class="keyword">import</span> DataLoader</span><br><span class="line"><span class="keyword">from</span>    torchvision <span class="keyword">import</span> datasets</span><br><span class="line"><span class="keyword">from</span>    torchvision <span class="keyword">import</span> transforms</span><br><span class="line"><span class="keyword">from</span>    torch <span class="keyword">import</span> nn, optim</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span>    lenet5 <span class="keyword">import</span> Lenet5</span><br><span class="line"><span class="keyword">from</span>    resnet <span class="keyword">import</span> ResNet18</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    batchsz = <span class="number">128</span></span><br><span class="line"></span><br><span class="line">    cifar_train = datasets.CIFAR10(<span class="string">'cifar'</span>, <span class="literal">True</span>, transform=transforms.Compose([</span><br><span class="line">        transforms.Resize((<span class="number">32</span>, <span class="number">32</span>)),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>], <span class="comment">#RGB三个通道的均值</span></span><br><span class="line">                             std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>]) <span class="comment">#RGB三个通道的方差</span></span><br><span class="line">    ]), download=<span class="literal">True</span>)</span><br><span class="line">    cifar_train = DataLoader(cifar_train, batch_size=batchsz, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">    cifar_test = datasets.CIFAR10(<span class="string">'cifar'</span>, <span class="literal">False</span>, transform=transforms.Compose([</span><br><span class="line">        transforms.Resize((<span class="number">32</span>, <span class="number">32</span>)),</span><br><span class="line">        transforms.ToTensor(),</span><br><span class="line">        transforms.Normalize(mean=[<span class="number">0.485</span>, <span class="number">0.456</span>, <span class="number">0.406</span>],</span><br><span class="line">                             std=[<span class="number">0.229</span>, <span class="number">0.224</span>, <span class="number">0.225</span>])</span><br><span class="line">    ]), download=<span class="literal">True</span>)</span><br><span class="line">    cifar_test = DataLoader(cifar_test, batch_size=batchsz, shuffle=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    x, label = iter(cifar_train).next()</span><br><span class="line">    print(<span class="string">'x:'</span>, x.shape, <span class="string">'label:'</span>, label.shape)</span><br><span class="line"></span><br><span class="line">    device = torch.device(<span class="string">'cuda'</span>)</span><br><span class="line">    <span class="comment"># model = Lenet5().to(device)</span></span><br><span class="line">    model = ResNet18().to(device)</span><br><span class="line"></span><br><span class="line">    criteon = nn.CrossEntropyLoss().to(device)</span><br><span class="line">    optimizer = optim.Adam(model.parameters(), lr=<span class="number">1e-3</span>)</span><br><span class="line">    print(model)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> epoch <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line"></span><br><span class="line">        model.train()</span><br><span class="line">        <span class="keyword">for</span> batchidx, (x, label) <span class="keyword">in</span> enumerate(cifar_train):</span><br><span class="line">            <span class="comment"># [b, 3, 32, 32]</span></span><br><span class="line">            <span class="comment"># [b]</span></span><br><span class="line">            x, label = x.to(device), label.to(device)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            logits = model(x)</span><br><span class="line">            <span class="comment"># logits: [b, 10]</span></span><br><span class="line">            <span class="comment"># label:  [b]</span></span><br><span class="line">            <span class="comment"># loss: tensor scalar</span></span><br><span class="line">            loss = criteon(logits, label)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># backprop</span></span><br><span class="line">            optimizer.zero_grad()</span><br><span class="line">            loss.backward()</span><br><span class="line">            optimizer.step()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        print(epoch, <span class="string">'loss:'</span>, loss.item())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        model.eval()</span><br><span class="line">        <span class="keyword">with</span> torch.no_grad():</span><br><span class="line">            <span class="comment"># test</span></span><br><span class="line">            total_correct = <span class="number">0</span></span><br><span class="line">            total_num = <span class="number">0</span></span><br><span class="line">            <span class="keyword">for</span> x, label <span class="keyword">in</span> cifar_test:</span><br><span class="line">                <span class="comment"># [b, 3, 32, 32]</span></span><br><span class="line">                <span class="comment"># [b]</span></span><br><span class="line">                x, label = x.to(device), label.to(device)</span><br><span class="line"></span><br><span class="line">                <span class="comment"># [b, 10]</span></span><br><span class="line">                logits = model(x)</span><br><span class="line">                <span class="comment"># [b]</span></span><br><span class="line">                pred = logits.argmax(dim=<span class="number">1</span>)</span><br><span class="line">                <span class="comment"># [b] vs [b] =&gt; scalar tensor</span></span><br><span class="line">                correct = torch.eq(pred, label).float().sum().item()</span><br><span class="line">                total_correct += correct</span><br><span class="line">                total_num += x.size(<span class="number">0</span>)</span><br><span class="line">                <span class="comment"># print(correct)</span></span><br><span class="line"></span><br><span class="line">            acc = total_correct / total_num</span><br><span class="line">            print(epoch, <span class="string">'test acc:'</span>, acc)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>​        可以看到，ResNet的main文件和LeNet5的main文件相差不多。这说明，我门可以一套模板来训练不同的模型。实际应用中还可以加入一些工程技巧，比如数据增强操作，图片的旋转角度不宜太大，在-15°到15°为宜，角度太大，经实验证明，效果并不好。</p>]]></content>
      
      
      
        <tags>
            
            <tag> deep learning </tag>
            
            <tag> CNN </tag>
            
            <tag> Lenet5 </tag>
            
            <tag> Resnet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github实用搜索技巧</title>
      <link href="/2020/03/15/github%E5%AE%9E%E7%94%A8%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/"/>
      <url>/2020/03/15/github%E5%AE%9E%E7%94%A8%E6%90%9C%E7%B4%A2%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="搜开发者"><a href="#搜开发者" class="headerlink" title="搜开发者"></a>搜开发者</h2><p>坊间传闻人事招聘开发类员工时，招聘对象在 GitHub 贡献会是重要的参考指标之一。GitHub 作为优秀国产开源软件的集散地之一，埋藏了不少出色的开发者，所以在寻找国产软件的时候，可以尝试先找国内开发者。利用 GitHub 强大的搜索功能，增加几个搜索参数即可轻松找到「目标人物」。</p><p>（注：GitHub 官方还支持很多搜索条件，在 <a href="https://help.github.com/articles/about-searching-on-github/" target="_blank" rel="noopener">这里</a> 可以查看官方出品的搜索技巧。）</p><p><img alt="img" data-src="https://cdn.sspai.com/2018/08/10/8fff67288a075c18b3ddad2e67b2abbf.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" class="lazyload">Github 搜索技巧 - 找开发者</p><p>比如需要寻找国产软件，首先想到的应该是在 GituHub 上找国内开发者，搜索时设置 <code>location</code> 为 China，如果你要寻找使用 javascript 语言开发者，则再增加 <code>language</code> 为 javascript，整个搜索条件就是：<code>language:javascript location:china</code>，从搜索结果来看，我们找到了近 17000 名地区信息填写为 china 的 javascript 开发者，朋友们熟悉的阮一峰老师排在前列。根据官方指引，搜索 GitHub 用户时还支持使用 <code>followers</code>、<code>in:fullname</code> 组合条件进行搜索。</p><p><img alt="img" data-src="https://cdn.sspai.com/2018/08/08/99cea8df39cd5864874dfa99e4e1799f.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" class="lazyload">使用组合条件进行搜索</p><p><img alt="img" data-src="https://cdn.sspai.com/2018/08/08/1c9064e9f31ac9a19c002825f75daac8.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" class="lazyload">搜索条件&lt;language:javascript location:china&gt;</p><h2 id="搜项目"><a href="#搜项目" class="headerlink" title="搜项目"></a>搜项目</h2><p>我们需要在 GitHub 上找到优秀的项目和工具，同样，通过关键字或者设置搜索条件帮助你事半功倍找到好资源。我的使用习惯是先用某些关键词搜索，得到的搜索结果优先展示一些现成的软件和工具。</p><p><img alt="img" data-src="https://cdn.sspai.com/2018/08/10/6ec59d98e56aaae64475339aaa80f49b.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" class="lazyload">GitHub 搜索技巧 - 找项目</p><p><strong>Awesome + 关键字</strong></p><p>Awesome 似乎已经成为不少 GitHub 项目喜爱的命名之一，比如前面提及要找到优秀的 Windows 软件，可以尝试搜索 <code>Awesome windows</code>，得到这样的搜索结果：</p><p><img alt="img" data-src="https://cdn.sspai.com/2018/08/08/ffba2492882ad53e78c2f71bbadd66f1.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" class="lazyload">Awesome windows 搜索结果</p><p>排名前列的结果出现了 <a href="https://github.com/Awesome-Windows/Awesome" target="_blank" rel="noopener">Windows/Awesome 项目</a>，这里集合了 Windows 上优质和精选的最佳应用程序及工具列表。在这里，我收集了这些 Awesome 主题的优秀项目：<a href="https://github.com/sindresorhus/awesome" target="_blank" rel="noopener">The awesome manifesto</a>、<a href="https://github.com/vsouza/awesome-ios" target="_blank" rel="noopener">Awesome iOS frameworks</a>、<a href="https://github.com/JStumpp/awesome-android" target="_blank" rel="noopener">Awesome wesome Android libraries and resources</a>。</p><p><strong>设置搜索条件</strong></p><p>如果你明确需要寻找某类特定的项目，比如用某种语言开发、Stars 数量需要达到标准的项目，在搜索框中直接输入搜索条件即可。其中用于发现项目，我的用法是灵活运用下面几个搜索条件：<code>stars:</code>、<code>language:</code>、<code>forks:</code>，其实就是设置项目收藏、开发语言、派生的搜索条件，比如输入 <code>stars:&gt;=500 language:javascript</code>，<a href="https://github.com/search?q=stars%3A>%3D500+language%3Ajavascript" target="_blank" rel="noopener">得到的结果</a> 就是收藏大于和等于 500 的 javascript 项目，排名前列是开源代码库和课程项目 freeCodeCamp、大热门的 Vue 和 React 项目。</p><p><img alt="img" data-src="https://cdn.sspai.com/2018/08/08/f550f60bb9708166a9ede09432c75a36.jpg?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" class="lazyload">搜索条件<a href="stars:" target="_blank" rel="noopener">stars:</a>=500 language:javascript&gt;</p><p>如果觉得记住这些搜索条件略显繁琐的话，使用 GitHub 提供的 <a href="https://github.com/search/advanced" target="_blank" rel="noopener">高级搜索功能</a>，同样可用自定义条件进行搜索。或者参考官方给出的帮助指南 <a href="https://help.github.com/articles/searching-on-github/" target="_blank" rel="noopener">Searching on GitHub</a> ，里面有更多关于项目、代码、评论、问题等搜索技巧。</p><p><img alt="img" data-src="https://cdn.sspai.com/2018/08/08/83eeda517d7d3ff0ff493cf008a73f65.png?imageView2/2/w/1120/q/90/interlace/1/ignore-error/1" class="lazyload">GitHub 高级搜索功能</p>]]></content>
      
      
      
        <tags>
            
            <tag> 实用搜索技巧 </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows通过xrdp链接阿里云服务器Ubuntu</title>
      <link href="/2020/03/15/windows%E9%80%9A%E8%BF%87xrdp%E9%93%BE%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8Ubuntu/"/>
      <url>/2020/03/15/windows%E9%80%9A%E8%BF%87xrdp%E9%93%BE%E6%8E%A5%E9%98%BF%E9%87%8C%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8Ubuntu/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>本地Windows远程桌面连接阿里云Ubuntu 16.04服务器:</p><p>1、目的:希望通过本地的Windows远程桌面连接到阿里云的Ubuntu服务器,通过远程桌面图形界面的方式操作服务器。</p><p>2、条件:申请的阿里云Ubuntu服务器一台,本地Windows操作系统电脑一台。</p><p>3、如何远程桌面连接:</p><p>(1)首先通过Windows系统下连接Linux系统的命令行工具连接Ubuntu服务器,(工具:xshell,securecrt,putty等)。</p><p>(2)通过Windows下工具连接到linux操作系统,之后打开命令窗口,切换到root权限。</p><p>(3)先安装更新:<code>apt-get upate</code>。</p><p>(4)安装xrdp:输入<code>apt-get install xrdp</code>–&gt;回车–&gt;输入”y”–&gt;回车,安装完成。</p><p>   (xrdp: An open source remote desktop protocol(rdp) server)</p><p>(5)安装vnc4server:输入<code>apt-get install vnc4server</code>“–&gt;回车–&gt;输入”y”–&gt;回车,安装完成。</p><p>   (VNC (Virtual Network Console)是虚拟网络控制台的缩写)</p><p>(6)安装xfce4:输入<code>apt-get install xubuntu-desktop&quot;</code>–&gt;回车–&gt;输入”y”–&gt;回车。</p><p>​      –&gt;输入<code>echo &quot;xfce4-session&quot; &gt;~/.xsession</code>–&gt;回车–&gt;输入<code>service xrdp restart</code>–&gt;回车,安装完成。</p><p>​     (Xfce是一个自由软件,运行在类Unix操作系统 (如Linux、FreeBSD 和 Solaris)上,提供轻量级桌面环境。)</p><p>(7)在本地Windows电脑上,使用”窗口键+R”打开”运行对话框”–&gt;输入”mstsc”–&gt;回车–&gt;输入Ubuntu主机的IP地址–&gt;“连接”。</p><p>(8)选择”sesman-Xvnc”–&gt;输入”用户名和密码”–&gt;回车,成功登录到Ubuntu桌面,现在可以进行远程操作了。</p><h3 id="（注意：最新版本的xrdp没有“sesman-Xvnc”这一选项，选择默认的”xorg”链接即可）。"><a href="#（注意：最新版本的xrdp没有“sesman-Xvnc”这一选项，选择默认的”xorg”链接即可）。" class="headerlink" title="（注意：最新版本的xrdp没有“sesman-Xvnc”这一选项，选择默认的”xorg”链接即可）。"></a>（注意：最新版本的xrdp没有“sesman-Xvnc”这一选项，选择默认的”xorg”链接即可）。</h3><p><img alt data-src="https://s1.ax1x.com/2020/03/15/81faod.jpg" class="lazyload"></p><p>然后我们点击<strong>显示选项</strong>，将用户名改为自己Ubuntu上的用户名，我的是root。</p><p>​    <img alt data-src="https://s1.ax1x.com/2020/03/15/81fLTJ.png" class="lazyload"></p><p>如下所示，输入<strong>密码</strong>即可链接远程<code>桌面</code>。</p><p>​    </p><p><img alt data-src="https://s1.ax1x.com/2020/03/15/81h9OO.png" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 服务器 </tag>
            
            <tag> Linux </tag>
            
            <tag> 阿里云 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉搜索树的相关操作</title>
      <link href="/2019/12/11/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C-1/"/>
      <url>/2019/12/11/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C-1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> *<span class="title">Position</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> Position BinTree;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> &#123;</span></span><br><span class="line">ElementType Data;</span><br><span class="line">BinTree Left;</span><br><span class="line">BinTree Right;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreorderTraversal</span><span class="params">(BinTree BT)</span></span>; </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InorderTraversal</span><span class="params">(BinTree  BT)</span></span>;  </span><br><span class="line"></span><br><span class="line"><span class="function">BinTree <span class="title">Insert</span><span class="params">(BinTree BST, ElementType X)</span></span>;</span><br><span class="line"><span class="function">BinTree <span class="title">Delete</span><span class="params">(BinTree BST, ElementType X)</span></span>;</span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(BinTree BST, ElementType X)</span></span>;</span><br><span class="line"><span class="function">Position <span class="title">FindMin</span><span class="params">(BinTree BST)</span></span>;</span><br><span class="line"><span class="function">Position <span class="title">FindMax</span><span class="params">(BinTree BST)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">BinTree BST, MinP, MaxP, Tmp;</span><br><span class="line">ElementType X;</span><br><span class="line"><span class="keyword">int</span> N, i;</span><br><span class="line"></span><br><span class="line">BST = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;X);</span><br><span class="line">BST = Insert(BST, X);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Preorder:"</span>); PreorderTraversal(BST); <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">MinP = FindMin(BST);</span><br><span class="line">MaxP = FindMax(BST);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;X);</span><br><span class="line">Tmp = Find(BST, X);</span><br><span class="line"><span class="keyword">if</span> (Tmp == <span class="literal">NULL</span>) <span class="built_in">printf</span>(<span class="string">"%d is not found\n"</span>, X);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d is found\n"</span>, Tmp-&gt;Data);</span><br><span class="line"><span class="keyword">if</span> (Tmp == MinP) <span class="built_in">printf</span>(<span class="string">"%d is the smallest key\n"</span>, Tmp-&gt;Data);</span><br><span class="line"><span class="keyword">if</span> (Tmp == MaxP) <span class="built_in">printf</span>(<span class="string">"%d is the largest key\n"</span>, Tmp-&gt;Data);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;N);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;X);</span><br><span class="line">BST = Delete(BST, X);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Inorder:"</span>); InorderTraversal(BST); <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BinTree <span class="title">Insert</span><span class="params">(BinTree BST, ElementType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!BST) &#123;</span><br><span class="line">BST =(BinTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct TNode));</span><br><span class="line">BST-&gt;Data = x;</span><br><span class="line">BST-&gt;Left = BST-&gt;Right = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (BST-&gt;Data &lt; x) BST-&gt;Right = Insert(BST-&gt;Right, x);</span><br><span class="line"><span class="keyword">if</span> (BST-&gt;Data &gt; x) BST-&gt;Left = Insert(BST-&gt;Left, x);</span><br><span class="line"><span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">BinTree <span class="title">Delete</span><span class="params">(BinTree BST, ElementType x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!BST) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Not Found\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (x &lt; BST-&gt;Data) BST-&gt;Left = Delete(BST-&gt;Left, x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x &gt; BST-&gt;Data) BST-&gt;Right = Delete(BST-&gt;Right, x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (x == BST-&gt;Data) &#123;</span><br><span class="line"><span class="keyword">if</span> (BST-&gt;Left &amp;&amp; BST-&gt;Right) &#123;</span><br><span class="line">BinTree t = FindMin(BST-&gt;Right);</span><br><span class="line">BST-&gt;Data = t-&gt;Data;</span><br><span class="line">BST-&gt;Right = Delete(BST-&gt;Right, BST-&gt;Data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!BST-&gt;Left)BST = BST-&gt;Right;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!BST-&gt;Right)BST = BST-&gt;Left;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Position <span class="title">Find</span><span class="params">(BinTree BST, ElementType X)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (BST-&gt;Data == X)</span><br><span class="line"><span class="keyword">return</span> BST;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (X &lt; BST-&gt;Data) <span class="keyword">return</span> Find(BST -&gt;Left,X);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (X &gt; BST-&gt;Data) <span class="keyword">return</span> Find(BST -&gt;Right, X);</span><br><span class="line"><span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Position <span class="title">FindMin</span><span class="params">(BinTree BST)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST) &#123;</span><br><span class="line"><span class="keyword">if</span> (BST-&gt;Left) <span class="keyword">return</span> FindMin(BST-&gt;Left);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Position <span class="title">FindMax</span><span class="params">(BinTree BST)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BST) &#123;</span><br><span class="line"><span class="keyword">if</span> (BST-&gt;Right) <span class="keyword">return</span> FindMax(BST-&gt;Right);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InorderTraversal</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line"><span class="comment">//常规中续遍历</span></span><br><span class="line"><span class="keyword">if</span> (BT == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">InorderTraversal(BT-&gt;Left);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d"</span>, BT-&gt;Data);</span><br><span class="line">InorderTraversal(BT-&gt;Right);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreorderTraversal</span><span class="params">(BinTree BT)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BT == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d"</span>, BT-&gt;Data);</span><br><span class="line">PreorderTraversal(BT-&gt;Left);</span><br><span class="line">PreorderTraversal(BT-&gt;Right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下附运行结果</p><p><img alt data-src="https://s2.ax1x.com/2019/12/11/Qs5oQg.png" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 二叉搜索树 </tag>
            
            <tag> 算法 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实验7之迪杰斯特拉最短路径</title>
      <link href="/2019/12/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E4%B8%83%E4%B9%8B%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/"/>
      <url>/2019/12/02/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E4%B8%83%E4%B9%8B%E8%BF%AA%E6%9D%B0%E6%96%AF%E7%89%B9%E6%8B%89%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>以山东大学威海的部分建筑物为例来实现迪杰斯特拉算法</p><p><img alt data-src="https://s2.ax1x.com/2019/12/02/QuM78S.png" class="lazyload"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; couple;</span><br><span class="line"><span class="keyword">int</span> e[<span class="number">20</span>][<span class="number">20</span>], dis[<span class="number">20</span>], book[<span class="number">20</span>], min, n, u, v, m, t1, t2, t3, infinity = <span class="number">9999999</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">map_init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">couple[<span class="string">"泰园餐厅"</span>] = <span class="number">1</span>;</span><br><span class="line">couple[<span class="string">"6号楼"</span>] = <span class="number">2</span>;</span><br><span class="line">couple[<span class="string">"5号楼"</span>] = <span class="number">3</span>;</span><br><span class="line">couple[<span class="string">"体育馆"</span>] = <span class="number">4</span>;</span><br><span class="line">couple[<span class="string">"田径场"</span>] = <span class="number">5</span>;</span><br><span class="line">couple[<span class="string">"馨园餐厅"</span>] = <span class="number">6</span>;</span><br><span class="line">couple[<span class="string">"荟园餐厅"</span>] = <span class="number">7</span>;</span><br><span class="line">couple[<span class="string">"法学院"</span>] = <span class="number">8</span>;</span><br><span class="line">couple[<span class="string">"雀园餐厅"</span>] = <span class="number">9</span>;</span><br><span class="line">couple[<span class="string">"电子楼"</span>] = <span class="number">10</span>;</span><br><span class="line">couple[<span class="string">"图书馆"</span>] = <span class="number">11</span>;</span><br><span class="line">couple[<span class="string">"网络楼"</span>] = <span class="number">12</span>;</span><br><span class="line">couple[<span class="string">"数学院"</span>] = <span class="number">13</span>;</span><br><span class="line">couple[<span class="string">"教师公寓"</span>] = <span class="number">14</span>;</span><br><span class="line">couple[<span class="string">"机电院"</span>] = <span class="number">15</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create_matrix</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">15</span>; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">15</span>; j++)</span><br><span class="line"><span class="keyword">if</span> (i == j) e[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> e[i][j] = infinity;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input_matrix</span><span class="params">(<span class="built_in">string</span> a,<span class="built_in">string</span> b)</span> </span>&#123;</span><br><span class="line">e[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">50</span>;e[<span class="number">2</span>][<span class="number">1</span>] = <span class="number">50</span>;</span><br><span class="line">e[<span class="number">1</span>][<span class="number">6</span>] = <span class="number">50</span>;e[<span class="number">6</span>][<span class="number">1</span>] = <span class="number">50</span>;</span><br><span class="line">e[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">20</span>;e[<span class="number">3</span>][<span class="number">2</span>] = <span class="number">20</span>;</span><br><span class="line">e[<span class="number">3</span>][<span class="number">4</span>] = <span class="number">289</span>;e[<span class="number">4</span>][<span class="number">3</span>] = <span class="number">289</span>;</span><br><span class="line">e[<span class="number">4</span>][<span class="number">5</span>] = <span class="number">150</span>;e[<span class="number">5</span>][<span class="number">4</span>] = <span class="number">150</span>;</span><br><span class="line">e[<span class="number">7</span>][<span class="number">6</span>] = <span class="number">50</span>; e[<span class="number">6</span>][<span class="number">7</span>] = <span class="number">50</span>;</span><br><span class="line">e[<span class="number">7</span>][<span class="number">8</span>] = <span class="number">150</span>; e[<span class="number">8</span>][<span class="number">7</span>] = <span class="number">150</span>;</span><br><span class="line">e[<span class="number">8</span>][<span class="number">9</span>] = <span class="number">200</span>; e[<span class="number">9</span>][<span class="number">8</span>] = <span class="number">200</span>;</span><br><span class="line">e[<span class="number">9</span>][<span class="number">10</span>] = <span class="number">200</span>; e[<span class="number">10</span>][<span class="number">9</span>] = <span class="number">200</span>;</span><br><span class="line">e[<span class="number">10</span>][<span class="number">5</span>] = <span class="number">100</span>; e[<span class="number">5</span>][<span class="number">10</span>] = <span class="number">100</span>;</span><br><span class="line">e[<span class="number">10</span>][<span class="number">12</span>] = <span class="number">100</span>; e[<span class="number">12</span>][<span class="number">10</span>] = <span class="number">100</span>;</span><br><span class="line">e[<span class="number">10</span>][<span class="number">11</span>] = <span class="number">160</span>; e[<span class="number">11</span>][<span class="number">10</span>] = <span class="number">160</span>;</span><br><span class="line">e[<span class="number">11</span>][<span class="number">12</span>] = <span class="number">150</span>; e[<span class="number">12</span>][<span class="number">11</span>] = <span class="number">150</span>;</span><br><span class="line">e[<span class="number">11</span>][<span class="number">13</span>] = <span class="number">250</span>; e[<span class="number">13</span>][<span class="number">11</span>] = <span class="number">250</span>;</span><br><span class="line">e[<span class="number">12</span>][<span class="number">13</span>] = <span class="number">170</span>; e[<span class="number">13</span>][<span class="number">12</span>] = <span class="number">170</span>;</span><br><span class="line">e[<span class="number">8</span>][<span class="number">13</span>] = <span class="number">300</span>; e[<span class="number">13</span>][<span class="number">8</span>] = <span class="number">300</span>;</span><br><span class="line">e[<span class="number">8</span>][<span class="number">11</span>] = <span class="number">190</span>; e[<span class="number">11</span>][<span class="number">8</span>] = <span class="number">190</span>;</span><br><span class="line">e[<span class="number">12</span>][<span class="number">14</span>] = <span class="number">400</span>; e[<span class="number">14</span>][<span class="number">12</span>] = <span class="number">400</span>;</span><br><span class="line">e[<span class="number">13</span>][<span class="number">15</span>] = <span class="number">500</span>; e[<span class="number">15</span>][<span class="number">13</span>] = <span class="number">500</span>;</span><br><span class="line">e[<span class="number">14</span>][<span class="number">15</span>] = <span class="number">1000</span>; e[<span class="number">15</span>][<span class="number">14</span>] = <span class="number">1000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (couple[a] &gt; couple[b]) &#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">t = couple[a];</span><br><span class="line">couple[a] = couple[b];</span><br><span class="line">couple[b] = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">15</span>; i++)</span><br><span class="line">dis[i] = e[couple[a]][i];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">15</span>; i++)</span><br><span class="line">book[i] = <span class="number">0</span>;</span><br><span class="line">book[couple[a]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">14</span>; i++) &#123;</span><br><span class="line"></span><br><span class="line">min = infinity;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">15</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (book[j] == <span class="number">0</span> &amp;&amp; dis[j] &lt; min) &#123;</span><br><span class="line">min = dis[j];</span><br><span class="line">u = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">book[u] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (v = <span class="number">1</span>; v &lt;= <span class="number">15</span>; v++) &#123;</span><br><span class="line"><span class="keyword">if</span> (e[u][v] &lt; infinity) &#123;</span><br><span class="line"><span class="keyword">if</span> (dis[v] &gt; dis[u] + e[u][v])</span><br><span class="line">dis[v] = dis[u] + e[u][v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"以图片的实例为标准，以泰园餐厅为起点"</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达6号楼的最短路径为"</span> &lt;&lt; dis[i+<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达5号楼的最短路径为"</span> &lt;&lt; dis[i+<span class="number">2</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达体育馆的最短路径为"</span> &lt;&lt; dis[i+<span class="number">3</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达田径场的最短路径为"</span> &lt;&lt; dis[i+<span class="number">4</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达馨园餐厅的最短路径为"</span> &lt;&lt; dis[i+<span class="number">5</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达荟园餐厅的最短路径为"</span> &lt;&lt; dis[i+<span class="number">6</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达法学院的最短路径为"</span> &lt;&lt; dis[i+<span class="number">7</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达雀园餐厅的最短路径为"</span> &lt;&lt; dis[i+<span class="number">8</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达电子楼的最短路径为"</span> &lt;&lt; dis[i+<span class="number">9</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达图书馆的最短路径为"</span> &lt;&lt; dis[i+<span class="number">10</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达网络楼的最短路径为"</span> &lt;&lt; dis[i+<span class="number">11</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达数学院的最短路径为"</span> &lt;&lt; dis[i+<span class="number">12</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达教师公寓的最短路径为"</span> &lt;&lt; dis[i+<span class="number">13</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"到达机电院的最短路径为"</span> &lt;&lt; dis[i+<span class="number">14</span>] &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">string</span> a = <span class="string">"泰园餐厅"</span>;</span><br><span class="line"><span class="built_in">string</span> b = <span class="string">"机电院"</span>;</span><br><span class="line">map_init();</span><br><span class="line">create_matrix();</span><br><span class="line">input_matrix(a,b);</span><br><span class="line">dijkstra();</span><br><span class="line">print();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://s2.ax1x.com/2019/12/02/QuQ7Ix.png" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 迪杰斯特拉 </tag>
            
            <tag> 最短路径 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷p1605迷宫</title>
      <link href="/2019/11/21/%E6%B4%9B%E8%B0%B7p1605%E8%BF%B7%E5%AE%AB/"/>
      <url>/2019/11/21/%E6%B4%9B%E8%B0%B7p1605%E8%BF%B7%E5%AE%AB/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>题目地址：<a href="https://www.luogu.org/problem/P1605" target="_blank" rel="noopener">https://www.luogu.org/problem/P1605</a></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> migong[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> n,m, fx, fy, dx, dy;</span><br><span class="line"><span class="keyword">int</span> total;</span><br><span class="line"><span class="keyword">int</span> barraier;</span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">10</span>][<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> dir[][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125; &#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y,<span class="keyword">int</span> step)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (dx == x &amp;&amp; dy == y) &#123;</span><br><span class="line">total++;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> nx = x + dir[i][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> ny = y + dir[i][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (vis[nx][ny] == <span class="number">0</span> &amp;&amp; nx &gt;= <span class="number">1</span> &amp;&amp; ny &gt;= <span class="number">1</span> &amp;&amp; x &lt;= n &amp;&amp; y &lt;= m) &#123;</span><br><span class="line">vis[nx][ny] = <span class="number">1</span>;</span><br><span class="line">dfs(nx, ny, step + <span class="number">1</span>);</span><br><span class="line">vis[nx][ny] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; barraier;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; fx &gt;&gt; fy &gt;&gt; dx &gt;&gt; dy;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= barraier; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> tx, ty;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; tx &gt;&gt; ty;</span><br><span class="line">vis[tx][ty] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">vis[fx][fy] = <span class="number">1</span>;不要忘了给初始值打标记</span><br><span class="line">dfs(fx, fy,<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 深度优先搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1101单词方阵</title>
      <link href="/2019/11/21/%E6%B4%9B%E8%B0%B7P1101%E5%8D%95%E8%AF%8D%E6%96%B9%E9%98%B5/"/>
      <url>/2019/11/21/%E6%B4%9B%E8%B0%B7P1101%E5%8D%95%E8%AF%8D%E6%96%B9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> dir[][<span class="number">2</span>] = &#123; &#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">1</span>,<span class="number">1</span>&#125; ,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">-1</span>&#125; ,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125; ,&#123;<span class="number">-1</span>,<span class="number">1</span>&#125; &#125;;<span class="comment">//八个方向</span></span><br><span class="line"><span class="keyword">char</span> fz[maxn][maxn];<span class="comment">//存储字母的矩阵</span></span><br><span class="line"><span class="keyword">int</span> vis[maxn][maxn];<span class="comment">//遍历矩阵表示是否被访问过</span></span><br><span class="line"><span class="keyword">char</span> stand[] = <span class="string">"yizhong"</span>;<span class="comment">//标准单词</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line">&#125;c[maxn];<span class="comment">//用来记录路径</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y,<span class="keyword">int</span> k,<span class="keyword">int</span> cur)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (cur == <span class="number">7</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; i++)</span><br><span class="line">vis[c[i].x][c[i].y] = <span class="number">1</span>;<span class="comment">//表示被访问过</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> dx = x + dir[k][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> dy = y + dir[k][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (cur == <span class="number">6</span> || fz[dx][dy] == stand[cur + <span class="number">1</span>])</span><br><span class="line">&#123;</span><br><span class="line">c[cur].x = x; c[cur].y = y;<span class="comment">//记录路径</span></span><br><span class="line">dfs(dx, dy, k, cur + <span class="number">1</span>);<span class="comment">//递归</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; fz[i];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j &lt; n;j++)</span><br><span class="line"><span class="keyword">if</span>(fz[i][j] == <span class="string">'y'</span>)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">8</span>; k++) &#123;<span class="comment">//定好方向</span></span><br><span class="line"><span class="keyword">int</span> dx = i + dir[k][<span class="number">0</span>];</span><br><span class="line"><span class="keyword">int</span> dy = j + dir[k][<span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (fz[dx][dy] == <span class="string">'i'</span>)</span><br><span class="line">dfs(i, j, k, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line"><span class="keyword">if</span> (!vis[i][j]) <span class="built_in">cout</span> &lt;&lt; <span class="string">"*"</span>;<span class="comment">//没被标记过就输出*；</span></span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; fz[i][j];</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 洛谷 </tag>
            
            <tag> 深度优先搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八皇后问题</title>
      <link href="/2019/11/21/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/"/>
      <url>/2019/11/21/%E5%85%AB%E7%9A%87%E5%90%8E%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>深搜模板题目：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>];<span class="comment">//表示行</span></span><br><span class="line"><span class="keyword">int</span> b[<span class="number">100</span>];<span class="comment">//表示第几列被占领</span></span><br><span class="line"><span class="keyword">int</span> c[<span class="number">100</span>];<span class="comment">//表示左下到右上的对角线</span></span><br><span class="line"><span class="keyword">int</span> d[<span class="number">100</span>];<span class="comment">//表示左上到右下的对角线</span></span><br><span class="line"><span class="keyword">int</span> total, n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (total &lt;= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[i];</span><br><span class="line"><span class="keyword">if</span> (i != n)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">total++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">queen</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; n) &#123;</span><br><span class="line">print();</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> ((!b[j]) &amp;&amp; (!c[i + j]) &amp;&amp; (!d[i - j + n]))<span class="comment">//如果没有皇后占领，则宣布占领</span></span><br><span class="line">&#123;</span><br><span class="line">a[i] = j;</span><br><span class="line">b[j] = <span class="number">1</span>;</span><br><span class="line">c[i + j] = <span class="number">1</span>;</span><br><span class="line">d[i - j + n] = <span class="number">1</span>;</span><br><span class="line">queen(i + <span class="number">1</span>);</span><br><span class="line">b[j] = <span class="number">0</span>;</span><br><span class="line">c[i + j] = <span class="number">0</span>;</span><br><span class="line">d[i - j + n] = <span class="number">0</span>;<span class="comment">//回溯清除标记</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">queen(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
            <tag> 深度优先搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速幂模板</title>
      <link href="/2019/11/20/%E5%BF%AB%E9%80%9F%E5%B9%82%E6%A8%A1%E6%9D%BF/"/>
      <url>/2019/11/20/%E5%BF%AB%E9%80%9F%E5%B9%82%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p> 适用于 b的 p次方 % k</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> b, a, p, k, ans = <span class="number">1</span>, c;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;b, &amp;p, &amp;k);</span><br><span class="line">a = b; c = p;</span><br><span class="line"><span class="keyword">while</span> (p &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (p % <span class="number">2</span> != <span class="number">0</span>)</span><br><span class="line">ans = ans * b%k;</span><br><span class="line">b = b * b % k;</span><br><span class="line">p = p &gt;&gt; <span class="number">1</span>;    </span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld %lld mod %lld=%lld"</span>, a, c, k, ans%k);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 快速幂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java计算器</title>
      <link href="/2019/11/20/java%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
      <url>/2019/11/20/java%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.*;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.*;</span><br><span class="line"><span class="keyword">import</span> javax.swing.*;</span><br><span class="line"><span class="comment">//注意：运算符号并不显示</span></span><br></pre></td></tr></table></figure><p>先导入需要的包</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Calculator</span> <span class="keyword">extends</span> <span class="title">JFrame</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Container container = <span class="keyword">this</span>.getContentPane();</span><br><span class="line">    <span class="keyword">private</span> GridBagLayout gridBagLayout = <span class="keyword">new</span> GridBagLayout();</span><br><span class="line">    <span class="keyword">private</span> GridBagConstraints gridBagConstraints= <span class="keyword">new</span> GridBagConstraints();</span><br><span class="line">    <span class="keyword">private</span> JTextField displayField;</span><br><span class="line">    <span class="keyword">private</span> String lastCommand=<span class="string">"="</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> result=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> start=<span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Calculator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"super计算器"</span>);</span><br><span class="line">        container.setLayout(gridBagLayout);</span><br><span class="line">        initDisplayArea();</span><br><span class="line">        initButtons();</span><br><span class="line">        initFrame();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initFrame</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">600</span>, <span class="number">700</span>);</span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line">        setResizable(<span class="keyword">true</span>);</span><br><span class="line">        setForeground(Color.CYAN);</span><br><span class="line">        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initButtons</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ActionListener insert = <span class="keyword">new</span> Calculator.InsertAction();</span><br><span class="line">        ActionListener command = <span class="keyword">new</span> Calculator.CommandAction();</span><br><span class="line">        addButton(<span class="string">"Back"</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>,command);</span><br><span class="line">        <span class="comment">//addButton("π", 0, 1, 1, 1, insert);</span></span><br><span class="line">        addButton(<span class="string">"C"</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"7"</span>, <span class="number">0</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"8"</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"9"</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"+"</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"4"</span>, <span class="number">0</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"5"</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"6"</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"-"</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"1"</span>, <span class="number">0</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"2"</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"3"</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"*"</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"0"</span>, <span class="number">0</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"-"</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"."</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, insert);</span><br><span class="line">        addButton(<span class="string">"/"</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"="</span>, <span class="number">0</span>, <span class="number">7</span>, <span class="number">2</span>, <span class="number">2</span>, command);</span><br><span class="line">        addButton(<span class="string">"sin °"</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"cos °"</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"tan °"</span>, <span class="number">2</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"x^y"</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"%"</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"√"</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">1</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton(<span class="string">"n!"</span>, <span class="number">0</span>, <span class="number">6</span>, <span class="number">2</span>, <span class="number">1</span>, command);</span><br><span class="line">        addButton2(<span class="string">"designed by superzhaoyang"</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">4</span>, <span class="number">1</span>, command);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initDisplayArea</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        displayField = <span class="keyword">new</span> JTextField(<span class="number">20</span>);</span><br><span class="line">        displayField.setHorizontalAlignment(SwingConstants.RIGHT);</span><br><span class="line">        displayField.setBackground(Color.gray);</span><br><span class="line">        displayField.setDisabledTextColor(Color.BLACK);</span><br><span class="line">        displayField.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">        displayField.setFont(<span class="keyword">new</span> Font(<span class="string">"宋体"</span>, Font.BOLD ,<span class="number">50</span>));</span><br><span class="line">        gridBagConstraints.gridx = <span class="number">0</span>;</span><br><span class="line">        gridBagConstraints.gridy = <span class="number">0</span>;</span><br><span class="line">        gridBagConstraints.gridwidth = <span class="number">4</span>;</span><br><span class="line">        gridBagConstraints.gridheight = <span class="number">1</span>;</span><br><span class="line">        gridBagConstraints.fill = <span class="number">1</span>;</span><br><span class="line">        gridBagConstraints.weightx = <span class="number">1</span>;</span><br><span class="line">        gridBagConstraints.weighty = <span class="number">1</span>;</span><br><span class="line">        gridBagLayout.setConstraints(displayField, gridBagConstraints);</span><br><span class="line">        container.add(displayField);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addButton</span><span class="params">(String label, <span class="keyword">int</span> column, <span class="keyword">int</span> row, <span class="keyword">int</span> width, <span class="keyword">int</span> height, ActionListener listener)</span> </span>&#123;</span><br><span class="line">        JButton button = <span class="keyword">new</span> JButton(label);</span><br><span class="line">        button.setForeground(Color.black);</span><br><span class="line">        button.setBackground(Color.white);</span><br><span class="line">        button.setFont(<span class="keyword">new</span> Font(<span class="string">"楷体"</span>, Font.BOLD, <span class="number">36</span>));</span><br><span class="line">        <span class="keyword">if</span>(listener != <span class="keyword">null</span>)</span><br><span class="line">            button.addActionListener(listener);</span><br><span class="line"></span><br><span class="line">        gridBagConstraints.gridx = column;</span><br><span class="line">        gridBagConstraints.gridy = row;</span><br><span class="line">        gridBagConstraints.gridwidth = width;</span><br><span class="line">        gridBagConstraints.gridheight = height;</span><br><span class="line">        gridBagConstraints.fill = GridBagConstraints.BOTH;<span class="comment">//填充空间</span></span><br><span class="line">        gridBagConstraints.insets = <span class="keyword">new</span> Insets(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);<span class="comment">//彼此组件的距离</span></span><br><span class="line">        gridBagLayout.setConstraints(button, gridBagConstraints);</span><br><span class="line">        container.add(button);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addButton_</span><span class="params">(String label, <span class="keyword">int</span> column, <span class="keyword">int</span> row, <span class="keyword">int</span> width, <span class="keyword">int</span> height, ActionListener listener,ActionListener listener2)</span> </span>&#123;</span><br><span class="line">        JButton button = <span class="keyword">new</span> JButton(label);</span><br><span class="line">        button.setForeground(Color.black);</span><br><span class="line">        button.setBackground(Color.white);</span><br><span class="line">        button.setFont(<span class="keyword">new</span> Font(<span class="string">"楷体"</span>, Font.BOLD, <span class="number">36</span>));</span><br><span class="line">        button.addActionListener(listener);</span><br><span class="line">        button.addActionListener(listener2);</span><br><span class="line"></span><br><span class="line">        gridBagConstraints.gridx = column;</span><br><span class="line">        gridBagConstraints.gridy = row;</span><br><span class="line">        gridBagConstraints.gridwidth = width;</span><br><span class="line">        gridBagConstraints.gridheight = height;</span><br><span class="line">        gridBagConstraints.fill = GridBagConstraints.BOTH;<span class="comment">//填充空间</span></span><br><span class="line">        gridBagConstraints.insets = <span class="keyword">new</span> Insets(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);<span class="comment">//彼此组件的距离</span></span><br><span class="line">        gridBagLayout.setConstraints(button, gridBagConstraints);</span><br><span class="line">        container.add(button);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">addButton2</span><span class="params">(String label, <span class="keyword">int</span> column, <span class="keyword">int</span> row, <span class="keyword">int</span> width, <span class="keyword">int</span> height, ActionListener listener)</span> </span>&#123;</span><br><span class="line">        JButton button = <span class="keyword">new</span> JButton(label);</span><br><span class="line">            button.setForeground(Color.orange);</span><br><span class="line">        button.setBackground(Color.CYAN);</span><br><span class="line">        button.setFont(<span class="keyword">new</span> Font(<span class="string">"楷体"</span>, Font.BOLD, <span class="number">36</span>));</span><br><span class="line">        <span class="keyword">if</span>(listener != <span class="keyword">null</span>)</span><br><span class="line">            button.addActionListener(listener);</span><br><span class="line"></span><br><span class="line">        gridBagConstraints.gridx = column;</span><br><span class="line">        gridBagConstraints.gridy = row;</span><br><span class="line">        gridBagConstraints.gridwidth = width;</span><br><span class="line">        gridBagConstraints.gridheight = height;</span><br><span class="line">        gridBagConstraints.fill = GridBagConstraints.BOTH;<span class="comment">//填充空间</span></span><br><span class="line">        gridBagConstraints.insets = <span class="keyword">new</span> Insets(<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1</span>);<span class="comment">//彼此组件的距离</span></span><br><span class="line">        gridBagLayout.setConstraints(button, gridBagConstraints);</span><br><span class="line">        container.add(button);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">calculate</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.lastCommand.equals(<span class="string">"+"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.result += x;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.lastCommand.equals(<span class="string">"-"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.result -= x;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.lastCommand.equals(<span class="string">"*"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.result *= x;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.lastCommand.equals(<span class="string">"/"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.result /= x;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.lastCommand.equals(<span class="string">"="</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.result = x;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.lastCommand.equals(<span class="string">"%"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.result = <span class="keyword">this</span>.result % x;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.lastCommand.equals(<span class="string">"√"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.result = Math.sqrt(x);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.lastCommand.equals(<span class="string">"sin °"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.result = Math.sin(x*Math.PI / <span class="number">180</span>) ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.lastCommand.equals(<span class="string">"cos °"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.result = Math.cos(x*Math.PI / <span class="number">180</span>) ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.lastCommand.equals(<span class="string">"x^y"</span>)) &#123;</span><br><span class="line">            <span class="keyword">double</span> t = <span class="keyword">this</span>.result;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; x;i++)</span><br><span class="line">                <span class="keyword">this</span>.result *= t;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.lastCommand.equals(<span class="string">"tan °"</span>)) &#123;</span><br><span class="line">            <span class="keyword">this</span>.result = Math.tan(x*Math.PI / <span class="number">180</span>) ;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">this</span>.lastCommand.equals(<span class="string">"n!"</span>)) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = (<span class="keyword">int</span>)x;i &gt;= <span class="number">1</span>;i--)</span><br><span class="line">                temp = temp * i ;</span><br><span class="line">            <span class="keyword">this</span>.result = temp;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.displayField.setText(<span class="string">""</span> + <span class="keyword">this</span>.result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">new</span> Calculator();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandAction</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">CommandAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent evt)</span> </span>&#123;</span><br><span class="line">            String command = evt.getActionCommand();</span><br><span class="line">            <span class="keyword">if</span> (Calculator.<span class="keyword">this</span>.start) &#123;</span><br><span class="line">                Calculator.<span class="keyword">this</span>.lastCommand = command;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Calculator.<span class="keyword">this</span>.calculate(Double.parseDouble(Calculator.<span class="keyword">this</span>.displayField.getText()));</span><br><span class="line">                Calculator.<span class="keyword">this</span>.lastCommand = command;</span><br><span class="line">                Calculator.<span class="keyword">this</span>.start = <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">InsertAction</span> <span class="keyword">implements</span> <span class="title">ActionListener</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="title">InsertAction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent event)</span> </span>&#123;</span><br><span class="line">            String input = event.getActionCommand();</span><br><span class="line">            <span class="keyword">if</span> (Calculator.<span class="keyword">this</span>.start) &#123;</span><br><span class="line">                Calculator.<span class="keyword">this</span>.displayField.setText(<span class="string">""</span>);</span><br><span class="line">                Calculator.<span class="keyword">this</span>.start = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">if</span> (input.equals(<span class="string">"-"</span>)) &#123;</span><br><span class="line">                    Calculator.<span class="keyword">this</span>.displayField.setText(Calculator.<span class="keyword">this</span>.displayField.getText() + <span class="string">"-"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!input.equals(<span class="string">"-"</span>)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (input.equals(<span class="string">"Back"</span>)) &#123;</span><br><span class="line">                    String str = Calculator.<span class="keyword">this</span>.displayField.getText();</span><br><span class="line">                    <span class="keyword">if</span> (str.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        Calculator.<span class="keyword">this</span>.displayField.setText(str.substring(<span class="number">0</span>, str.length() - <span class="number">1</span>));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (input.equals(<span class="string">"C"</span>)) &#123;</span><br><span class="line">                    Calculator.<span class="keyword">this</span>.displayField.setText(<span class="string">"0"</span>);</span><br><span class="line">                    result=<span class="number">0.0</span>d;</span><br><span class="line">                    Calculator.<span class="keyword">this</span>.start = <span class="keyword">true</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">if</span> (input.equals(<span class="string">"."</span>)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (Calculator.<span class="keyword">this</span>.displayField.getText().trim().indexOf(<span class="string">"."</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">                            Calculator.<span class="keyword">this</span>.displayField.setText(Calculator.<span class="keyword">this</span>.displayField.getText() + input);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        Calculator.<span class="keyword">this</span>.displayField.setText(Calculator.<span class="keyword">this</span>.displayField.getText() + input);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行界面如下：</p><p><img alt data-src="https://s2.ax1x.com/2019/11/20/MfkCH1.png" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 计算器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实验六之二叉树的孩子链表发和双亲链表法</title>
      <link href="/2019/11/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E5%85%AD%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AD%A9%E5%AD%90%E9%93%BE%E8%A1%A8%E5%8F%91%E5%92%8C%E5%8F%8C%E4%BA%B2%E9%93%BE%E8%A1%A8%E6%B3%95/"/>
      <url>/2019/11/18/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E5%85%AD%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%AD%A9%E5%AD%90%E9%93%BE%E8%A1%A8%E5%8F%91%E5%92%8C%E5%8F%8C%E4%BA%B2%E9%93%BE%E8%A1%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_TREE_SIZE 100</span></span><br></pre></td></tr></table></figure><p>下面是二叉树的双亲表示法</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PTNode</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> data;</span><br><span class="line"><span class="keyword">int</span> parent;</span><br><span class="line">&#125;PTNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">PTNode nodes[MAX_TREE_SIZE];</span><br><span class="line"><span class="keyword">int</span> r, n;</span><br><span class="line">&#125;PTree;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Create_Parentree</span><span class="params">(PTree &amp;p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> data;</span><br><span class="line"><span class="keyword">int</span> parent;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p.n; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入节点"</span>&lt;&lt;i &lt;&lt;<span class="string">"的值及其父节点"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; data &gt;&gt; parent;</span><br><span class="line">p.nodes[i].data = data;</span><br><span class="line">p.nodes[i].parent = parent;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入结束"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Traversal_Parentree</span><span class="params">(PTree &amp;p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p.n; i++) &#123;</span><br><span class="line"><span class="comment">//if(p.nodes[i+1].parent == i)</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; p.nodes[i].data &lt;&lt; " ";</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"节点"</span> &lt;&lt; p.nodes[i].data &lt;&lt; <span class="string">"的子节点为："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> flag2 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = i; ;j++)&#123;</span><br><span class="line"><span class="keyword">if</span> (j == p.n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">if</span> (p.nodes[j + <span class="number">1</span>].parent == i) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p.nodes[j + <span class="number">1</span>].data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">flag2 = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(p.nodes[j + <span class="number">1</span>].parent != i &amp;&amp; flag == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!flag2) <span class="built_in">cout</span> &lt;&lt; <span class="string">"无"</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下面是二叉树的孩子表示法：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span> &#123;</span><span class="comment">//孩子节点</span></span><br><span class="line"><span class="keyword">int</span> child;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CTNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;*ChildPtr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> data;</span><br><span class="line">ChildPtr firstchild;<span class="comment">//孩子链表头指针</span></span><br><span class="line">&#125;CTBox;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">CTBox nodes[MAX_TREE_SIZE];</span><br><span class="line"><span class="keyword">int</span> n, r;<span class="comment">//节点数和根的位置</span></span><br><span class="line">&#125;CTree;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Create_Childtree</span><span class="params">(CTree &amp;p)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> data;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ChildPtr c =(ChildPtr)malloc (sizeof(CTNode));</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p.n; i++) &#123;</span><br><span class="line">p.nodes[i].firstchild = (ChildPtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CTNode));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入节点"</span> &lt;&lt; i &lt;&lt; <span class="string">"的值"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; data;</span><br><span class="line">p.nodes[i].data = data;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入值来判定头节点"</span>&lt;&lt;i&lt;&lt;<span class="string">"的next是否为空"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> temp;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line"><span class="keyword">if</span> (temp == <span class="number">-1</span>) &#123;</span><br><span class="line">p.nodes[i].firstchild = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入第一个孩子节点的值"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p.nodes[i].firstchild-&gt;child;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入第一个孩子节点next的值以判断是否为空"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line"></span><br><span class="line">ChildPtr c2 = (ChildPtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CTNode));</span><br><span class="line"><span class="keyword">if</span> (temp == <span class="number">-1</span>) &#123;</span><br><span class="line">c2 = <span class="literal">NULL</span>;</span><br><span class="line">p.nodes[i].firstchild-&gt;next = c2;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//ChildPtr c3 = (ChildPtr)malloc(sizeof(CTNode));</span></span><br><span class="line">p.nodes[i].firstchild-&gt;next = c2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入第二个孩子节点的值"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; c2-&gt;child;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入第二个孩子节点next的值"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line"><span class="keyword">if</span> (temp == <span class="number">-1</span>) &#123;</span><br><span class="line">c2-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">ChildPtr cctemp;</span><br><span class="line"><span class="keyword">while</span> (temp != <span class="number">-1</span>) &#123;</span><br><span class="line">ChildPtr cc;</span><br><span class="line">cc = (ChildPtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CTNode));</span><br><span class="line">c2-&gt;next = cc;</span><br><span class="line">cctemp = cc;</span><br><span class="line">c2 = cc;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入节点值"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; cc-&gt;child;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"输入节点的next的值"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">&#125;</span><br><span class="line">cctemp-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tranversal_Childrentree</span><span class="params">(CTree &amp;p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; p.n; i++) &#123;</span><br><span class="line">ChildPtr t = (ChildPtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CTNode));</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"节点"</span> &lt;&lt; p.nodes[i].data &lt;&lt; <span class="string">"的子树位置为:"</span>;</span><br><span class="line"><span class="keyword">if</span> (p.nodes[i].firstchild == <span class="literal">NULL</span>)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"无子树"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p.nodes[i].firstchild-&gt;child &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">t = p.nodes[i].firstchild-&gt;next;</span><br><span class="line"><span class="keyword">while</span> (t != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; t-&gt;child &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">t = t-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>main函数：</p><p>(我将双亲表示法做了注释)</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//树的双亲表存储表示</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">PTree P;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入根节点的位置："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; P.r;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入节点数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; P.n;</span><br><span class="line">Create_Parentree(P);</span><br><span class="line">Traversal_Parentree(P);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="comment">//树的孩子节点表示</span></span><br><span class="line">CTree P2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入根节点的位置："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; P2.r;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入节点数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; P2.n;</span><br><span class="line">Create_Childtree(P2);</span><br><span class="line">Tranversal_Childrentree(P2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>双亲表示法运行结果如下：</p><p><img alt data-src="https://s2.ax1x.com/2019/11/18/M6QbcD.png" class="lazyload"></p><p>孩子表示法的输入过程如下：</p><p><img alt data-src="https://s2.ax1x.com/2019/11/18/M6QzNt.png" class="lazyload"></p><p>运行结果如下：</p><p><img alt data-src="https://s2.ax1x.com/2019/11/18/M6lABj.png" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实验五之二叉树相关操作</title>
      <link href="/2019/11/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E4%BA%94%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/11/04/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E4%BA%94%E4%B9%8B%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="今天复习，突然发现漏了个函数没有写进来，顺便加了个层序遍历。"><a href="#今天复习，突然发现漏了个函数没有写进来，顺便加了个层序遍历。" class="headerlink" title="今天复习，突然发现漏了个函数没有写进来，顺便加了个层序遍历。"></a>今天复习，突然发现漏了个函数没有写进来，顺便加了个层序遍历。</h3><p>OK,我们先把头文件拽过来</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_SIZE 1024</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> TElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">char</span> SeqTree[MAX_SIZE];<span class="comment">//顺序二叉树的定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BiNode</span> &#123;</span><span class="comment">//链式二叉树的定义</span></span><br><span class="line">TElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BiNode</span>* <span class="title">lchild</span>, *<span class="title">rchild</span>;</span></span><br><span class="line">&#125;*Bitree, BiTnode;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACK_INIT_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACKINCREASEMENT 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span><span class="comment">//栈的定义</span></span><br><span class="line">Bitree* base;</span><br><span class="line">Bitree* top;</span><br><span class="line"><span class="keyword">int</span> stacksize;</span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure><p>接下来是函数体，有点长的亚子。</p><p><img alt data-src="https://s2.ax1x.com/2019/09/09/ntEkxs.jpg" class="lazyload"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreatSeqTree</span><span class="params">(SeqTree tree, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="string">'N'</span>) &#123;</span><br><span class="line"><span class="comment">//tree[i] = '\0';</span></span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">tree[i] = ch;</span><br><span class="line"></span><br><span class="line">CreatSeqTree(tree, <span class="number">2</span> * i);</span><br><span class="line">CreatSeqTree(tree, <span class="number">2</span> * i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitSeqTree</span><span class="params">(SeqTree &amp;tree)</span> </span>&#123;</span><br><span class="line"><span class="built_in">memset</span>(tree, <span class="number">0</span>, MAX_SIZE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">SqStack <span class="title">InitStack</span><span class="params">(SqStack&amp; S)</span> </span>&#123;</span><br><span class="line">S.base = (Bitree*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Bitree) * STACK_INIT_SIZE);</span><br><span class="line">S.top = S.base;</span><br><span class="line">S.stacksize = STACK_INIT_SIZE;</span><br><span class="line"><span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Bitree <span class="title">GetTop</span><span class="params">(SqStack S, Bitree &amp;e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top == S.base) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"遍历结束"</span>;</span><br><span class="line"><span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">&#125;</span><br><span class="line">e = *(S.top - <span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(SqStack&amp; S, Bitree &amp;e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top - S.base &gt;= S.stacksize) &#123;</span><br><span class="line">S.base = (Bitree*)<span class="built_in">realloc</span>(S.base, (S.stacksize + STACKINCREASEMENT) * <span class="keyword">sizeof</span>(Bitree));</span><br><span class="line">S.top = S.base + S.stacksize;</span><br><span class="line">S.stacksize += STACKINCREASEMENT;</span><br><span class="line">&#125;</span><br><span class="line">*S.top++ = e;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Bitree <span class="title">Pop</span><span class="params">(SqStack &amp;S, Bitree &amp;e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top == S.base) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">e = *--S.top;</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">CreateBitree</span><span class="params">(Bitree &amp;T)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; c;</span><br><span class="line"><span class="keyword">if</span> (c == <span class="string">'N'</span>) T = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (!(T = (BiNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BiNode)))) <span class="built_in">exit</span>(OVERFLOW);</span><br><span class="line">T-&gt;data = c;</span><br><span class="line">CreateBitree(T-&gt;lchild);</span><br><span class="line">CreateBitree(T-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">PreOrder_print</span><span class="params">(Bitree T)</span> </span>&#123;</span><br><span class="line"><span class="comment">//前序遍历输出</span></span><br><span class="line"><span class="keyword">if</span> (T) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; T-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">if</span> (PreOrder_print(T-&gt;lchild))</span><br><span class="line"><span class="keyword">if</span> (PreOrder_print(T-&gt;rchild))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder_print</span><span class="params">(Bitree T, SqStack S)</span> </span>&#123;<span class="comment">//算法1</span></span><br><span class="line">Bitree P = T;</span><br><span class="line">Push(S, P);</span><br><span class="line"><span class="keyword">while</span> (!(S.top - S.base == <span class="number">0</span>)) &#123;</span><br><span class="line"><span class="keyword">while</span> (GetTop(S, P) &amp;&amp; P) Push(S, P-&gt;lchild);</span><br><span class="line">Pop(S, P);</span><br><span class="line"><span class="keyword">if</span> (!(S.top - S.base == <span class="number">0</span>)) &#123;</span><br><span class="line">Pop(S, P);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; P-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">Push(S, P-&gt;rchild);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LevelorderTraversal</span><span class="params">(Bitree BT)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BT == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">Bitree <span class="built_in">queue</span>[<span class="number">100</span>];</span><br><span class="line">Bitree q;</span><br><span class="line"><span class="keyword">int</span> tail = <span class="number">0</span>, head = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (BT) &#123;</span><br><span class="line"><span class="built_in">queue</span>[tail++] = BT;</span><br><span class="line"><span class="keyword">while</span> (head != tail) &#123;</span><br><span class="line">q = <span class="built_in">queue</span>[head++];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>, q-&gt;data);</span><br><span class="line"><span class="keyword">if</span> (q-&gt;lchild) <span class="built_in">queue</span>[tail++] = q-&gt;lchild;</span><br><span class="line"><span class="keyword">if</span> (q-&gt;rchild) <span class="built_in">queue</span>[tail++] = q-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrder_print2</span><span class="params">(Bitree T, SqStack S)</span> </span>&#123;<span class="comment">//算法2</span></span><br><span class="line">Bitree P = T;</span><br><span class="line"><span class="keyword">while</span> (P || !(S.top - S.base == <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (P) &#123; Push(S, P); P = P-&gt;lchild; &#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">Pop(S, P);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; P-&gt;data &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">P = P-&gt;rchild;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTravel</span><span class="params">(Bitree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//常规中续遍历</span></span><br><span class="line"><span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">InOrderTravel(T-&gt;lchild);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>, T-&gt;data);</span><br><span class="line">InOrderTravel(T-&gt;rchild);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TailOrderTravel</span><span class="params">(Bitree T)</span></span></span><br><span class="line"><span class="function"></span>&#123;<span class="comment">//常规后续遍历</span></span><br><span class="line"><span class="keyword">if</span> (T == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">TailOrderTravel(T-&gt;lchild);</span><br><span class="line">TailOrderTravel(T-&gt;rchild);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>, T-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">preOrder</span><span class="params">(<span class="keyword">char</span> *BT, <span class="keyword">int</span> i)</span> <span class="comment">//先序遍历(递归法)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BT[i] != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%c "</span>, BT[i]);</span><br><span class="line">preOrder(BT, <span class="number">2</span> * i);</span><br><span class="line">preOrder(BT, <span class="number">2</span> * i + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，主函数</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Bitree T, T4, T5,T6;</span><br><span class="line">SqStack S;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-------层序遍历二叉树-------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"先序输入二叉树（空用N表示）"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">CreateBitree(T6);</span><br><span class="line">LevelorderTraversal(T6);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-------前序遍历二叉树-------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"先序输入二叉树（空用N表示）"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">CreateBitree(T);</span><br><span class="line">PreOrder_print(T);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-------中序遍历二叉树-------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"先序输入二叉树（空用N表示）"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">CreateBitree(T4);</span><br><span class="line">InOrderTravel(T4);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-------后序遍历二叉树-------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"先序输入二叉树（空用N表示）"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">CreateBitree(T5);</span><br><span class="line">TailOrderTravel(T5);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Bitree T2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-------栈的方式(算法1）中序遍历二叉树-------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"先序输入二叉树（空用N表示）"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">CreateBitree(T2);</span><br><span class="line">InitStack(S);</span><br><span class="line">InOrder_print(T2, S);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"-------栈的方式(算法2）中序遍历二叉树-------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"先序输入二叉树（空用N表示）"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">Bitree T3;</span><br><span class="line">SqStack S3;</span><br><span class="line">InitStack(S3);</span><br><span class="line">CreateBitree(T3);</span><br><span class="line">InOrder_print2(T3, S3);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"----------------------------以下是顺序二叉树--------------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">SeqTree tree ;</span><br><span class="line">InitSeqTree(tree);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请先序输入二叉树：\n"</span>);</span><br><span class="line">CreatSeqTree(tree, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"先序遍历结果为："</span>;</span><br><span class="line">preOrder(tree, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img alt data-src="https://s2.ax1x.com/2019/12/11/Qs7OuF.png" class="lazyload"></p><p><img alt data-src="https://s2.ax1x.com/2019/12/11/Qs7bcT.png" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归并排序</title>
      <link href="/2019/10/21/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
      <url>/2019/10/21/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>前几天遇到了一道题，快排过不去，一定要用mergesort，特来学习一下。</p><p>该算法时间复杂度为O(NlogN).</p><h4 id="当数据量很大的时候-nlogn的优势将会比n-2越来越大，当n-10-5的时候，nlogn的算法要比n-2的算法快6000倍，那么6000倍是什么概念呢，就是如果我们要处理一个数据集，用nlogn的算法要处理一天的话，用n-2的算法将要处理6020天。这就基本相当于是15年。一个优化改进的算法可能比一个比一个笨的算法速度快了许多，这就是为什么我们要学习算法的原因。"><a href="#当数据量很大的时候-nlogn的优势将会比n-2越来越大，当n-10-5的时候，nlogn的算法要比n-2的算法快6000倍，那么6000倍是什么概念呢，就是如果我们要处理一个数据集，用nlogn的算法要处理一天的话，用n-2的算法将要处理6020天。这就基本相当于是15年。一个优化改进的算法可能比一个比一个笨的算法速度快了许多，这就是为什么我们要学习算法的原因。" class="headerlink" title="当数据量很大的时候 nlogn的优势将会比n^2越来越大，当n=10^5的时候，nlogn的算法要比n^2的算法快6000倍，那么6000倍是什么概念呢，就是如果我们要处理一个数据集，用nlogn的算法要处理一天的话，用n^2的算法将要处理6020天。这就基本相当于是15年。一个优化改进的算法可能比一个比一个笨的算法速度快了许多，这就是为什么我们要学习算法的原因。"></a>当数据量很大的时候 nlogn的优势将会比n^2越来越大，当n=10^5的时候，nlogn的算法要比n^2的算法快6000倍，那么6000倍是什么概念呢，就是如果我们要处理一个数据集，用nlogn的算法要处理一天的话，用n^2的算法将要处理6020天。这就基本相当于是15年。一个优化改进的算法可能比一个比一个笨的算法速度快了许多，这就是为什么我们要学习算法的原因。</h4><p><img alt data-src="https://s2.ax1x.com/2019/10/21/KlBQPg.png" class="lazyload"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> mid)</span> <span class="comment">//并的思想</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> *aux = <span class="keyword">new</span> <span class="keyword">int</span>[r - l + <span class="number">1</span>], i, j, k;</span><br><span class="line"><span class="keyword">for</span> (k = l; k &lt;= r; k++)</span><br><span class="line">aux[k - l] = a[k];</span><br><span class="line">i = l;</span><br><span class="line">j = mid + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (k = l; k &lt;= r; k++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt; mid)</span><br><span class="line">&#123;</span><br><span class="line">a[k] = aux[j - l];</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (j &gt; r)</span><br><span class="line">&#123;</span><br><span class="line">a[k] = aux[i - l];</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (aux[i - l] &gt; aux[j - l])</span><br><span class="line">&#123;</span><br><span class="line">a[k] = aux[j - l];</span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">a[k] = aux[i - l];</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span><span class="comment">//归的思想</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (l &gt;= r)</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">int</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">merge_sort(a, l, mid);</span><br><span class="line">merge_sort(a, mid + <span class="number">1</span>, r);</span><br><span class="line">merge(a, l, r, mid);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergesort</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span><span class="comment">//再写个函数，方标调用</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">merge_sort(a, l, r - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">105</span>], n, i;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">mergesort(a, <span class="number">0</span>, n);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下附运行结果：</p><p><img alt data-src="https://s2.ax1x.com/2019/10/21/KlBKIS.png" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 排序 </tag>
            
            <tag> 归并排序 </tag>
            
            <tag> 性能 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实验四之矩s十字链表存储系数矩阵及其转置</title>
      <link href="/2019/10/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E5%9B%9B%E4%B9%8B%E5%8D%81%E5%AD%97%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E5%8F%8A%E5%85%B6%E8%BD%AC%E7%BD%AE/"/>
      <url>/2019/10/19/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E5%9B%9B%E4%B9%8B%E5%8D%81%E5%AD%97%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8%E7%A8%80%E7%96%8F%E7%9F%A9%E9%98%B5%E5%8F%8A%E5%85%B6%E8%BD%AC%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="如题，"><a href="#如题，" class="headerlink" title="如题，"></a>如题，</h3><h3 id="数据结构实验四之矩s十字链表存储系数矩阵及其转置。"><a href="#数据结构实验四之矩s十字链表存储系数矩阵及其转置。" class="headerlink" title="数据结构实验四之矩s十字链表存储系数矩阵及其转置。"></a>数据结构实验四之矩s十字链表存储系数矩阵及其转置。</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">101</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">OLNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> i, j, e; </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">OLNode</span> *<span class="title">right</span>, *<span class="title">down</span>;</span> </span><br><span class="line">&#125;OLNode, *OLink;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">OLink *rhead, *chead;</span><br><span class="line"><span class="keyword">int</span> mu, nu, tu;  </span><br><span class="line">&#125;CrossList;</span><br><span class="line"><span class="keyword">int</span> m,n;</span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn];<span class="comment">//利用十字链表存储非零元，后将非零元存至二维数组中。</span></span><br><span class="line"><span class="keyword">int</span> b[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">CrossList <span class="title">CreateMatrix_OL</span><span class="params">(CrossList &amp;M)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">int</span> i, j, e;</span><br><span class="line">OLNode *p, *q;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输入矩阵的行数、列数和非0元素个数："</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;m, &amp;n, &amp;t);</span><br><span class="line">M.mu = m;</span><br><span class="line">M.nu = n;</span><br><span class="line">M.tu = t;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请依次输入%d行三个一组（分别表示非零元的行，列，数值）的数据,最终以0 0 0结束\n"</span>,t);</span><br><span class="line"><span class="keyword">if</span> (!(M.rhead = (OLink*)<span class="built_in">malloc</span>((m + <span class="number">1</span>) * <span class="keyword">sizeof</span>(OLink))) || !(M.chead = (OLink*)<span class="built_in">malloc</span>((n + <span class="number">1</span>) * <span class="keyword">sizeof</span>(OLink))))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"矩阵初始化失败"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">&#123;</span><br><span class="line">M.rhead[i] = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line">M.chead[j] = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;i, &amp;j, &amp;e); <span class="number">0</span> != i; <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;i, &amp;j, &amp;e)) &#123;</span><br><span class="line"><span class="keyword">if</span> (!(p = (OLNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(OLNode))))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"初始化三元组失败"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">p-&gt;i = i;</span><br><span class="line">p-&gt;j = j;</span><br><span class="line">p-&gt;e = e;</span><br><span class="line">a[i][j] = e;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == M.rhead[i] || M.rhead[i]-&gt;j &gt; j)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;right = M.rhead[i];</span><br><span class="line">M.rhead[i] = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (q = M.rhead[i]; (q-&gt;right) &amp;&amp; q-&gt;right-&gt;j &lt; j; q = q-&gt;right);</span><br><span class="line">p-&gt;right = q-&gt;right;</span><br><span class="line">q-&gt;right = p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">NULL</span> == M.chead[j] || M.chead[j]-&gt;i &gt; i)</span><br><span class="line">&#123;</span><br><span class="line">p-&gt;down = M.chead[j];</span><br><span class="line">M.chead[j] = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (q = M.chead[j]; (q-&gt;down) &amp;&amp; q-&gt;down-&gt;i &lt; i; q = q-&gt;down);</span><br><span class="line">p-&gt;down = q-&gt;down;</span><br><span class="line">q-&gt;down = p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> M;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[i][j] &lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="keyword">if</span> (j == n) <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">TransposeSMatrix</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> col, row;</span><br><span class="line"><span class="keyword">for</span> (col = <span class="number">1</span>; col &lt;= n; col++)</span><br><span class="line"><span class="keyword">for</span> (row = <span class="number">1</span>; row &lt;= m; row++)</span><br><span class="line">b[col][row] = a[row][col];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">display_Transpose</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"转置后的矩阵M："</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= m;j++) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">if</span> (j == m) <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">CrossList M;</span><br><span class="line">M.rhead = <span class="literal">NULL</span>;</span><br><span class="line">M.chead = <span class="literal">NULL</span>;</span><br><span class="line">M = CreateMatrix_OL(M);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"输出矩阵M:\n"</span>);</span><br><span class="line">display();</span><br><span class="line">TransposeSMatrix();</span><br><span class="line">display_Transpose();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img alt data-src="https://s2.ax1x.com/2019/10/19/KmbVgK.png" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 十字链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实验三之矩阵的压缩和解压</title>
      <link href="/2019/10/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E4%B8%89%E4%B9%8B%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B/"/>
      <url>/2019/10/13/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E4%B8%89%E4%B9%8B%E7%9F%A9%E9%98%B5%E7%9A%84%E5%8E%8B%E7%BC%A9%E5%92%8C%E8%A7%A3%E5%8E%8B/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="数据结构实验三之矩阵压缩和释放，应用多种方法。"><a href="#数据结构实验三之矩阵压缩和释放，应用多种方法。" class="headerlink" title="数据结构实验三之矩阵压缩和释放，应用多种方法。"></a>数据结构实验三之矩阵压缩和释放，应用多种方法。</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">200</span>][<span class="number">200</span>];</span><br><span class="line"><span class="keyword">int</span> c[<span class="number">200</span>][<span class="number">200</span>];</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200</span> * <span class="number">201</span> / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> b[maxn];</span><br><span class="line"><span class="keyword">int</span> k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">two_circle_compression</span><span class="params">()</span> </span>&#123;<span class="comment">/*二重循环压缩矩阵*/</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"二重循环压缩后的结果"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= j) &#123;</span><br><span class="line">b[i * (i - <span class="number">1</span>) / <span class="number">2</span> + j - <span class="number">1</span>] = a[i][j];</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">b[j * (j - <span class="number">1</span>) / <span class="number">2</span> + i - <span class="number">1</span>] = a[i][j];</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">one_circle_compression</span><span class="params">()</span> </span>&#123;<span class="comment">/*一重循环压缩矩阵*/</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"一重循环压缩后的结果"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">k = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; i &lt;= n; )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= j) &#123;</span><br><span class="line">b[i * (i - <span class="number">1</span>) / <span class="number">2</span> + j - <span class="number">1</span>] = a[i][j];</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">b[j * (j - <span class="number">1</span>) / <span class="number">2</span> + i - <span class="number">1</span>] = a[i][j];</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">j = <span class="number">1</span>;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">release1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"一重循环解压的结果"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; k; x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (; i &lt;= n; )</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (x == i * (i - <span class="number">1</span>) / <span class="number">2</span> + j - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i == j) c[i][j] = b[x];</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">c[i][j] = b[x];</span><br><span class="line">c[j][i] = b[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (i == j) &#123;</span><br><span class="line">i++;</span><br><span class="line">j = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> j++;</span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">release2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"二重循环解压的结果"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; k; x++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (x == i * (i - <span class="number">1</span>) / <span class="number">2</span> + j - <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i == j) c[i][j] = b[x];</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">c[i][j] = b[x];</span><br><span class="line">c[j][i] = b[x];</span><br><span class="line">&#125;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">release3</span><span class="params">()</span> </span>&#123;<span class="comment">/*矩阵解压*/</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"公式解压后的结果"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">float</span> i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; k; x++)</span><br><span class="line">&#123;</span><br><span class="line">i = <span class="built_in">sqrt</span>(<span class="number">2</span> * (x + <span class="number">1</span>) + <span class="number">0.25</span>) - <span class="number">0.5</span>;</span><br><span class="line">i = <span class="built_in">ceil</span>(i);</span><br><span class="line"><span class="keyword">int</span> i_ = i;</span><br><span class="line"><span class="keyword">int</span> j = x + <span class="number">1</span> - i * (i - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span> (i == j)</span><br><span class="line">c[i_][j] = b[x];</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">c[i_][j] = b[x];</span><br><span class="line">c[j][i_] = b[x];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_compression</span><span class="params">()</span> </span>&#123;<span class="comment">/*压缩后的矩阵打印*/</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print_realease</span><span class="params">()</span> </span>&#123;<span class="comment">/*解压后的矩阵打印*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;= n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (j != n)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c[i][j] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; c[i][j];</span><br><span class="line"><span class="keyword">if</span> (j == n)<span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"请输入矩阵的阶数："</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line"> </span><br><span class="line">one_circle_compression();<span class="comment">//一重循环压缩</span></span><br><span class="line">print_compression();<span class="comment">//打印</span></span><br><span class="line">two_circle_compression();<span class="comment">//二重循环压缩</span></span><br><span class="line">print_compression();<span class="comment">//打印</span></span><br><span class="line">release1();<span class="comment">//一重循环解压</span></span><br><span class="line">print_realease();<span class="comment">//打印 </span></span><br><span class="line">release2();<span class="comment">//二重循环解压</span></span><br><span class="line">print_realease();<span class="comment">//打印</span></span><br><span class="line">release3();<span class="comment">//公式解压矩阵</span></span><br><span class="line">print_realease();<span class="comment">//打印</span></span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img alt data-src="https://s2.ax1x.com/2019/10/13/uxBdr4.png" class="lazyload"></p><p><img alt data-src="https://s2.ax1x.com/2019/10/13/uxBBZ9.png" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 矩阵压缩 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1086花生采摘</title>
      <link href="/2019/10/10/%E6%B4%9B%E8%B0%B7P1086%E8%8A%B1%E7%94%9F%E9%87%87%E6%91%98/"/>
      <url>/2019/10/10/%E6%B4%9B%E8%B0%B7P1086%E8%8A%B1%E7%94%9F%E9%87%87%E6%91%98/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img alt data-src="https://s2.ax1x.com/2019/10/10/u7FwPP.png" class="lazyload"></p><p>解题过程如下，刚开始以为要冬天规划，实则不用。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> p[<span class="number">200</span>][<span class="number">200</span>];</span><br><span class="line"><span class="keyword">int</span> k;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">peanut</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line">&#125;;</span><br><span class="line">peanut pnut[<span class="number">5010</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(peanut a, peanut b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.num &gt; b.num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> m, n,time, k = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n &gt;&gt; time;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=m;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; p[i][j];</span><br><span class="line"><span class="keyword">if</span> (p[i][j] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">pnut[k].num = p[i][j];</span><br><span class="line">pnut[k].x = i;</span><br><span class="line">pnut[k].y = j;</span><br><span class="line">k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(pnut, pnut + k, cmp);</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">0</span>) pnut[i].t = pnut[i].x + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> pnut[i].t = pnut[i - <span class="number">1</span>].t + <span class="built_in">abs</span>(pnut[i].x - pnut[i - <span class="number">1</span>].x) + <span class="built_in">abs</span>(pnut[i].y - pnut[i - <span class="number">1</span>].y) + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (pnut[i].t + pnut[i].x &lt;= time) ans += pnut[i].num;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>汉诺塔的非递归实现方法</title>
      <link href="/2019/09/30/%E6%B1%89%E8%AF%BA%E5%A1%94%E7%9A%84%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/"/>
      <url>/2019/09/30/%E6%B1%89%E8%AF%BA%E5%A1%94%E7%9A%84%E9%9D%9E%E9%80%92%E5%BD%92%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="数据结构国庆作业——"><a href="#数据结构国庆作业——" class="headerlink" title="数据结构国庆作业——"></a>数据结构国庆作业——</h3><p>汉诺塔的非递归实现方法</p><p>版本一是STL版本；</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> from, <span class="keyword">char</span> to)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"from "</span> &lt;&lt; from &lt;&lt; <span class="string">" move "</span> &lt;&lt; n &lt;&lt; <span class="string">" to "</span> &lt;&lt; to &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hanoinode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> from, pass, to;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> from, <span class="keyword">char</span> pass, <span class="keyword">char</span> to)</span> </span>&#123;</span><br><span class="line"><span class="built_in">stack</span> &lt;hanoinode&gt; s;</span><br><span class="line">hanoinode par_outer = &#123; n,from,pass,to &#125;;</span><br><span class="line"><span class="keyword">while</span> (!(par_outer.n == <span class="number">0</span> &amp;&amp; s.empty())) &#123;</span><br><span class="line">hanoinode par_inner = par_outer;</span><br><span class="line"><span class="keyword">while</span> (par_inner.n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">s.push(par_inner);</span><br><span class="line">par_inner.n--;</span><br><span class="line">swap(par_inner.pass, par_inner.to);</span><br><span class="line">&#125;</span><br><span class="line">par_outer = s.top();</span><br><span class="line">s.pop();</span><br><span class="line">move(par_outer.n, par_outer.from, par_outer.to);</span><br><span class="line">par_outer.n--;</span><br><span class="line">swap(par_outer.from, par_outer.pass);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">hanoi(n, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p>版本二是顺序栈版</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACK_INIT_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INCREASEMENT 10</span></span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">hanoinode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> from, pass, to;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>  &#123;</span></span><br><span class="line">hanoinode *base;</span><br><span class="line">hanoinode *top;</span><br><span class="line"><span class="keyword">int</span> stacksize;</span><br><span class="line">&#125;Sqstack;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Initstack</span><span class="params">(Sqstack &amp;S)</span> </span>&#123;</span><br><span class="line">S.base = (hanoinode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(hanoinode)*STACK_INIT_SIZE);</span><br><span class="line">S.top = S.base;</span><br><span class="line">S.stacksize = STACK_INIT_SIZE;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">push</span><span class="params">(Sqstack &amp;S, hanoinode e)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top - S.base == S.stacksize) &#123;</span><br><span class="line">S.base = (hanoinode *)<span class="built_in">realloc</span>(S.base, (S.stacksize + INCREASEMENT) * <span class="keyword">sizeof</span>(hanoinode));</span><br><span class="line">S.top = S.base + S.stacksize;</span><br><span class="line">S.stacksize += INCREASEMENT;</span><br><span class="line">&#125;</span><br><span class="line">*S.top++ = e;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">move</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> from, <span class="keyword">char</span> to)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"from "</span> &lt;&lt; from &lt;&lt; <span class="string">" move "</span> &lt;&lt; n &lt;&lt; <span class="string">" to "</span> &lt;&lt; to &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">hanoinode <span class="title">GetTop</span><span class="params">(Sqstack S)</span> </span>&#123;</span><br><span class="line"><span class="comment">//if (S.top == S.base) return 0;</span></span><br><span class="line">hanoinode e;</span><br><span class="line">e = *--S.top;</span><br><span class="line"><span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Pop</span><span class="params">(Sqstack &amp;S)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (S.top == S.base) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">hanoinode e;</span><br><span class="line">e = *--S.top;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">hanoi</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">char</span> from, <span class="keyword">char</span> pass, <span class="keyword">char</span> to)</span> </span>&#123;</span><br><span class="line">Sqstack s;</span><br><span class="line">Initstack(s);</span><br><span class="line">hanoinode par_outer = &#123; n,from,pass,to &#125;;</span><br><span class="line"><span class="keyword">while</span> (!(par_outer.n == <span class="number">0</span> &amp;&amp; s.top == s.base)) &#123;</span><br><span class="line">hanoinode par_inner = par_outer;</span><br><span class="line"><span class="keyword">while</span> (par_inner.n &gt; <span class="number">0</span>) &#123;</span><br><span class="line">push(s, par_inner);</span><br><span class="line">par_inner.n--;</span><br><span class="line">swap(par_inner.pass, par_inner.to);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">par_outer = GetTop(s);</span><br><span class="line">Pop(s);</span><br><span class="line">move(par_outer.n, par_outer.from, par_outer.to);</span><br><span class="line">par_outer.n--;</span><br><span class="line">swap(par_outer.from, par_outer.pass);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">hanoi(n, <span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt;<span class="string">"共进行了"</span> &lt;&lt; cnt &lt;&lt; <span class="string">"次"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 汉诺塔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图的广度优先遍历</title>
      <link href="/2019/09/25/%E5%9B%BE%E7%9A%84%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/"/>
      <url>/2019/09/25/%E5%9B%BE%E7%9A%84%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img alt data-src="https://s2.ax1x.com/2019/09/25/ueiIit.jpg" class="lazyload"></p><p><img alt data-src="https://s2.ax1x.com/2019/09/25/uei4II.jpg" class="lazyload"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">9999999</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> x, s;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> <span class="title">que</span>[2501];</span></span><br><span class="line"><span class="keyword">int</span> e[<span class="number">101</span>][<span class="number">101</span>], book[<span class="number">51</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> head, tail;</span><br><span class="line"><span class="keyword">int</span> n, m, a,b, cur, start, end, flag = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m &gt;&gt; start &gt;&gt; end;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;=n;i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (i == j) e[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> e[i][j] = maxn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">e[a][b] = <span class="number">1</span>;</span><br><span class="line">e[b][a] = <span class="number">1</span>;<span class="comment">//无向图</span></span><br><span class="line">&#125;</span><br><span class="line">head = <span class="number">1</span>;</span><br><span class="line">tail = <span class="number">1</span>;</span><br><span class="line">que[head].x = start;</span><br><span class="line">que[head].s = <span class="number">0</span>;</span><br><span class="line">tail++;</span><br><span class="line">book[start] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (head &lt; tail) &#123;</span><br><span class="line">cur = que[head].x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (e[cur][j] != maxn &amp;&amp; book[j] == <span class="number">0</span>) &#123;</span><br><span class="line">que[tail].x = j;</span><br><span class="line">que[tail].s = que[head].s + <span class="number">1</span>;</span><br><span class="line">tail++;</span><br><span class="line">book[j] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (que[tail - <span class="number">1</span>].s == end) &#123;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag == <span class="number">1</span>)</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">head++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, que[tail - <span class="number">1</span>].s); </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        本题也可使用深度优先搜索，但是这里使用广度优先搜索会更快。广度优先搜索会更加适用于所有边的 权值相同的情况。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 啊哈算法 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 广度优先遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图的深度优先遍历</title>
      <link href="/2019/09/25/%E5%9B%BE%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/"/>
      <url>/2019/09/25/%E5%9B%BE%E7%9A%84%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h2 id="数据是这样给出的："><a href="#数据是这样给出的：" class="headerlink" title="数据是这样给出的："></a>数据是这样给出的：</h2><p><img alt data-src="https://s2.ax1x.com/2019/09/25/uZXA61.jpg" class="lazyload"></p><p>好了，下面附上代码。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>; </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> limit = <span class="number">999999</span>;</span><br><span class="line"><span class="keyword">int</span> min_ = limit, book[<span class="number">101</span>], n, e[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur, <span class="keyword">int</span> dis)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> j;</span><br><span class="line"><span class="keyword">if</span> (dis &gt; min_) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span> (cur == n) &#123;</span><br><span class="line"><span class="keyword">if</span> (dis &lt; min_) min_ = dis;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (e[cur][j] != limit &amp;&amp; book[j] == <span class="number">0</span>) &#123;</span><br><span class="line">book[j] = <span class="number">1</span>;</span><br><span class="line">dfs(j, dis + e[cur][j]);</span><br><span class="line">book[j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> m, a, b, c;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line"><span class="keyword">if</span> (i == j) e[i][j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> e[i][j] = limit;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">e[a][b] = c;</span><br><span class="line">&#125;</span><br><span class="line">book[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; min_;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 啊哈算法 </tag>
            
            <tag> 图论 </tag>
            
            <tag> 深度优先遍历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1036选数</title>
      <link href="/2019/09/23/%E6%B4%9B%E8%B0%B7P1036%E9%80%89%E6%95%B0/"/>
      <url>/2019/09/23/%E6%B4%9B%E8%B0%B7P1036%E9%80%89%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img alt data-src="https://s2.ax1x.com/2019/09/23/uiciad.png" class="lazyload"></p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1000</span>], book[<span class="number">1000</span>], m,n,sum,ans;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isprime</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x == <span class="number">0</span> || x == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(x); i++)</span><br><span class="line"><span class="keyword">if</span> (x % i == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = y; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (book[i] == <span class="number">0</span>) &#123;</span><br><span class="line">book[i] = <span class="number">1</span>;</span><br><span class="line">sum += a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (n == x) &#123;</span><br><span class="line"><span class="keyword">if</span> (isprime(sum)) ans++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">dfs(x + <span class="number">1</span>, i + <span class="number">1</span>);</span><br><span class="line">sum -= a[i];</span><br><span class="line">book[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; m &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">dfs(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>, ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深搜广搜遍历图</title>
      <link href="/2019/09/22/%E6%B7%B1%E6%90%9C%E5%B9%BF%E6%90%9C%E9%81%8D%E5%8E%86%E5%9B%BE/"/>
      <url>/2019/09/22/%E6%B7%B1%E6%90%9C%E5%B9%BF%E6%90%9C%E9%81%8D%E5%8E%86%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>今天学习了一下如何用深搜和广搜遍历图。</p><p>下面是广度优先搜索</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;<span class="comment">//广度优先搜索</span></span><br><span class="line">    <span class="keyword">int</span> i,j,n,m,a,b,cur,book[<span class="number">101</span>] = &#123;<span class="number">0</span>&#125;,e[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line">    <span class="keyword">int</span> que[<span class="number">10001</span>],head,tail;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>;j &lt;= n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == j) e[i][j] = <span class="number">0</span>;<span class="comment">//对角线赋值为0</span></span><br><span class="line">            <span class="keyword">else</span> e[i][j] = <span class="number">9999999</span>;<span class="comment">//定义9999999为∞</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a,&amp;b);</span><br><span class="line">        e[a][b] = <span class="number">1</span>;</span><br><span class="line">        e[b][a] = <span class="number">1</span>;<span class="comment">//无向图双向赋值</span></span><br><span class="line">    &#125;</span><br><span class="line">    head = <span class="number">1</span>;</span><br><span class="line">    tail = <span class="number">1</span>;</span><br><span class="line">    que[tail] = <span class="number">1</span>;</span><br><span class="line">    tail++;</span><br><span class="line">    book[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(head &lt; tail &amp;&amp; tail &lt;= n)&#123;</span><br><span class="line">        cur = que[head];</span><br><span class="line">        <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(e[cur][i] == <span class="number">1</span> &amp;&amp; book[i] == <span class="number">0</span>)&#123;</span><br><span class="line">                que[tail] = i;</span><br><span class="line">                tail++;</span><br><span class="line">                book[i] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(tail &gt; n) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        head++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt; tail;i++)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>,que[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img alt data-src="https://s2.ax1x.com/2019/09/22/u9MxRU.png" class="lazyload"></p><p>深度优先搜索</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> book[<span class="number">101</span>],sum,n,e[<span class="number">101</span>][<span class="number">101</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> cur)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>,cur);</span><br><span class="line">    sum++;</span><br><span class="line">    <span class="keyword">if</span>(sum == n) <span class="keyword">return</span> ;<span class="comment">//访问所有节点</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(e[cur][i] == <span class="number">1</span>&amp;&amp; book[i] == <span class="number">0</span>)&#123;</span><br><span class="line">            book[i] = <span class="number">1</span>;</span><br><span class="line">            dfs(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j,m,a,b;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= n;i++)</span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">1</span>;j &lt;= n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i == j) e[i][j] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">else</span> e[i][j] = <span class="number">9999999</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= m;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;a,&amp;b);</span><br><span class="line">        e[a][b] = <span class="number">1</span>;</span><br><span class="line">        e[b][a] = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    book[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img alt data-src="https://s2.ax1x.com/2019/09/22/u9MTMQ.png" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 深度优先搜索 </tag>
            
            <tag> 广度优先搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1060-开心的金明(背包问题）</title>
      <link href="/2019/09/22/%E6%B4%9B%E8%B0%B7P1060-%E5%BC%80%E5%BF%83%E7%9A%84%E9%87%91%E6%98%8E(%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%EF%BC%89/"/>
      <url>/2019/09/22/%E6%B4%9B%E8%B0%B7P1060-%E5%BC%80%E5%BF%83%E7%9A%84%E9%87%91%E6%98%8E(%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img alt data-src="https://s2.ax1x.com/2019/09/22/upOy24.png" class="lazyload"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> weight[<span class="number">30</span>],cost[<span class="number">30</span>],f[<span class="number">10000</span>];</span><br><span class="line"><span class="keyword">int</span> money,number;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; money &gt;&gt; number;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= number;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt;cost[i] &gt;&gt;weight[i];</span><br><span class="line">        weight[i] *= cost[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= number;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = money;j &gt;= cost[i];j--)</span><br><span class="line">            f[j] = max(f[j],f[j - cost[i]] + weight[i]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; f[money] &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洛谷P1002过河卒</title>
      <link href="/2019/09/21/%E6%B4%9B%E8%B0%B7P1002%E8%BF%87%E6%B2%B3%E5%8D%92/"/>
      <url>/2019/09/21/%E6%B4%9B%E8%B0%B7P1002%E8%BF%87%E6%B2%B3%E5%8D%92/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><img alt data-src="https://s2.ax1x.com/2019/09/21/nzxhlQ.png" class="lazyload"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MX[] = &#123;<span class="number">0</span>,<span class="number">-1</span>,<span class="number">-2</span>,<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>&#125;;<span class="comment">//记录马能到达的位置</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MY[] = &#123;<span class="number">0</span>,<span class="number">-2</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">1</span>,<span class="number">-1</span>,<span class="number">-2</span>&#125;;</span><br><span class="line">ull destination[<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> book[<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> dx,dy,mx,my;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; dx &gt;&gt; dy &gt;&gt; mx &gt;&gt; my;</span><br><span class="line">    ++dx;++dy;++mx;++my;<span class="comment">//防止数组越界全部加1</span></span><br><span class="line">    destination[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;<span class="comment">//初始化马的初始位置</span></span><br><span class="line">    book[mx][my] = <span class="number">1</span>;<span class="comment">//记录马能到达的位置的值为1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">8</span>;i++)</span><br><span class="line">        book[mx + MX[i]][my + MY[i]] = <span class="number">1</span>;<span class="comment">//作记录</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= dx;i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>;j &lt;= dy;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(book[i][j]) <span class="keyword">continue</span>;</span><br><span class="line">            destination[i][j] = max(destination[i][j],destination[i<span class="number">-1</span>][j]+destination[i][j<span class="number">-1</span>]);<span class="comment">//状态转移方程</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; destination[dx][dy];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 洛谷 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列的实现</title>
      <link href="/2019/09/21/%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/09/21/%E9%98%9F%E5%88%97%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> QElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span> &#123;</span></span><br><span class="line">    QElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">QNode</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;QNode,*QueuePtr;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    QueuePtr front;</span><br><span class="line">    QueuePtr rear;</span><br><span class="line">&#125;LinkQueue;</span><br><span class="line"></span><br><span class="line"><span class="function">QueuePtr <span class="title">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span> </span>&#123;</span><br><span class="line">    Q.front = Q.rear = (QueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line">    Q.front-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">return</span> Q.front;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DestroyQueue</span><span class="params">(LinkQueue&amp; Q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (Q.front) &#123;</span><br><span class="line">        Q.rear = Q.front-&gt;next;</span><br><span class="line">        <span class="built_in">free</span>(Q.front);</span><br><span class="line">        Q.front = Q.rear;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EnQueue</span><span class="params">(LinkQueue &amp;Q, QElemType e)</span> </span>&#123;</span><br><span class="line">    QueuePtr p;</span><br><span class="line">    p = (QueuePtr)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(QNode));</span><br><span class="line">    p-&gt;data = e; p-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    Q.rear-&gt;next = p;</span><br><span class="line">    Q.rear = p;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeQueue</span><span class="params">(LinkQueue&amp; Q)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (Q.front == Q.rear) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    QueuePtr p;</span><br><span class="line">    p = Q.front-&gt;next;</span><br><span class="line">    Q.front-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span> (Q.rear == p) Q.rear = Q.front;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(LinkQueue Q)</span> </span>&#123;</span><br><span class="line">    QueuePtr p = Q.front -&gt;next;</span><br><span class="line">    <span class="keyword">while</span> (p) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; p-&gt;data &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    LinkQueue q;</span><br><span class="line">    InitQueue(q);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"请输入度列的长度: "</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">        EnQueue(q, temp);</span><br><span class="line">    &#125;</span><br><span class="line">    print(q);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    LinkQueue t = q;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t.front&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t.rear &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; t.front-&gt;next-&gt;data &lt;&lt; t.rear-&gt;data &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    DeQueue(q);</span><br><span class="line">    print(q);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    EnQueue(q,<span class="number">5</span>);</span><br><span class="line">    print(q);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">if</span>(DestroyQueue(q))</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"Destroy Queue completely"</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈的实现</title>
      <link href="/2019/09/21/%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/09/21/%E6%A0%88%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACK_INIT_SIZE 100</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STACKINCREASEMENT 10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OK 1</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> SElemType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">    SElemType* base;</span><br><span class="line">    SElemType* top;</span><br><span class="line">    <span class="keyword">int</span> stacksize;</span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">SqStack <span class="title">InitStack</span><span class="params">(SqStack &amp;S)</span> </span>&#123;</span><br><span class="line">    S.base = (SElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SElemType)* STACK_INIT_SIZE);</span><br><span class="line">    S.top = S.base ;</span><br><span class="line">    S.stacksize = STACK_INIT_SIZE;</span><br><span class="line">    <span class="keyword">return</span> S;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">SElemType <span class="title">GetTop</span><span class="params">(SqStack S, SElemType&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == S.base) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = *(S.top - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(SqStack&amp; S, SElemType e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top - S.base &gt;= S.stacksize) &#123;</span><br><span class="line">        S.base = (SElemType*)<span class="built_in">realloc</span>(S.base, (S.stacksize + STACKINCREASEMENT) * <span class="keyword">sizeof</span>(SElemType));</span><br><span class="line">        S.top = S.base + S.stacksize;</span><br><span class="line">        S.stacksize += STACKINCREASEMENT;</span><br><span class="line">    &#125;</span><br><span class="line">    *S.top++ = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">SElemType <span class="title">Pop</span><span class="params">(SqStack&amp; S, SElemType&amp; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (S.top == S.base) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    e = *--S.top;</span><br><span class="line">    <span class="keyword">return</span> e;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(SqStack S)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (S.top != S.base) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; *--S.top &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"栈的元素个数："</span>);</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    SqStack S;</span><br><span class="line">    InitStack(S);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> temp;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; temp;</span><br><span class="line">        Push(S, temp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"栈顶的值为："</span>);</span><br><span class="line">    <span class="keyword">int</span> k;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, GetTop(S, k));</span><br><span class="line">    print(S);</span><br><span class="line">    <span class="keyword">int</span> del;</span><br><span class="line">    <span class="keyword">int</span> t = Pop(S, del);</span><br><span class="line">    <span class="keyword">if</span> (t) <span class="built_in">printf</span>(<span class="string">"删除栈顶值%d成功\n"</span>,t);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"剩余的值为："</span>);</span><br><span class="line">    print(S);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"继续插入一个值："</span>);</span><br><span class="line">    <span class="keyword">int</span> extra;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; extra;</span><br><span class="line">    Push(S,extra);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    print(S);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法与数据结构7-5 堆中的路径 (25 分)</title>
      <link href="/2019/09/17/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%847-5-%E5%A0%86%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84-25-%E5%88%86/"/>
      <url>/2019/09/17/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%847-5-%E5%A0%86%E4%B8%AD%E7%9A%84%E8%B7%AF%E5%BE%84-25-%E5%88%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>将一系列给定数字插入一个初始为空的小顶堆<code>H[]</code>。随后对任意给定的下标<code>i</code>，打印从<code>H[i]</code>到根结点的路径。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>每组测试第1行包含2个正整数<em>N</em>和<em>M</em>(≤1000)，分别是插入元素的个数、以及需要打印的路径条数。下一行给出区间[-10000, 10000]内的<em>N</em>个要被插入一个初始为空的小顶堆的整数。最后一行给出<em>M</em>个下标。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>对输入中给出的每个下标<code>i</code>，在一行中输出从<code>H[i]</code>到根结点的路径上的数据。数字间以1个空格分隔，行末不得有多余空格。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">5 3</span><br><span class="line">46 23 26 24 10</span><br><span class="line">5 4 3</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">24 23 10</span><br><span class="line">46 23 10</span><br><span class="line">26 10</span><br></pre></td></tr></table></figure><p>用了啊哈算法上的代码通不过，还得另行他法。</p><p>下附AC代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e6</span> + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> h[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> Size = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">Size++;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = Size; x &lt; h[i / <span class="number">2</span>]; i /= <span class="number">2</span>) &#123;</span><br><span class="line">h[i] = h[i / <span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">h[i] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line">h[<span class="number">0</span>] = <span class="number">-100001</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">insert(t);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">int</span> t; </span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line"><span class="keyword">for</span> (i = t; i &gt;= <span class="number">1</span>; i /= <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == t) <span class="built_in">cout</span> &lt;&lt; h[i];</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt;<span class="string">" "</span>&lt;&lt; h[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> PTA </tag>
            
            <tag> 算法与数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈和队列的综合应用——纸牌游戏</title>
      <link href="/2019/09/16/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E7%9A%84%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8%E2%80%94%E2%80%94%E7%BA%B8%E7%89%8C%E6%B8%B8%E6%88%8F/"/>
      <url>/2019/09/16/%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97%E7%9A%84%E7%BB%BC%E5%90%88%E5%BA%94%E7%94%A8%E2%80%94%E2%80%94%E7%BA%B8%E7%89%8C%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="现有纸牌游戏的规则如下：将一副扑克牌平均分成两份，每人拿一份。小哼先拿出手中的第一张扑克牌放在桌上，然后小哈也拿出手中的第一张扑克牌，并放在小哼刚打出的扑克牌的上面，就像这样两人交替出牌。出牌时，如果某人打出的牌与桌面上某张牌的牌面相同，即可将两张相同的牌及其中间所夹的牌全部取走，并依次放入到自己手中牌的末尾。当任意一个人手中的牌全部出完时，游戏结束，对手获胜。"><a href="#现有纸牌游戏的规则如下：将一副扑克牌平均分成两份，每人拿一份。小哼先拿出手中的第一张扑克牌放在桌上，然后小哈也拿出手中的第一张扑克牌，并放在小哼刚打出的扑克牌的上面，就像这样两人交替出牌。出牌时，如果某人打出的牌与桌面上某张牌的牌面相同，即可将两张相同的牌及其中间所夹的牌全部取走，并依次放入到自己手中牌的末尾。当任意一个人手中的牌全部出完时，游戏结束，对手获胜。" class="headerlink" title="现有纸牌游戏的规则如下：将一副扑克牌平均分成两份，每人拿一份。小哼先拿出手中的第一张扑克牌放在桌上，然后小哈也拿出手中的第一张扑克牌，并放在小哼刚打出的扑克牌的上面，就像这样两人交替出牌。出牌时，如果某人打出的牌与桌面上某张牌的牌面相同，即可将两张相同的牌及其中间所夹的牌全部取走，并依次放入到自己手中牌的末尾。当任意一个人手中的牌全部出完时，游戏结束，对手获胜。"></a>现有纸牌游戏的规则如下：将一副扑克牌平均分成两份，每人拿一份。小哼先拿出手中的第一张扑克牌放在桌上，然后小哈也拿出手中的第一张扑克牌，并放在小哼刚打出的扑克牌的上面，就像这样两人交替出牌。出牌时，如果某人打出的牌与桌面上某张牌的牌面相同，即可将两张相同的牌及其中间所夹的牌全部取走，并依次放入到自己手中牌的末尾。当任意一个人手中的牌全部出完时，游戏结束，对手获胜。</h3><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">queue</span> &#123;</span><span class="comment">//将队列的元素封装为一个结构体</span></span><br><span class="line"><span class="keyword">int</span> data[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">int</span> head;</span><br><span class="line"><span class="keyword">int</span> tail;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stack</span> &#123;</span><span class="comment">//将栈的元素封装为一个结构体</span></span><br><span class="line"><span class="keyword">int</span> data[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> top;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">queue</span> <span class="title">q1</span>, <span class="title">q2</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">stack</span> <span class="title">s</span>;</span></span><br><span class="line"><span class="keyword">int</span> book[<span class="number">10</span>];</span><br><span class="line"><span class="keyword">int</span> i, t;</span><br><span class="line"><span class="comment">//初始化队列</span></span><br><span class="line">q1.head = <span class="number">1</span>; q1.tail = <span class="number">1</span>;</span><br><span class="line">q2.head = <span class="number">1</span>; q2.tail = <span class="number">1</span>;</span><br><span class="line"><span class="comment">//初始化栈</span></span><br><span class="line">s.top = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//用来标记的数组，用来标记哪些牌已经在桌上；</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i++)</span><br><span class="line">book[i] = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//小哼手上的6张牌</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q1.data[q1.tail];</span><br><span class="line">q1.tail++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//小哈手上的6张牌</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= <span class="number">6</span>; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q2.data[q2.tail];</span><br><span class="line">q2.tail++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (q1.head &lt; q1.tail &amp;&amp; q2.head &lt; q2.tail) &#123;</span><br><span class="line">t = q1.data[q1.head];<span class="comment">//小哼出牌</span></span><br><span class="line"><span class="comment">//判断小哼是否能赢牌</span></span><br><span class="line"><span class="keyword">if</span> (book[t] == <span class="number">0</span>) &#123;<span class="comment">//表明桌上没有牌面为t的牌</span></span><br><span class="line"><span class="comment">//小哼此轮没有赢牌</span></span><br><span class="line">q1.head++;<span class="comment">//出列</span></span><br><span class="line">s.top++;</span><br><span class="line">s.data[s.top] = t;<span class="comment">//入栈</span></span><br><span class="line">book[t] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="comment">//小哼此轮可以赢牌</span></span><br><span class="line">q1.head++;<span class="comment">//出列</span></span><br><span class="line">q1.data[q1.tail] = t;<span class="comment">//将牌放入末尾</span></span><br><span class="line">q1.tail++;</span><br><span class="line"><span class="keyword">while</span> (s.data[s.top] != t) &#123;<span class="comment">//将可以赢的的牌放入队尾</span></span><br><span class="line">book[s.data[s.top]] = <span class="number">0</span>;</span><br><span class="line">q1.data[q1.tail] = s.data[s.top];</span><br><span class="line">q1.tail++; s.top--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//收回桌上为t的牌</span></span><br><span class="line">book[s.data[s.top]] = <span class="number">0</span>;</span><br><span class="line">q1.data[q1.tail] = s.data[s.top];</span><br><span class="line">q1.tail++; s.top--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (q1.head == q1.tail) <span class="keyword">break</span>;</span><br><span class="line">t = q2.data[q2.head];<span class="comment">//小哼出牌</span></span><br><span class="line"><span class="comment">//判断小哼是否能赢牌</span></span><br><span class="line"><span class="keyword">if</span> (book[t] == <span class="number">0</span>) &#123;<span class="comment">//表明桌上没有牌面为t的牌</span></span><br><span class="line"><span class="comment">//小哼此轮没有赢牌</span></span><br><span class="line">q2.head++;<span class="comment">//出列</span></span><br><span class="line">s.top++;</span><br><span class="line">s.data[s.top] = t;<span class="comment">//入栈</span></span><br><span class="line">book[t] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//小哼此轮可以赢牌</span></span><br><span class="line">q2.head++;<span class="comment">//出列</span></span><br><span class="line">q2.data[q2.tail] = t;<span class="comment">//将牌放入末尾</span></span><br><span class="line">q2.tail++;</span><br><span class="line"><span class="keyword">while</span> (s.data[s.top] != t) &#123;<span class="comment">//将可以赢的的牌放入队尾</span></span><br><span class="line">book[s.data[s.top]] = <span class="number">0</span>;</span><br><span class="line">q2.data[q2.tail] = s.data[s.top];</span><br><span class="line">q2.tail++; s.top--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//收回桌上为t的牌</span></span><br><span class="line">book[s.data[s.top]] = <span class="number">0</span>;</span><br><span class="line">q2.data[q2.tail] = s.data[s.top];</span><br><span class="line">q2.tail++; s.top--;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (q2.head == q2.tail) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"小哼win\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"小哼当前手中的牌是"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = q1.head; i &lt;= q1.tail - <span class="number">1</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d"</span>, q1.data[i]);</span><br><span class="line"><span class="keyword">if</span> (s.top &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n桌上的牌是"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= s.top; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.data[i] &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n桌上已经没有牌了"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"小哈win\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"小哈当前手中的牌是"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = q2.head; i &lt;= q2.tail - <span class="number">1</span>; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" %d"</span>, q2.data[i]);</span><br><span class="line"><span class="keyword">if</span> (s.top &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n桌上的牌是"</span>);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= s.top; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.data[i] &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n桌上已经没有牌了"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img alt data-src="https://s2.ax1x.com/2019/09/16/nWawrj.png" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 啊哈算法 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>队列的应用</title>
      <link href="/2019/09/15/%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A8/"/>
      <url>/2019/09/15/%E9%98%9F%E5%88%97%E7%9A%84%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>以揭秘qq号为例，若是美女告诉你个qq号码你不会解密那就很尴尬了。</p><p><img alt data-src="https://s2.ax1x.com/2019/09/15/ngUheP.jpg" class="lazyload"></p><h4 id="如过没有排错的话，最终结果应该是“6-1-5-9-4-7-2-8-3”。"><a href="#如过没有排错的话，最终结果应该是“6-1-5-9-4-7-2-8-3”。" class="headerlink" title="如过没有排错的话，最终结果应该是“6 1 5 9 4 7 2 8 3”。"></a><strong>如过没有排错的话，最终结果应该是“6 1 5 9 4 7 2 8 3”。</strong></h4><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">queue</span> &#123;</span><span class="comment">//将队列的元素封装为一个结构体</span></span><br><span class="line"><span class="keyword">int</span> data[<span class="number">101</span>];</span><br><span class="line"><span class="keyword">int</span> head;</span><br><span class="line"><span class="keyword">int</span> tail;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">queue</span> q;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;<span class="comment">//我将原题目的意思稍微修改了一下，不再局限于九位数，可以是任意位数字。</span></span><br><span class="line">q.head = <span class="number">1</span>;</span><br><span class="line">q.tail = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; q.data[q.tail];</span><br><span class="line">q.tail++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (q.head &lt; q.tail) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, q.data[q.head]);<span class="comment">//打印队首</span></span><br><span class="line">q.head++;<span class="comment">//队首出列</span></span><br><span class="line">q.data[q.tail] = q.data[q.head];<span class="comment">//将新队首的数添加至队尾</span></span><br><span class="line">q.tail++;<span class="comment">//队尾加1</span></span><br><span class="line">q.head++;<span class="comment">//队首出列</span></span><br><span class="line">&#125;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>想到singularity等大佬已经那么强了，不写点东西心里难受。</p><p><img alt data-src="https://s2.ax1x.com/2019/09/09/ntEkxs.jpg" class="lazyload"></p><p>一会儿要出去吃饭，嘻嘻嘻。</p><p><img alt data-src="https://s2.ax1x.com/2019/09/12/nBqMlt.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 啊哈算法 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二叉搜索树的相关操作</title>
      <link href="/2019/09/15/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/09/15/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">/二叉搜索树是一棵二叉树，可以为空，如果不为空，有如下的性质</span><br><span class="line"><span class="comment">//（1）非空左子树的所有键值小于其根结点的键值</span></span><br><span class="line"><span class="comment">//（2）非空右子树的所有键值大于其根结点的键值</span></span><br><span class="line"><span class="comment">//（3）左右子树都是二叉搜索树</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElemType;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> &#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> *<span class="title">left</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TNode</span> *<span class="title">right</span>;</span></span><br><span class="line">&#125;; </span><br><span class="line"><span class="keyword">typedef</span> TNode *BT;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">BT <span class="title">CreateBinTree</span><span class="params">()</span> </span>&#123;</span><br><span class="line">BT T;</span><br><span class="line">ElemType ch;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; ch;</span><br><span class="line"><span class="keyword">if</span> (ch == <span class="number">0</span>)</span><br><span class="line">T = <span class="literal">NULL</span>;<span class="comment">//到叶节点之后，其左右儿子的值赋值为0</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">T = (BT)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TNode));</span><br><span class="line">T-&gt;data = ch;</span><br><span class="line">T-&gt;left = CreateBinTree();</span><br><span class="line">T-&gt;right = CreateBinTree();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> T;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二叉搜索树查找元素（递归）</span></span><br><span class="line"><span class="function">BT <span class="title">Findx_inBST</span><span class="params">(BT BST, ElemType x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!BST) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (BST-&gt;data &lt; x)</span><br><span class="line">Findx_inBST(BST-&gt;right, x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BST-&gt;data &gt; x)</span><br><span class="line">Findx_inBST(BST-&gt;left, x);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二叉搜索树查找元素（非递归）</span></span><br><span class="line"><span class="function">BT <span class="title">Findx_inBST2</span><span class="params">(BT BST, ElemType x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!BST) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (BST) &#123;</span><br><span class="line"><span class="keyword">if</span> (BST-&gt;data &lt; x)</span><br><span class="line">BST = BST-&gt;right;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BST-&gt;data &gt; x)</span><br><span class="line">BST = BST-&gt;left;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递归方式查找二叉搜索树的最大值</span></span><br><span class="line"><span class="comment">//二叉搜索树最大值的查找</span></span><br><span class="line"><span class="comment">//树为空直接返回；不为空，就到右子树去找，直到右子树为空，返回其父节点</span></span><br><span class="line"><span class="function">BT <span class="title">Findmax_inBST</span><span class="params">(BT BST)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!BST) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!BST-&gt;right) <span class="keyword">return</span> BST;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> Findmax_inBST(BST-&gt;right);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//非递归方式查找</span></span><br><span class="line"><span class="function">BT <span class="title">Findmax_inBST2</span><span class="params">(BT BST)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!BST) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (BST-&gt;right) BST = BST-&gt;right;</span><br><span class="line"><span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//递归方式查找二叉搜索树的最小值</span></span><br><span class="line"><span class="function">BT <span class="title">Findmin_inBST</span><span class="params">(BT BST)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!BST) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (!BST-&gt;left) <span class="keyword">return</span> BST;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> Findmax_inBST(BST-&gt;left);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//非递归方式查找</span></span><br><span class="line"><span class="function">BT <span class="title">Findmin_inBST2</span><span class="params">(BT BST)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!BST) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">while</span> (BST-&gt;left) BST = BST-&gt;left;</span><br><span class="line"><span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">/二叉搜索树的插入，与find类似</span><br><span class="line"><span class="function">BT <span class="title">InsertXtoBST</span><span class="params">(BT BST, ElemType x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!BST) &#123;</span><br><span class="line">BST = (BT)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TNode));</span><br><span class="line">BST-&gt;data = x;</span><br><span class="line">BST-&gt;left = BST-&gt;right = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (BST-&gt;data &gt; x)</span><br><span class="line">BST-&gt;left = InsertXtoBST(BST-&gt;left, x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BST-&gt;data &lt; x)</span><br><span class="line">BST-&gt;right = InsertXtoBST(BST-&gt;right, x);</span><br><span class="line"><span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//二叉搜索树的删除</span></span><br><span class="line"><span class="comment">//（1）删除的是叶节点</span></span><br><span class="line"><span class="comment">//（2）删除的节点只有一个孩子</span></span><br><span class="line"><span class="comment">//（3）删除的节点有两个孩子。此时，可以取左子树的最大值，或右子树的最小值。</span></span><br><span class="line"><span class="function">BT <span class="title">Deletex_inBST</span><span class="params">(BT BST, ElemType x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!BST) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"树为空，无法删除"</span>);</span><br><span class="line"><span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br><span class="line">BT temp;</span><br><span class="line"><span class="keyword">if</span> (BST-&gt;data &gt; x) BST-&gt;left = Deletex_inBST(BST-&gt;left, x);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (BST-&gt;data &lt; x) BST-&gt;right = Deletex_inBST(BST-&gt;right, x);</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (BST-&gt;left&amp;&amp;BST-&gt;right) &#123;</span><br><span class="line">temp = Findmax_inBST2(BST-&gt;right);</span><br><span class="line">BST-&gt;data = temp-&gt;data;</span><br><span class="line">BST-&gt;right = Deletex_inBST(BST-&gt;right, x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">temp = BST;</span><br><span class="line"><span class="keyword">if</span> (BST-&gt;left == <span class="literal">NULL</span>) BST = BST-&gt;right;</span><br><span class="line"><span class="keyword">else</span> BST = BST-&gt;left;</span><br><span class="line"><span class="built_in">free</span>(temp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> BST;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 中序遍历(递归)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InOrderTraversal</span><span class="params">(BT BT)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BT) &#123;</span><br><span class="line">InOrderTraversal(BT-&gt;left);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, BT-&gt;data);</span><br><span class="line">InOrderTraversal(BT-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 先序遍历(递归)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PreOrderTraversal</span><span class="params">(BT BT)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (BT) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, BT-&gt;data);</span><br><span class="line">PreOrderTraversal(BT-&gt;left);</span><br><span class="line">PreOrderTraversal(BT-&gt;right);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span> </span>&#123;</span><br><span class="line"><span class="comment">// 创建一棵二叉树</span></span><br><span class="line">BT T = CreateBinTree();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"二叉搜索树创建成功, 现在输出先序遍历的结果:"</span>);</span><br><span class="line">PreOrderTraversal(T);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"二叉搜索树创建成功, 现在输出中序遍历的结果:"</span>);</span><br><span class="line">InOrderTraversal(T);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"></span><br><span class="line">BT resTNode;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"【1】使用递归方式查找数字 7 是否在二叉搜索树中  : "</span>);</span><br><span class="line"><span class="keyword">if</span> (Findx_inBST(T, <span class="number">7</span>)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"YES \n"</span>);</span><br><span class="line">resTNode = Findx_inBST(T, <span class="number">7</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" 用FindX_inBST的结果显示一下数字 7 : %d\n\n"</span>, resTNode-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NO \n\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"【2】使用非递归方式查找数字 5 是否在二叉搜索树中 : "</span>);</span><br><span class="line"><span class="keyword">if</span> (Findx_inBST2(T, <span class="number">5</span>)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"YES \n\n"</span>);</span><br><span class="line">resTNode = Findx_inBST2(T, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" 用FindX_inBST_的结果显示一下数字 5 : %d\n\n"</span>, resTNode-&gt;data);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"NO\n\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resTNode = Findmax_inBST(T);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"【3】使用递归方式找到该二叉搜索树的最大值为   : %d\n"</span>, resTNode-&gt;data);</span><br><span class="line">resTNode = Findmax_inBST2(T);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"【4】使用非递归方式找到该二叉搜索树的最大值为 : %d\n\n"</span>, resTNode-&gt;data);</span><br><span class="line"></span><br><span class="line">resTNode = Findmin_inBST(T);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"【5】使用递归方式找到该二叉搜索树的最小值为   : %d\n"</span>, resTNode-&gt;data);</span><br><span class="line">resTNode = Findmin_inBST2(T);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"【6】使用非递归方式找到该二叉搜索树的最小值为 : %d\n\n"</span>, resTNode-&gt;data);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"【7】将数字 35 插入该二叉搜索树中 : \n"</span>);</span><br><span class="line">resTNode = InsertXtoBST(T, <span class="number">35</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"     成功插入数字 35, 现在输出先序遍历的结果:"</span>);</span><br><span class="line">PreOrderTraversal(resTNode);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"     成功插入数字 35, 现在输出中序遍历的结果:"</span>);</span><br><span class="line">InOrderTraversal(resTNode);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"【8】将数字 6 插入空树中 : "</span>);</span><br><span class="line">BT T1 = CreateBinTree();</span><br><span class="line">resTNode = InsertXtoBST(T1, <span class="number">6</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"     成功插入数字 6, 现在输出先序遍历的结果:"</span>);</span><br><span class="line">PreOrderTraversal(resTNode);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"     成功插入数字 6, 现在输出中序遍历的结果:"</span>);</span><br><span class="line">InOrderTraversal(resTNode);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"【9】将数字 33 从该二叉搜索树中删除 : \n"</span>);</span><br><span class="line">resTNode = Deletex_inBST(T, <span class="number">33</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"     成功删除数字 33, 现在输出先序遍历的结果:"</span>);</span><br><span class="line">PreOrderTraversal(resTNode);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"     成功删除数字 33, 现在输出中序遍历的结果:"</span>);</span><br><span class="line">InOrderTraversal(resTNode);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n\n"</span>);</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 二叉搜索树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法与数据结构7-3 树的同构 (25 分)</title>
      <link href="/2019/09/14/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%847-3-%E6%A0%91%E7%9A%84%E5%90%8C%E6%9E%84-25-%E5%88%86/"/>
      <url>/2019/09/14/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%847-3-%E6%A0%91%E7%9A%84%E5%90%8C%E6%9E%84-25-%E5%88%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>7-3 树的同构 (25 分)</p><p>给定两棵树T1和T2。如果T1可以通过若干次左右孩子互换就变成T2，则我们称两棵树是“同构”的。例如图1给出的两棵树就是同构的，因为我们把其中一棵树的结点A、B、G的左右孩子互换后，就得到另外一棵树。而图2就不是同构的。</p><p><img alt="img" data-src="https://images.ptausercontent.com/28" class="lazyload"></p><p>图1</p><p><img alt="img" data-src="https://images.ptausercontent.com/29" class="lazyload"></p><p>图2 </p><p> 现给定两棵树，请你判断它们是否是同构的。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入给出2棵二叉树树的信息。对于每棵树，首先在一行中给出一个非负整数<em>N</em> (≤10)，即该树的结点数（此时假设结点从0到<em>N</em>−1编号）；随后<em>N</em>行，第<em>i</em>行对应编号第<em>i</em>个结点，给出该结点中存储的1个英文大写字母、其左孩子结点的编号、右孩子结点的编号。如果孩子结点为空，则在相应位置上给出“-”。给出的数据间用一个空格分隔。注意：题目保证每个结点中存储的字母是不同的。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>如果两棵树是同构的，输出“Yes”，否则输出“No”。</p><h3 id="输入样例1（对应图1）："><a href="#输入样例1（对应图1）：" class="headerlink" title="输入样例1（对应图1）："></a>输入样例1（对应图1）：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">A 1 2</span><br><span class="line">B 3 4</span><br><span class="line">C 5 -</span><br><span class="line">D - -</span><br><span class="line">E 6 -</span><br><span class="line">G 7 -</span><br><span class="line">F - -</span><br><span class="line">H - -</span><br><span class="line">8</span><br><span class="line">G - 4</span><br><span class="line">B 7 6</span><br><span class="line">F - -</span><br><span class="line">A 5 1</span><br><span class="line">H - -</span><br><span class="line">C 0 -</span><br><span class="line">D - -</span><br><span class="line">E 2 -</span><br></pre></td></tr></table></figure><h3 id="输出样例1"><a href="#输出样例1" class="headerlink" title="输出样例1:"></a>输出样例1:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Yes</span><br></pre></td></tr></table></figure><h3 id="输入样例2（对应图2）："><a href="#输入样例2（对应图2）：" class="headerlink" title="输入样例2（对应图2）："></a>输入样例2（对应图2）：</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">8</span><br><span class="line">B 5 7</span><br><span class="line">F - -</span><br><span class="line">A 0 3</span><br><span class="line">C 6 -</span><br><span class="line">H - -</span><br><span class="line">D - -</span><br><span class="line">G 4 -</span><br><span class="line">E 1 -</span><br><span class="line">8</span><br><span class="line">D 6 -</span><br><span class="line">B 5 -</span><br><span class="line">E - -</span><br><span class="line">H - -</span><br><span class="line">C 0 2</span><br><span class="line">G - 3</span><br><span class="line">F - -</span><br><span class="line">A 1 4</span><br></pre></td></tr></table></figure><h3 id="输出样例2"><a href="#输出样例2" class="headerlink" title="输出样例2:"></a>输出样例2:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">No</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NULL -1</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> data;</span><br><span class="line"><span class="keyword">int</span> left;</span><br><span class="line"><span class="keyword">int</span> right;</span><br><span class="line">&#125;T1[<span class="number">20</span>],T2[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> book[<span class="number">20</span>];<span class="comment">//用来找到根节点</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">build</span><span class="params">(struct Node tree[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> l, r;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">int</span> root = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">if</span> (n == <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">book[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; tree[i].data &gt;&gt; l &gt;&gt; r;</span><br><span class="line"><span class="keyword">if</span> (l == <span class="string">'-'</span>) tree[i].left = <span class="literal">NULL</span>;<span class="comment">//左子树</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">tree[i].left = l - <span class="string">'0'</span>;</span><br><span class="line">book[l - <span class="string">'0'</span>] = <span class="number">1</span>;<span class="comment">//将儿子们赋值为1，则为0的必然是爹，也就是根节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (r == <span class="string">'-'</span>) tree[i].right = <span class="literal">NULL</span>;<span class="comment">//右子树</span></span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">tree[i].right = r - <span class="string">'0'</span>;</span><br><span class="line">book[r - <span class="string">'0'</span>] = <span class="number">1</span>;<span class="comment">//将儿子们赋值为1，则为0的必然是爹，也就是根节点</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (book[j] != <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">root = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> root;<span class="comment">//返回根节点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Issame</span><span class="params">(<span class="keyword">int</span> root1, <span class="keyword">int</span> root2)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (root1 == <span class="literal">NULL</span> &amp;&amp; root2 == <span class="literal">NULL</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//都为空树，必然同构</span></span><br><span class="line"><span class="keyword">if</span> ((root1 == <span class="literal">NULL</span> &amp;&amp; root2 != <span class="literal">NULL</span>) || (root1 != <span class="literal">NULL</span> &amp;&amp; root2 == <span class="literal">NULL</span>))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//一个为空，另一个不为空，不同构</span></span><br><span class="line"><span class="keyword">if</span> (T1[root1].data != T2[root2].data)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//节点值不同，不同构</span></span><br><span class="line"><span class="keyword">if</span> (T1[T1[root1].left].data == T2[T2[root2].left].data)<span class="comment">//左儿子值相同，则比较右儿子</span></span><br><span class="line"><span class="keyword">return</span> Issame(T1[root1].right, T2[root2].right);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> Issame(T1[root1].left, T2[root2].right) &amp;&amp; Issame(T1[root1].right, T2[root2].left);<span class="comment">//若不同，则比较第一棵树的左儿子和第二棵树的右儿子</span></span><br><span class="line">      <span class="comment">//以及第一棵树的右儿子和第二棵树的左儿子，都为1的返回值才说明同构</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> root1 = build(T1);</span><br><span class="line"><span class="keyword">int</span> root2 = build(T2);</span><br><span class="line"><span class="keyword">if</span> (Issame(root1, root2))</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Yes"</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"No"</span>;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> PTA </tag>
            
            <tag> 算法与数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法与数据结构7-2 一元多项式的乘法与加法运算 (20 分)</title>
      <link href="/2019/09/13/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%847-2-%E4%B8%80%E5%85%83%E5%A4%9A%E9%A1%B9%E5%BC%8F%E7%9A%84%E4%B9%98%E6%B3%95%E4%B8%8E%E5%8A%A0%E6%B3%95%E8%BF%90%E7%AE%97-20-%E5%88%86/"/>
      <url>/2019/09/13/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%847-2-%E4%B8%80%E5%85%83%E5%A4%9A%E9%A1%B9%E5%BC%8F%E7%9A%84%E4%B9%98%E6%B3%95%E4%B8%8E%E5%8A%A0%E6%B3%95%E8%BF%90%E7%AE%97-20-%E5%88%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>设计函数分别求两个一元多项式的乘积与和。</p><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入分2行，每行分别先给出多项式非零项的个数，再以指数递降方式输入一个多项式非零项系数和指数（绝对值均为不超过1000的整数）。数字间以空格分隔。</p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>输出分2行，分别以指数递降方式输出乘积多项式以及和多项式非零项的系数和指数。数字间以空格分隔，但结尾不能有多余空格。零多项式应输出<code>0 0</code>。</p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">4 3 4 -5 2  6 1  -2 0</span><br><span class="line">3 5 20  -7 4  3 1</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">15 24 -25 22 30 21 -10 20 -21 8 35 6 -33 5 14 4 -15 3 18 2 -6 1</span><br><span class="line">5 20 -4 4 -5 2 9 1 -2 0</span><br></pre></td></tr></table></figure><p>本应该用链表做的，但是太复杂了，索性用数组。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], b[maxn],c[maxn],d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, j;</span><br><span class="line"><span class="keyword">int</span> x, z;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line"><span class="keyword">while</span> (i--) &#123;</span><br><span class="line"><span class="comment">//scanf("%d %d", &amp;x, &amp;z);</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; z;</span><br><span class="line">a[z] += x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; i;</span><br><span class="line"><span class="keyword">while</span> (i--) &#123;</span><br><span class="line"><span class="comment">//scanf("%d %d", &amp;x, &amp;z);</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; x &gt;&gt; z;</span><br><span class="line">b[z] += x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i = maxn - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i]) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; maxn; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (b[j]) c[i + j] += a[i] * b[j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">for</span> (i = maxn - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (c[i]) &#123;</span><br><span class="line"><span class="keyword">if</span> (cnt) <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>, c[i], i);</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!cnt) <span class="built_in">printf</span>(<span class="string">"0 0"</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span> (i = maxn - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line"><span class="keyword">if</span> (a[i]) d[i] += a[i];</span><br><span class="line"><span class="keyword">for</span> (j = maxn - <span class="number">1</span>; j &gt;= <span class="number">0</span>; j--)</span><br><span class="line"><span class="keyword">if</span> (b[j]) d[j] += b[j];</span><br><span class="line">cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = maxn - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">if</span> (d[i]) &#123;</span><br><span class="line"><span class="keyword">if</span> (cnt) <span class="built_in">cout</span> &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d %d"</span>, d[i], i);</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!cnt) <span class="built_in">printf</span>(<span class="string">"0 0"</span>);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> PTA </tag>
            
            <tag> 算法与数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法与数据结构7-1 最大子列和问题 (20 分)</title>
      <link href="/2019/09/13/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%847-1-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%88%97%E5%92%8C%E9%97%AE%E9%A2%98-20-%E5%88%86/"/>
      <url>/2019/09/13/%E7%AE%97%E6%B3%95%E4%B8%8E%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%847-1-%E6%9C%80%E5%A4%A7%E5%AD%90%E5%88%97%E5%92%8C%E9%97%AE%E9%A2%98-20-%E5%88%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p>给定<em>K</em>个整数组成的序列{ <em>N</em>1, <em>N</em>2, …, <em>N**K</em> }，“连续子列”被定义为{ <em>N**i</em>, <em>N**i</em>+1, …, <em>N**j</em> }，其中 1≤<em>i</em>≤<em>j</em>≤<em>K</em>。“最大子列和”则被定义为所有连续子列元素的和中最大者。例如给定序列{ -2, 11, -4, 13, -5, -2 }，其连续子列{ 11, -4, 13 }有最大的和20。现要求你编写程序，计算给定整数序列的最大子列和。 </p><p>本题旨在测试各种不同的算法在各种数据情况下的表现。各组测试数据特点如下：</p><ul><li>数据1：与样例等价，测试基本正确性；</li><li>数据2：102个随机整数；</li><li>数据3：103个随机整数；</li><li>数据4：104个随机整数；</li><li>数据5：105个随机整数；</li></ul><h3 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式:"></a>输入格式:</h3><p>输入第1行给出正整数<em>K</em> (≤100000)；第2行给出<em>K</em>个整数，其间以空格分隔。 </p><h3 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式:"></a>输出格式:</h3><p>在一行中输出最大子列和。如果序列中所有整数皆为负数，则输出0。 </p><h3 id="输入样例"><a href="#输入样例" class="headerlink" title="输入样例:"></a>输入样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">6</span><br><span class="line">-2 11 -4 13 -5 -2</span><br></pre></td></tr></table></figure><h3 id="输出样例"><a href="#输出样例" class="headerlink" title="输出样例:"></a>输出样例:</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">20</span><br></pre></td></tr></table></figure><p>题解代码（效率为O(N)):</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line"><span class="keyword">int</span> max = <span class="number">0</span>, temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">&#123;</span><br><span class="line">temp += a[i];</span><br><span class="line"><span class="keyword">if</span> (temp &gt; max)</span><br><span class="line">max = temp;</span><br><span class="line"><span class="keyword">if</span> (temp &lt; <span class="number">0</span>)</span><br><span class="line">temp = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; max;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> PTA </tag>
            
            <tag> 算法与数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>擒贼先擒王——并查集</title>
      <link href="/2019/09/12/%E6%93%92%E8%B4%BC%E5%85%88%E6%93%92%E7%8E%8B%E2%80%94%E2%80%94%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
      <url>/2019/09/12/%E6%93%92%E8%B4%BC%E5%85%88%E6%93%92%E7%8E%8B%E2%80%94%E2%80%94%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><p><strong>今天复习了一下堆的两种排序方法，又学习了一下并查集。</strong></p><p><strong>下附上问题描述和代码</strong></p><p><img alt data-src="https://s2.ax1x.com/2019/09/12/nBb4oQ.jpg" class="lazyload"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> f[<span class="number">1001</span>] = &#123; <span class="number">0</span> &#125;, n, m, sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">f[i] = i;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//找爹且擒贼先擒王</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getf</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (f[v] == v)</span><br><span class="line"><span class="keyword">return</span> v;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">//路径压缩，每次函数返回的时候，顺带把路上遇到的人的"BOSS"改为最后找到的祖宗编号；</span></span><br><span class="line"><span class="comment">//提高找祖先的速度。</span></span><br><span class="line">f[v] = getf(f[v]);</span><br><span class="line"><span class="keyword">return</span> f[v];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//合并两子集合的函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t1, t2;</span><br><span class="line">t1 = getf(v);<span class="comment">//t1,t2分别为v和u的最大BOSS</span></span><br><span class="line">t2 = getf(u);</span><br><span class="line"><span class="keyword">if</span> (t1 != t2)</span><br><span class="line">f[t2] = t1;<span class="comment">//靠左原则</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, x, y;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>,&amp;n, &amp;m);<span class="comment">//n是有多少个犯罪个体，m是由多少条描述</span></span><br><span class="line">init();<span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;x, &amp;y);</span><br><span class="line">merge(x, y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//扫描有多少个独立的犯罪团伙</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line"><span class="keyword">if</span> (f[i] == i)</span><br><span class="line">sum++;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sum);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终返回的是有多少个独立团伙。</p><p>运行结果：</p><p><img alt data-src="https://s2.ax1x.com/2019/09/12/nBbwZD.png" class="lazyload"></p><p>最后结果是3.</p><p>附上今日份的山大月饼，馋你们。<img alt data-src="https://s2.ax1x.com/2019/09/12/nBqMlt.jpg" class="lazyload"></p><p><img alt data-src="https://s2.ax1x.com/2019/09/12/nBbIij.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 啊哈算法 </tag>
            
            <tag> 并查集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构实验一——顺序表的相关操作</title>
      <link href="/2019/09/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E4%B8%80%E2%80%94%E2%80%94%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/09/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%AE%9E%E9%AA%8C%E4%B8%80%E2%80%94%E2%80%94%E9%A1%BA%E5%BA%8F%E8%A1%A8%E7%9A%84%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ListNode</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> data;</span><br><span class="line">ListNode *Next;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> ListNode * List;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回表长</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ListLength</span><span class="params">(List L)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">List p = L;</span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line">cnt++;</span><br><span class="line">p = p-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回元素的值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">GetElem</span><span class="params">(List L, ElementType pos)</span> </span>&#123;</span><br><span class="line">List p = L;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos - <span class="number">1</span>; i++)</span><br><span class="line">p = p-&gt;Next;</span><br><span class="line"><span class="keyword">return</span> p-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查找表中是否有对应元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">LocateElem</span><span class="params">(List L, ElementType v)</span> </span>&#123;</span><br><span class="line">List p = L;</span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line"><span class="keyword">if</span> (p-&gt;data == v)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">p = p-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链表插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListInsert</span><span class="params">(List L, ElementType pos, ElementType v)</span> </span>&#123;</span><br><span class="line">List p = L;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; pos - <span class="number">1</span>; i++)</span><br><span class="line">p = p-&gt;Next;</span><br><span class="line">List temp = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ListNode));</span><br><span class="line">temp-&gt;data = v;</span><br><span class="line">temp-&gt;Next = p-&gt;Next;</span><br><span class="line">p-&gt;Next = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链表打印及去重排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(List L)</span> </span>&#123;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">List p = L;</span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s%d"</span>, flag ? <span class="string">" "</span> : <span class="string">""</span>, p-&gt;data);</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">p = p-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">p = L;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"去重后的元素："</span>);</span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line">s.insert(p-&gt;data);</span><br><span class="line">p = p-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it = s.begin(); it != s.end(); it++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s%d"</span>, flag ? <span class="string">" "</span> : <span class="string">""</span>, *it);</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">p = L;</span><br><span class="line">flag = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"排序后的元素为："</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : s) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s%d"</span>, flag ? <span class="string">" "</span> : <span class="string">""</span>, it);</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList2</span><span class="params">(List L)</span> </span>&#123;</span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">false</span>;</span><br><span class="line">List p = L;</span><br><span class="line"><span class="keyword">while</span> (p) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s%d"</span>, flag ? <span class="string">" "</span> : <span class="string">""</span>, p-&gt;data);</span><br><span class="line">flag = <span class="literal">true</span>;</span><br><span class="line">p = p-&gt;Next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//链表创建</span></span><br><span class="line"><span class="function">List <span class="title">create</span><span class="params">(<span class="keyword">char</span> id)</span> </span>&#123;</span><br><span class="line">ElementType all;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入集合%c的元素个数：%c = "</span>, id, id + <span class="number">23</span>);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;all);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入集合%c的元素："</span>, id);</span><br><span class="line">List head, p;<span class="comment">//头插法创建链表</span></span><br><span class="line">head = <span class="literal">NULL</span>;</span><br><span class="line">p = head;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; all; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">p = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct ListNode));</span><br><span class="line">p-&gt;data = n;</span><br><span class="line">p-&gt;Next = head;</span><br><span class="line">head = p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"集合%c中的元素为："</span>, id);</span><br><span class="line">PrintList(head);</span><br><span class="line"><span class="keyword">return</span> head;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这个求并集的算法还是有些问题，待我日后再改。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">UnionList</span><span class="params">(List a, List b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> lena = ListLength(a), lenb = ListLength(b);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lenb; i++) &#123;</span><br><span class="line">ElementType v = GetElem(b, i);</span><br><span class="line"><span class="keyword">if</span> (!LocateElem(a, v))</span><br><span class="line">ListInsert(a, ++lena, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"合并后的集合为："</span>);</span><br><span class="line">PrintList2(a);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List La = create(<span class="string">'A'</span>);</span><br><span class="line">List Lb = create(<span class="string">'B'</span>);</span><br><span class="line">UnionList(La, Lb);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img alt data-src="https://s2.ax1x.com/2019/09/10/nURCtJ.png" class="lazyload"></p><p>溜了溜了，第一遍没上传过来，很气。</p><p><img alt data-src="https://s2.ax1x.com/2019/09/09/ntEkxs.jpg" class="lazyload"></p><p>好了，作为不食言的我，今天决定传上来顺序表的操作，这个表实现了所有功能。</p><p><img alt data-src="https://s2.ax1x.com/2019/09/18/nHNoW9.jpg" class="lazyload"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;set&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXSIZE 20</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ERROR -1 </span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; s1, s2,s3,s4,s5;</span><br><span class="line"><span class="keyword">int</span> book[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> ElementType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span> Position;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">List</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> &#123;</span></span><br><span class="line">ElementType Data[MAXSIZE];</span><br><span class="line">Position Last; <span class="comment">/* 保存线性表中最后一个元素的位置 */</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="function">List <span class="title">MakeEmpty</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createList</span><span class="params">(List L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(List L)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList2</span><span class="params">(List L)</span></span>;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">List L,L2;</span><br><span class="line">ElementType X;</span><br><span class="line">Position P;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line">L = MakeEmpty();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入A集合的元素个数："</span>);</span><br><span class="line">createList(L);</span><br><span class="line">PrintList(L);</span><br><span class="line">L2 = MakeEmpty();</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入B集合的元素个数："</span>);</span><br><span class="line">createList(L2);</span><br><span class="line">PrintList2(L2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"有序集合A:"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : s1) <span class="built_in">cout</span>&lt;&lt;it &lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"有序集合B:"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : s2) <span class="built_in">cout</span>&lt;&lt;it&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">s4 = s1;</span><br><span class="line">s5 = s2;</span><br><span class="line">s3 = s1;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"AB的并集为："</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : s2) &#123;</span><br><span class="line"><span class="keyword">if</span> (book[it] == <span class="number">0</span>) &#123;</span><br><span class="line">L-&gt;Last++;</span><br><span class="line">s1.insert(it);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it:s1) <span class="built_in">cout</span> &lt;&lt; it &lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"AB的交集为："</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> it:s3)</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it2 : s2) &#123;</span><br><span class="line"><span class="keyword">if</span> (it == it2)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"A-B的差积为："</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : s2) &#123;</span><br><span class="line"><span class="keyword">if</span> (book[it] == <span class="number">1</span>)</span><br><span class="line">s3.erase(it);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : s3) <span class="built_in">cout</span> &lt;&lt; it &lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"B-A的差积为："</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : s4) &#123;</span><br><span class="line"><span class="keyword">if</span> (book[it] == <span class="number">1</span>)</span><br><span class="line">s5.erase(it);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : s5) <span class="built_in">cout</span> &lt;&lt; it &lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">List <span class="title">MakeEmpty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">List p;</span><br><span class="line">p = (List)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));</span><br><span class="line">p-&gt;Last = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">createList</span><span class="params">(List L)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请输入集合的元素："</span>);</span><br><span class="line"><span class="keyword">if</span> (cnt == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; L-&gt;Data[i];</span><br><span class="line">L-&gt;Last = i;</span><br><span class="line">s2.insert(L-&gt;Data[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; L-&gt;Data[i];</span><br><span class="line">L-&gt;Last = i;</span><br><span class="line">s1.insert(L-&gt;Data[i]);</span><br><span class="line">book[L-&gt;Data[i]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList</span><span class="params">(List L)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"原集合的元素为："</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= L-&gt;Last; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; L-&gt;Data[i] &lt;&lt;<span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"集合去重后剩余元素个数："</span>);</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : s1) cnt++;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; cnt&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"集合去重后剩余元素："</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : s1)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PrintList2</span><span class="params">(List L)</span> </span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"原集合的元素为："</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= L-&gt;Last; i++)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; L-&gt;Data[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"集合去重后剩余元素个数："</span>);</span><br><span class="line"><span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : s2) cnt++;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; cnt &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"集合去重后剩余元素："</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span> it : s2)</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>下附运行结果：</p><p><img alt data-src="https://s2.ax1x.com/2019/09/18/nHaL5D.png" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 顺序表 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>堆————神奇的优先队列</title>
      <link href="/2019/09/10/%E5%A0%86%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
      <url>/2019/09/10/%E5%A0%86%E2%80%94%E2%80%94%E2%80%94%E2%80%94%E7%A5%9E%E5%A5%87%E7%9A%84%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="\assets\js\Meting.min.js"></script><h3 id="堆——神奇的优先队列"><a href="#堆——神奇的优先队列" class="headerlink" title="堆——神奇的优先队列"></a><strong>堆——神奇的优先队列</strong></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//建堆以及堆排序</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> h[<span class="number">101</span>];<span class="comment">//存放堆的数组</span></span><br><span class="line"><span class="keyword">int</span> n;<span class="comment">//用来存储堆中元素的个数，也就是堆的大小</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">t = h[x];</span><br><span class="line">h[x] = h[y];</span><br><span class="line">h[y] = t;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//向下调整函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">siftdown</span><span class="params">(<span class="keyword">int</span> i)</span><span class="comment">//从1开始，向下调整</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t, flag = <span class="number">0</span>;<span class="comment">//flag用来标记是否需要继续向下调整</span></span><br><span class="line"><span class="comment">//当i节点有儿子的时候才向下执行</span></span><br><span class="line"><span class="keyword">while</span> (i * <span class="number">2</span> &lt;= n &amp;&amp; flag == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//首先判断它与左儿子的关系，用t记录值比较小的节点的编号</span></span><br><span class="line"><span class="keyword">if</span> (h[i] &gt; h[i * <span class="number">2</span>])</span><br><span class="line">t = i * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">t = i;</span><br><span class="line"><span class="comment">//再判断它与右儿子的关系，用t记录值比较小的节点的编号</span></span><br><span class="line"><span class="keyword">if</span> (i * <span class="number">2</span> + <span class="number">1</span> &lt;= n) &#123;</span><br><span class="line"><span class="comment">//如果右儿子更小，更新较小的节点编号</span></span><br><span class="line"><span class="keyword">if</span> (h[t] &gt; h[i * <span class="number">2</span>+<span class="number">1</span>]  )</span><br><span class="line">t = i * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//如法发现最小的节点编号不是自己，说明有比父节点更小的</span></span><br><span class="line"><span class="keyword">if</span> (t != i) &#123;</span><br><span class="line">swap(i, t);<span class="comment">//交换值</span></span><br><span class="line">i = t;<span class="comment">//更新i为刚才与它交换的儿子节点的编号，便于继续进行调整</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这是用堆排序的方法所用到的调整函数，目的在于建立最大堆</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">siftdown1</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t, flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i * <span class="number">2</span> &lt;= n &amp;&amp; flag == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (h[i] &lt; h[i * <span class="number">2</span>])</span><br><span class="line">t = i * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">t = i;</span><br><span class="line"><span class="keyword">if</span> (i * <span class="number">2</span> + <span class="number">1</span> &lt;= n) &#123;</span><br><span class="line"><span class="keyword">if</span> (h[t] &lt; h[i * <span class="number">2</span> + <span class="number">1</span>])</span><br><span class="line">t = i * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (t != i) &#123;</span><br><span class="line">swap(i, t);</span><br><span class="line">i = t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//堆排序</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapsort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span> (n &gt; <span class="number">1</span>) &#123;</span><br><span class="line">swap(<span class="number">1</span>, n);</span><br><span class="line">n--;</span><br><span class="line">siftdown1(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立堆的函数</span></span><br><span class="line"><span class="comment">//从最后一个非叶节点到第一个节点依次进行向下调整</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = n / <span class="number">2</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">siftdown(i);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//堆排序方法的建立最大堆</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">creat</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = n / <span class="number">2</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">siftdown1(i);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除最大的元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">deletemax</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line">t = h[<span class="number">1</span>];<span class="comment">//临时变量记录定点值</span></span><br><span class="line">h[<span class="number">1</span>] = h[n];<span class="comment">//将堆的最后一个点赋值到堆顶</span></span><br><span class="line">n--;<span class="comment">//堆的元素个数减少一</span></span><br><span class="line">siftdown(<span class="number">1</span>);<span class="comment">//向下调整</span></span><br><span class="line"><span class="keyword">return</span> t;<span class="comment">//返回之前记录的定点最小值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> i, num;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;h[i]);</span><br><span class="line">n = num;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">create();<span class="comment">//建堆</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//连续删除n次顶部元素，也就是从小到大把数输出来</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, deletemax());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;h[i]);</span><br><span class="line">n = num;</span><br><span class="line">creat();</span><br><span class="line">heapsort();<span class="comment">//堆排序</span></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= num; i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, h[i]);</span><br><span class="line">getchar();</span><br><span class="line">getchar();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行结果如下：</p><p><img alt data-src="https://s2.ax1x.com/2019/09/09/ntEkxs.jpg" class="lazyload"></p><p>咳咳，运行结果被我搞没了，总而言之是按照升序排列就对了。</p><p>最后贴上我的良师益友的照片来镇楼。</p><p><img alt data-src="https://s2.ax1x.com/2019/09/09/ntnDbR.jpg" class="lazyload"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 堆 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
